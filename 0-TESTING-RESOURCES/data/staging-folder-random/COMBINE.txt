<div id="react-container" data-component-name="SPA">
<div class="loading-bar">

</div>
<ul>
<li><a href="#content" id="skip-main">Skip to main content</a></li>
<li><a href="#language" id="skip-language">Select language</a></li>
<li><a href="#main-q" id="skip-search">Skip to search</a></li>
</ul>
<ul>
<li>Technologies
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Technologies Overview</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide/Graphics">Graphics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API">APIs / DOM</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions">Browser Extensions</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/MathML">MathML</a></li>
</ul></li>
<li>References &amp; Guides
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn web development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Tutorials">Tutorials</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Reference">References</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide">Developer Guides</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Accessibility">Accessibility</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Games">Game development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">...more docs</a></li>
</ul></li>
<li>Feedback
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Send Feedback</a></li>
<li><a href="../../../../../external.html?link=https://support.mozilla.org/">Get Firefox help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://stackoverflow.com/">Get web development help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Community">Join the MDN community</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/sprints/issues/new?template=issue-template.md&amp;projects=mdn/sprints/2&amp;labels=user-report&amp;title=/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript">Report a content problem 🌐</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/kuma/issues/new/choose">Report an issue 🌐</a></li>
</ul></li>
</ul>
<div class="header-search">
Search MDN
<span>Open search</span>
</div>
<div data-role="main">
<div class="titlebar-container">
<div class="titlebar">

</div>
</div>
<div class="full-width-row-container">
<div class="max-content-width-container">
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web" class="breadcrumb-chevron"><span class="pre-text">See </span><span data-property="name">Web technology for developers</span></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript" class="breadcrumb-previous"><span class="pre-text">See </span><span data-property="name">JavaScript</span></a></li>
<li><a href="A_re-introduction_to_JavaScript.html" class="crumb-current-page"><span data-property="name" data-aria-current="page">A re-introduction to JavaScript (JS tutorial)</span></a></li>
</ol>
<div class="dropdown-container language-menu">
English<span class="dropdown-arrow-down" data-aria-hidden="true">▼</span>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/bn/docs/Web/JavaScript/A_re-introduction_to_JavaScript" title="Bengali">বাংলা</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ca/docs/Web/JavaScript/A_re-introduction_to_JavaScript" title="Catalan">Català</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/de/docs/Web/JavaScript/Eine_Wiedereinfuehrung_in_JavaScript" title="German">Deutsch</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/es/docs/Web/JavaScript/Una_re-introducción_a_JavaScript" title="Spanish">Español</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/fa/docs/Web/JavaScript/A_re-introduction_to_JavaScript" title="Persian">فارسی</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/fr/docs/Web/JavaScript/Une_réintroduction_à_JavaScript" title="French">Français</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/hu/docs/Web/JavaScript/a_javascript_ujboli_bemutatasa" title="Hungarian">magyar</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/id/docs/Web/JavaScript/A_re-introduction_to_JavaScript" title="Indonesian">Bahasa Indonesia</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/it/docs/Web/JavaScript/Una_reintroduzione_al_JavaScript" title="Italian">Italiano</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ja/docs/Web/JavaScript/A_re-introduction_to_JavaScript" title="Japanese">日本語</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ko/docs/A_re-introduction_to_JavaScript" title="Korean">한국어</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pl/docs/Web/JavaScript/Ponowne_wprowadzenie_do_JavaScript" title="Polish">Polski</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/A_re-introduction_to_JavaScript" title="Portuguese (Brazilian)">Português (do Brasil)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ru/docs/Web/JavaScript/A_re-introduction_to_JavaScript" title="Russian">Русский</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/tr/docs/Web/JavaScript/A_re-introduction_to_JavaScript" title="Turkish">Türkçe</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/uk/docs/Web/JavaScript/A_re-introduction_to_JavaScript" title="Ukrainian">Українська</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/vi/docs/Web/JavaScript/A_re-introduction_to_JavaScript" title="Vietnamese">Tiếng Việt</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript" title="Chinese (Simplified)">中文 (简体)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/A_re-introduction_to_JavaScript" title="Chinese (Traditional)">正體中文 (繁體)</a></li>
<li><a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript$locales" id="translations-add">Add a translation</a></li>
</ul>
</div>
</div>
</div>
<div class="wiki-left-present content-layout">
<div id="content" class="article text-content">
<div>

</div>
<p>Why a re-introduction? Because <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/JavaScript">JavaScript</a> is notorious for being <a href="../../../../../external.html?link=http://crockford.com/javascript/javascript.html" class="external">the world's most misunderstood programming language</a>. It is often derided as being a toy, but beneath its layer of deceptive simplicity, powerful language features await. JavaScript is now used by an incredible number of high-profile applications, showing that deeper knowledge of this technology is an important skill for any web or mobile developer.</p>
<p>It's useful to start with an overview of the language's history. JavaScript was created in 1995 by Brendan Eich while he was an engineer at Netscape. JavaScript was first released with Netscape 2 early in 1996. It was originally going to be called LiveScript, but it was renamed in an ill-fated marketing decision that attempted to capitalize on the popularity of Sun Microsystem's Java language — despite the two having very little in common. This has been a source of confusion ever since.</p>
<p>Several months later, Microsoft released JScript with Internet Explorer 3. It was a mostly-compatible JavaScript work-alike. Several months after that, Netscape submitted JavaScript to <a href="../../../../../external.html?link=http://www.ecma-international.org/" class="external">Ecma International</a>, a European standards organization, which resulted in the first edition of the <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/ECMAScript">ECMAScript</a> standard that year. The standard received a significant update as <a href="../../../../../external.html?link=http://www.ecma-international.org/publications/standards/Ecma-262.htm" class="external">ECMAScript edition 3</a> in 1999, and it has stayed pretty much stable ever since. The fourth edition was abandoned, due to political differences concerning language complexity. Many parts of the fourth edition formed the basis for ECMAScript edition 5, published in December of 2009, and for the 6th major edition of the standard, published in June of 2015.</p>
<div class="note">
<p>Because it is more familiar, we will refer to ECMAScript as "JavaScript" from this point on.</p>
</div>
<p>Unlike most programming languages, the JavaScript language has no concept of input or output. It is designed to run as a scripting language in a host environment, and it is up to the host environment to provide mechanisms for communicating with the outside world. The most common host environment is the browser, but JavaScript interpreters can also be found in a huge list of other places, including Adobe Acrobat, Adobe Photoshop, SVG images, Yahoo's Widget engine, server-side environments such as <a href="../../../../../external.html?link=http://nodejs.org/" class="external">Node.js</a>, NoSQL databases like the open source <a href="../../../../../external.html?link=http://couchdb.apache.org/" class="external">Apache CouchDB</a>, embedded computers, complete desktop environments like <a href="../../../../../external.html?link=http://www.gnome.org/" class="external">GNOME</a> (one of the most popular GUIs for GNU/Linux operating systems), and others.</p>
<h2 id="Overview">Overview</h2>
<p>JavaScript is a multi-paradigm, dynamic language with types and operators, standard built-in objects, and methods. Its syntax is based on the Java and C languages — many structures from those languages apply to JavaScript as well. JavaScript supports object-oriented programming with object prototypes, instead of classes (see more about <a href="Inheritance_and_the_prototype_chain.html" title="prototypical inheritance">prototypical inheritance</a> and ES2015 <a href="Reference/Classes.html">classes</a>). JavaScript also supports functional programming — because they are objects, functions may be stored in variables and passed around like any other object.</p>
<p>Let's start off by looking at the building blocks of any language: the types. JavaScript programs manipulate values, and those values all belong to a type. JavaScript's types are:</p>
<ul>
<li><a href="Reference/Global_Objects/Number.html"><code>Number</code></a></li>
<li><a href="Reference/Global_Objects/String.html"><code>String</code></a></li>
<li><a href="Reference/Global_Objects/Boolean.html"><code>Boolean</code></a></li>
<li><a href="Reference/Global_Objects/Function.html"><code>Function</code></a></li>
<li><a href="Reference/Global_Objects/Object.html"><code>Object</code></a></li>
<li><a href="Reference/Global_Objects/Symbol.html"><code>Symbol</code></a> (new in ES2015)</li>
</ul>
<p>... oh, and <a href="Reference/Global_Objects/undefined.html"><code>undefined</code></a> and <a href="Reference/Global_Objects/null.html"><code>null</code></a>, which are ... slightly odd. And <a href="Reference/Global_Objects/Array.html"><code>Array</code></a>, which is a special kind of object. And <a href="Reference/Global_Objects/Date.html"><code>Date</code></a> and <a href="Reference/Global_Objects/RegExp.html"><code>RegExp</code></a>, which are objects that you get for free. And to be technically accurate, functions are just a special type of object. So the type diagram looks more like this:</p>
<ul>
<li><a href="Reference/Global_Objects/Number.html"><code>Number</code></a></li>
<li><a href="Reference/Global_Objects/String.html"><code>String</code></a></li>
<li><a href="Reference/Global_Objects/Boolean.html"><code>Boolean</code></a></li>
<li><a href="Reference/Global_Objects/Symbol.html"><code>Symbol</code></a> (new in ES2015)</li>
<li><a href="Reference/Global_Objects/Object.html"><code>Object</code></a>
<ul>
<li><a href="Reference/Global_Objects/Function.html"><code>Function</code></a></li>
<li><a href="Reference/Global_Objects/Array.html"><code>Array</code></a></li>
<li><a href="Reference/Global_Objects/Date.html"><code>Date</code></a></li>
<li><a href="Reference/Global_Objects/RegExp.html"><code>RegExp</code></a></li>
</ul></li>
<li><a href="Reference/Global_Objects/null.html"><code>null</code></a></li>
<li><a href="Reference/Global_Objects/undefined.html"><code>undefined</code></a></li>
</ul>
<p>And there are some built-in <a href="Reference/Global_Objects/Error.html"><code>Error</code></a> types as well. Things are a lot easier if we stick with the first diagram, however, so we'll discuss the types listed there for now.</p>
<h2 id="Numbers">Numbers</h2>
<p>Numbers in JavaScript are "double-precision 64-bit format IEEE 754 values", according to the spec —  There's <strong><em>no such thing as an integer</em></strong> in JavaScript (except <a href="Reference/Global_Objects/BigInt.html"><code>BigInt</code></a>), so you have to be a little careful. See this example:</p>
<pre class="syntaxbox"><code>console.log(3 / 2);             // 1.5, not 1
console.log(Math.floor(3 / 2)); // 1</code></pre>
<p>So an <em>apparent integer</em> is in fact <em>implicitly a float</em>.</p>
<p>Also, watch out for stuff like:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb2-1" title="1"><span class="fl">0.1</span> <span class="op">+</span> <span class="fl">0.2</span> <span class="op">==</span> <span class="fl">0.30000000000000004</span><span class="op">;</span></a></code></pre></div>
<p>In practice, integer values are treated as 32-bit ints, and some implementations even store it that way until they are asked to perform an instruction that's valid on a Number but not on a 32-bit integer. This can be important for bit-wise operations.</p>
<p>The standard <a href="Reference/Operators.html#Arithmetic_operators">arithmetic operators</a> are supported, including addition, subtraction, modulus (or remainder) arithmetic, and so forth. There's also a built-in object that we did not mention earlier called <a href="Reference/Global_Objects/Math.html"><code>Math</code></a> that provides advanced mathematical functions and constants:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb3-1" title="1"><span class="va">Math</span>.<span class="at">sin</span>(<span class="fl">3.5</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="kw">var</span> circumference <span class="op">=</span> <span class="dv">2</span> <span class="op">*</span> <span class="va">Math</span>.<span class="at">PI</span> <span class="op">*</span> r<span class="op">;</span></a></code></pre></div>
<p>You can convert a string to an integer using the built-in <a href="Reference/Global_Objects/parseInt.html"><code>parseInt()</code></a> function. This takes the base for the conversion as an optional second argument, which you should always provide:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb4-1" title="1"><span class="at">parseInt</span>(<span class="st">&#39;123&#39;</span><span class="op">,</span> <span class="dv">10</span>)<span class="op">;</span> <span class="co">// 123</span></a>
<a class="sourceLine" id="cb4-2" title="2"><span class="at">parseInt</span>(<span class="st">&#39;010&#39;</span><span class="op">,</span> <span class="dv">10</span>)<span class="op">;</span> <span class="co">// 10</span></a></code></pre></div>
<p>In older browsers, strings beginning with a "0" are assumed to be in octal (radix 8), but this hasn't been the case since 2013 or so. Unless you're certain of your string format, you can get surprising results on those older browsers:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb5-1" title="1"><span class="at">parseInt</span>(<span class="st">&#39;010&#39;</span>)<span class="op">;</span>  <span class="co">//  8</span></a>
<a class="sourceLine" id="cb5-2" title="2"><span class="at">parseInt</span>(<span class="st">&#39;0x10&#39;</span>)<span class="op">;</span> <span class="co">// 16</span></a></code></pre></div>
<p>Here, we see the <a href="Reference/Global_Objects/parseInt.html"><code>parseInt()</code></a> function treat the first string as octal due to the leading 0, and the second string as hexadecimal due to the leading "0x". The <em>hexadecimal notation is still in place</em>; only octal has been removed.</p>
<p>If you want to convert a binary number to an integer, just change the base:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb6-1" title="1"><span class="at">parseInt</span>(<span class="st">&#39;11&#39;</span><span class="op">,</span> <span class="dv">2</span>)<span class="op">;</span> <span class="co">// 3</span></a></code></pre></div>
<p>Similarly, you can parse floating point numbers using the built-in <a href="Reference/Global_Objects/parseFloat.html"><code>parseFloat()</code></a> function. Unlike its <a href="Reference/Global_Objects/parseInt.html"><code>parseInt()</code></a> cousin, <code>parseFloat()</code> always uses base 10.</p>
<p>You can also use the unary <code>+</code> operator to convert values to numbers:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb7-1" title="1"><span class="op">+</span> <span class="st">&#39;42&#39;</span><span class="op">;</span>   <span class="co">// 42</span></a>
<a class="sourceLine" id="cb7-2" title="2"><span class="op">+</span> <span class="st">&#39;010&#39;</span><span class="op">;</span>  <span class="co">// 10</span></a>
<a class="sourceLine" id="cb7-3" title="3"><span class="op">+</span> <span class="st">&#39;0x10&#39;</span><span class="op">;</span> <span class="co">// 16</span></a></code></pre></div>
<p>A special value called <a href="Reference/Global_Objects/NaN.html"><code>NaN</code></a> (short for "Not a Number") is returned if the string is non-numeric:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb8-1" title="1"><span class="at">parseInt</span>(<span class="st">&#39;hello&#39;</span><span class="op">,</span> <span class="dv">10</span>)<span class="op">;</span> <span class="co">// NaN</span></a></code></pre></div>
<p><code>NaN</code> is toxic: if you provide it as an operand to any mathematical operation, the result will also be <code>NaN</code>:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb9-1" title="1"><span class="kw">NaN</span> <span class="op">+</span> <span class="dv">5</span><span class="op">;</span> <span class="co">// NaN</span></a></code></pre></div>
<p>You can test for <code>NaN</code> using the built-in <a href="Reference/Global_Objects/isNaN.html"><code>isNaN()</code></a> function:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb10-1" title="1"><span class="at">isNaN</span>(<span class="kw">NaN</span>)<span class="op">;</span> <span class="co">// true</span></a></code></pre></div>
<p>JavaScript also has the special values <a href="Reference/Global_Objects/Infinity.html"><code>Infinity</code></a> and <code>-Infinity</code>:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb11-1" title="1"> <span class="dv">1</span> / <span class="dv">0</span><span class="op">;</span> <span class="co">//  Infinity</span></a>
<a class="sourceLine" id="cb11-2" title="2"><span class="dv">-1</span> / <span class="dv">0</span><span class="op">;</span> <span class="co">// -Infinity</span></a></code></pre></div>
<p>You can test for <code>Infinity</code>, <code>-Infinity</code> and <code>NaN</code> values using the built-in <a href="Reference/Global_Objects/isFinite.html"><code>isFinite()</code></a> function:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb12-1" title="1"><span class="at">isFinite</span>(<span class="dv">1</span> / <span class="dv">0</span>)<span class="op">;</span> <span class="co">// false</span></a>
<a class="sourceLine" id="cb12-2" title="2"><span class="at">isFinite</span>(<span class="op">-</span><span class="kw">Infinity</span>)<span class="op">;</span> <span class="co">// false</span></a>
<a class="sourceLine" id="cb12-3" title="3"><span class="at">isFinite</span>(<span class="kw">NaN</span>)<span class="op">;</span> <span class="co">// false</span></a></code></pre></div>
<div class="note">
The <a href="Reference/Global_Objects/parseInt.html"><code>parseInt()</code></a> and <a href="Reference/Global_Objects/parseFloat.html"><code>parseFloat()</code></a> functions parse a string until they reach a character that isn't valid for the specified number format, then return the number parsed up to that point. However the "+" operator simply converts the string to <code>NaN</code> if there is an invalid character contained within it. Just try parsing the string "10.2abc" with each method by yourself in the console and you'll understand the differences better.
</div>
<h2 id="Strings">Strings</h2>
<p>Strings in JavaScript are sequences of <a href="Guide/Grammar_and_types-2.html#Unicode">Unicode characters</a>. This should be welcome news to anyone who has had to deal with internationalization. More accurately, they are sequences of UTF-16 code units; each code unit is represented by a 16-bit number. Each Unicode character is represented by either 1 or 2 code units.</p>
<p>If you want to represent a single character, you just use a string consisting of that single character.</p>
<p>To find the length of a string (in code units), access its <code>length</code> property:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb13-1" title="1"><span class="st">&#39;hello&#39;</span>.<span class="at">length</span><span class="op">;</span> <span class="co">// 5</span></a></code></pre></div>
<p>There's our first brush with JavaScript objects! Did we mention that you can use strings like <a href="Reference/Global_Objects/Object.html">objects</a> too? They have <a href="Reference/Global_Objects/String.html#Methods">methods</a> as well that allow you to manipulate the string and access information about the string:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb14-1" title="1"><span class="st">&#39;hello&#39;</span>.<span class="at">charAt</span>(<span class="dv">0</span>)<span class="op">;</span> <span class="co">// &quot;h&quot;</span></a>
<a class="sourceLine" id="cb14-2" title="2"><span class="st">&#39;hello, world&#39;</span>.<span class="at">replace</span>(<span class="st">&#39;world&#39;</span><span class="op">,</span> <span class="st">&#39;mars&#39;</span>)<span class="op">;</span> <span class="co">// &quot;hello, mars&quot;</span></a>
<a class="sourceLine" id="cb14-3" title="3"><span class="st">&#39;hello&#39;</span>.<span class="at">toUpperCase</span>()<span class="op">;</span> <span class="co">// &quot;HELLO&quot;</span></a></code></pre></div>
<h2 id="Other_types">Other types</h2>
<p>JavaScript distinguishes between <a href="Reference/Global_Objects/null.html"><code>null</code></a>, which is a value that indicates a deliberate non-value (and is only accessible through the <code>null</code> keyword), and <a href="Reference/Global_Objects/undefined.html"><code>undefined</code></a>, which is a value of type <code>undefined</code> that indicates an uninitialized variable — that is, a value hasn't even been assigned yet. We'll talk about variables later, but in JavaScript it is possible to declare a variable without assigning a value to it. If you do this, the variable's type is <code>undefined</code>. <code>undefined</code> is actually a constant.</p>
<p>JavaScript has a boolean type, with possible values <code>true</code> and <code>false</code> (both of which are keywords.) Any value can be converted to a boolean according to the following rules:</p>
<ol>
<li><code>false</code>, <code>0</code>, empty strings (<code>""</code>), <code>NaN</code>, <code>null</code>, and <code>undefined</code> all become <code>false.</code></li>
<li>All other values become <code>true.</code></li>
</ol>
<p>You can perform this conversion explicitly using the <code>Boolean()</code> function:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb15-1" title="1"><span class="at">Boolean</span>(<span class="st">&#39;&#39;</span>)<span class="op">;</span>  <span class="co">// false</span></a>
<a class="sourceLine" id="cb15-2" title="2"><span class="at">Boolean</span>(<span class="dv">234</span>)<span class="op">;</span> <span class="co">// true</span></a></code></pre></div>
<p>However, this is rarely necessary, as JavaScript will silently perform this conversion when it expects a boolean, such as in an <code>if</code> statement (see below). For this reason, we sometimes speak simply of "true values" and "false values," meaning values that become <code>true</code> and <code>false</code>, respectively, when converted to booleans. Alternatively, such values can be called "truthy" and "falsy", respectively.</p>
<p>Boolean operations such as <code>&amp;&amp;</code> (logical <em>and</em>), <code>||</code> (logical <em>or</em>), and <code>!</code> (logical <em>not</em>) are supported; see below.</p>
<h2 id="Variables">Variables</h2>
<p>New variables in JavaScript are declared using one of three keywords: <code>let</code>, <code>const</code>, or <code>var</code>.<br />
<br />
<strong><code>let</code></strong> allows you to declare block-level variables. The declared variable is available from the <em>block</em> it is enclosed in.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb16-1" title="1"><span class="kw">let</span> a<span class="op">;</span></a>
<a class="sourceLine" id="cb16-2" title="2"><span class="kw">let</span> name <span class="op">=</span> <span class="st">&#39;Simon&#39;</span><span class="op">;</span></a></code></pre></div>
<p>The following is an example of scope with a variable declared with <code>let</code>:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb17-1" title="1"><span class="co">// myLetVariable is *not* visible out here</span></a>
<a class="sourceLine" id="cb17-2" title="2"></a>
<a class="sourceLine" id="cb17-3" title="3"><span class="cf">for</span> (<span class="kw">let</span> myLetVariable <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> myLetVariable <span class="op">&lt;</span> <span class="dv">5</span><span class="op">;</span> myLetVariable<span class="op">++</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb17-4" title="4">  <span class="co">// myLetVariable is only visible in here</span></a>
<a class="sourceLine" id="cb17-5" title="5"><span class="op">}</span></a>
<a class="sourceLine" id="cb17-6" title="6"></a>
<a class="sourceLine" id="cb17-7" title="7"><span class="co">// myLetVariable is *not* visible out here</span></a></code></pre></div>
<p><code>const</code> allows you to declare variables whose values are never intended to change. The variable is available from the <em>block</em> it is declared in.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb18-1" title="1"><span class="kw">const</span> Pi <span class="op">=</span> <span class="fl">3.14</span><span class="op">;</span> <span class="co">// variable Pi is set </span></a>
<a class="sourceLine" id="cb18-2" title="2">Pi <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> <span class="co">// will throw an error because you cannot change a constant variable.</span></a></code></pre></div>
<p><br />
<code>var</code> is the most common declarative keyword. It does not have the restrictions that the other two keywords have. This is because it was traditionally the only way to declare a variable in JavaScript. A variable declared with the <strong><code>var</code></strong> keyword is available from the <em>function</em> it is declared in.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb19-1" title="1"><span class="kw">var</span> a<span class="op">;</span> </a>
<a class="sourceLine" id="cb19-2" title="2"><span class="kw">var</span> name <span class="op">=</span> <span class="st">&#39;Simon&#39;</span><span class="op">;</span></a></code></pre></div>
<p>An example of scope with a variable declared with <strong><code>var</code>:</strong></p>
<div class="sourceCode" id="cb20"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb20-1" title="1"><span class="co">// myVarVariable *is* visible out here</span></a>
<a class="sourceLine" id="cb20-2" title="2"></a>
<a class="sourceLine" id="cb20-3" title="3"><span class="cf">for</span> (<span class="kw">var</span> myVarVariable <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> myVarVariable <span class="op">&lt;</span> <span class="dv">5</span><span class="op">;</span> myVarVariable<span class="op">++</span>) <span class="op">{</span> </a>
<a class="sourceLine" id="cb20-4" title="4">  <span class="co">// myVarVariable is visible to the whole function </span></a>
<a class="sourceLine" id="cb20-5" title="5"><span class="op">}</span> </a>
<a class="sourceLine" id="cb20-6" title="6"></a>
<a class="sourceLine" id="cb20-7" title="7"><span class="co">// myVarVariable *is* visible out here </span></a></code></pre></div>
<p>If you declare a variable without assigning any value to it, its type is <code>undefined</code>.</p>
<p>An important difference between JavaScript and other languages like Java is that in JavaScript, blocks do not have scope; only functions have a scope. So if a variable is defined using <code>var</code> in a compound statement (for example inside an <code>if</code> control structure), it will be visible to the entire function. However, starting with ECMAScript 2015, <code>let</code> and <code>const</code> declarations allow you to create block-scoped variables.</p>
<h2 id="Operators">Operators</h2>
<p>JavaScript's numeric operators are <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> and <code>%</code> which is the remainder operator (<a href="Reference/Operators.html#Remainder_%28%29">which is the same as modulo</a>.) Values are assigned using <code>=</code>, and there are also compound assignment statements such as <code>+=</code> and <code>-=</code>. These extend out to <code>x = x operator y</code>.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb21-1" title="1">x <span class="op">+=</span> <span class="dv">5</span><span class="op">;</span></a>
<a class="sourceLine" id="cb21-2" title="2">x <span class="op">=</span> x <span class="op">+</span> <span class="dv">5</span><span class="op">;</span></a></code></pre></div>
<p>You can use <code>++</code> and <code>--</code> to increment and decrement respectively. These can be used as a prefix or postfix operators.</p>
<p>The <a href="Reference/Operators.html#Addition" title="/en/JavaScript/Reference/Operators/String_Operators"><code>+</code> operator</a> also does string concatenation:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb22-1" title="1"><span class="st">&#39;hello&#39;</span> <span class="op">+</span> <span class="st">&#39; world&#39;</span><span class="op">;</span> <span class="co">// &quot;hello world&quot;</span></a></code></pre></div>
<p>If you add a string to a number (or other value) everything is converted into a string first. This might trip you up:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb23-1" title="1"><span class="st">&#39;3&#39;</span> <span class="op">+</span> <span class="dv">4</span> <span class="op">+</span> <span class="dv">5</span><span class="op">;</span>  <span class="co">// &quot;345&quot;</span></a>
<a class="sourceLine" id="cb23-2" title="2"> <span class="dv">3</span> <span class="op">+</span> <span class="dv">4</span> <span class="op">+</span> <span class="st">&#39;5&#39;</span><span class="op">;</span> <span class="co">// &quot;75&quot;</span></a></code></pre></div>
<p>Adding an empty string to something is a useful way of converting it to a string itself.</p>
<p><a href="Reference/Operators.html" title="/en/JavaScript/Reference/Operators/Comparison_Operators">Comparisons</a> in JavaScript can be made using <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code> and <code>&gt;=</code>. These work for both strings and numbers. Equality is a little less straightforward. The double-equals operator performs type coercion if you give it different types, with sometimes interesting results:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb24-1" title="1"><span class="dv">123</span> <span class="op">==</span> <span class="st">&#39;123&#39;</span><span class="op">;</span> <span class="co">// true</span></a>
<a class="sourceLine" id="cb24-2" title="2"><span class="dv">1</span> <span class="op">==</span> <span class="kw">true</span><span class="op">;</span> <span class="co">// true</span></a></code></pre></div>
<p>To avoid type coercion, use the triple-equals operator:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb25-1" title="1"><span class="dv">123</span> <span class="op">===</span> <span class="st">&#39;123&#39;</span><span class="op">;</span> <span class="co">// false</span></a>
<a class="sourceLine" id="cb25-2" title="2"><span class="dv">1</span> <span class="op">===</span> <span class="kw">true</span><span class="op">;</span>    <span class="co">// false</span></a></code></pre></div>
<p>There are also <code>!=</code> and <code>!==</code> operators.</p>
<p>JavaScript also has <a href="Reference/Operators.html" title="/en/JavaScript/Reference/Operators/Bitwise_Operators">bitwise operations</a>. If you want to use them, they're there.</p>
<h2 id="Control_structures">Control structures</h2>
<p>JavaScript has a similar set of control structures to other languages in the C family. Conditional statements are supported by <code>if</code> and <code>else</code>; you can chain them together if you like:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb26-1" title="1"><span class="kw">var</span> name <span class="op">=</span> <span class="st">&#39;kittens&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb26-2" title="2"><span class="cf">if</span> (name <span class="op">==</span> <span class="st">&#39;puppies&#39;</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb26-3" title="3">  name <span class="op">+=</span> <span class="st">&#39; woof&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb26-4" title="4"><span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> (name <span class="op">==</span> <span class="st">&#39;kittens&#39;</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb26-5" title="5">  name <span class="op">+=</span> <span class="st">&#39; meow&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb26-6" title="6"><span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb26-7" title="7">  name <span class="op">+=</span> <span class="st">&#39;!&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb26-8" title="8"><span class="op">}</span></a>
<a class="sourceLine" id="cb26-9" title="9">name <span class="op">==</span> <span class="st">&#39;kittens meow&#39;</span><span class="op">;</span></a></code></pre></div>
<p>JavaScript has <code>while</code> loops and <code>do-while</code> loops. The first is good for basic looping; the second for loops where you wish to ensure that the body of the loop is executed at least once:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb27-1" title="1"><span class="cf">while</span> (<span class="kw">true</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb27-2" title="2">  <span class="co">// an infinite loop!</span></a>
<a class="sourceLine" id="cb27-3" title="3"><span class="op">}</span></a>
<a class="sourceLine" id="cb27-4" title="4"></a>
<a class="sourceLine" id="cb27-5" title="5"><span class="kw">var</span> input<span class="op">;</span></a>
<a class="sourceLine" id="cb27-6" title="6"><span class="cf">do</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb27-7" title="7">  input <span class="op">=</span> <span class="at">get_input</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb27-8" title="8"><span class="op">}</span> <span class="cf">while</span> (<span class="at">inputIsNotValid</span>(input))<span class="op">;</span></a></code></pre></div>
<p>JavaScript's <a href="Reference/Statements/for.html"><code>for</code> loop</a> is the same as that in C and Java: it lets you provide the control information for your loop on a single line.</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb28-1" title="1"><span class="cf">for</span> (<span class="kw">var</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">5</span><span class="op">;</span> i<span class="op">++</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb28-2" title="2">  <span class="co">// Will execute 5 times</span></a>
<a class="sourceLine" id="cb28-3" title="3"><span class="op">}</span></a></code></pre></div>
<p>JavaScript also contains two other prominent for loops: <a href="Reference/Statements/for..-2.html"><code>for</code>...<code>of</code></a></p>
<div class="sourceCode" id="cb29"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb29-1" title="1"><span class="cf">for</span> (<span class="kw">let</span> value <span class="kw">of</span> array) <span class="op">{</span></a>
<a class="sourceLine" id="cb29-2" title="2">  <span class="co">// do something with value</span></a>
<a class="sourceLine" id="cb29-3" title="3"><span class="op">}</span></a></code></pre></div>
<p>and <a href="Reference/Statements/for...html"><code>for</code>...<code>in</code></a>:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb30-1" title="1"><span class="cf">for</span> (<span class="kw">let</span> property <span class="kw">in</span> object) <span class="op">{</span></a>
<a class="sourceLine" id="cb30-2" title="2">  <span class="co">// do something with object property</span></a>
<a class="sourceLine" id="cb30-3" title="3"><span class="op">}</span></a></code></pre></div>
<p>The <code>&amp;&amp;</code> and <code>||</code> operators use short-circuit logic, which means whether they will execute their second operand is dependent on the first. This is useful for checking for null objects before accessing their attributes:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb31-1" title="1"><span class="kw">var</span> name <span class="op">=</span> o <span class="op">&amp;&amp;</span> <span class="va">o</span>.<span class="at">getName</span>()<span class="op">;</span></a></code></pre></div>
<p>Or for caching values (when falsy values are invalid):</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb32-1" title="1"><span class="kw">var</span> name <span class="op">=</span> cachedName <span class="op">||</span> (cachedName <span class="op">=</span> <span class="at">getName</span>())<span class="op">;</span></a></code></pre></div>
<p>JavaScript has a ternary operator for conditional expressions:</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb33-1" title="1"><span class="kw">var</span> allowed <span class="op">=</span> (age <span class="op">&gt;</span> <span class="dv">18</span>) <span class="op">?</span> <span class="st">&#39;yes&#39;</span> : <span class="st">&#39;no&#39;</span><span class="op">;</span></a></code></pre></div>
<p>The <code>switch</code> statement can be used for multiple branches based on a number or string:</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb34-1" title="1"><span class="cf">switch</span> (action) <span class="op">{</span></a>
<a class="sourceLine" id="cb34-2" title="2">  <span class="cf">case</span> <span class="st">&#39;draw&#39;</span><span class="op">:</span></a>
<a class="sourceLine" id="cb34-3" title="3">    <span class="at">drawIt</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb34-4" title="4">    <span class="cf">break</span><span class="op">;</span></a>
<a class="sourceLine" id="cb34-5" title="5">  <span class="cf">case</span> <span class="st">&#39;eat&#39;</span><span class="op">:</span></a>
<a class="sourceLine" id="cb34-6" title="6">    <span class="at">eatIt</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb34-7" title="7">    <span class="cf">break</span><span class="op">;</span></a>
<a class="sourceLine" id="cb34-8" title="8">  <span class="cf">default</span><span class="op">:</span></a>
<a class="sourceLine" id="cb34-9" title="9">    <span class="at">doNothing</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb34-10" title="10"><span class="op">}</span></a></code></pre></div>
<p>If you don't add a <code>break</code> statement, execution will "fall through" to the next level. This is very rarely what you want — in fact it's worth specifically labeling deliberate fallthrough with a comment if you really meant it to aid debugging:</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb35-1" title="1"><span class="cf">switch</span> (a) <span class="op">{</span></a>
<a class="sourceLine" id="cb35-2" title="2">  <span class="cf">case</span> <span class="dv">1</span><span class="op">:</span> <span class="co">// fallthrough</span></a>
<a class="sourceLine" id="cb35-3" title="3">  <span class="cf">case</span> <span class="dv">2</span><span class="op">:</span></a>
<a class="sourceLine" id="cb35-4" title="4">    <span class="at">eatIt</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb35-5" title="5">    <span class="cf">break</span><span class="op">;</span></a>
<a class="sourceLine" id="cb35-6" title="6">  <span class="cf">default</span><span class="op">:</span></a>
<a class="sourceLine" id="cb35-7" title="7">    <span class="at">doNothing</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb35-8" title="8"><span class="op">}</span></a></code></pre></div>
<p>The default clause is optional. You can have expressions in both the switch part and the cases if you like; comparisons take place between the two using the <code>===</code> operator:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb36-1" title="1"><span class="cf">switch</span> (<span class="dv">1</span> <span class="op">+</span> <span class="dv">3</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb36-2" title="2">  <span class="cf">case</span> <span class="dv">2</span> <span class="op">+</span> <span class="dv">2</span><span class="op">:</span></a>
<a class="sourceLine" id="cb36-3" title="3">    <span class="at">yay</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb36-4" title="4">    <span class="cf">break</span><span class="op">;</span></a>
<a class="sourceLine" id="cb36-5" title="5">  <span class="cf">default</span><span class="op">:</span></a>
<a class="sourceLine" id="cb36-6" title="6">    <span class="at">neverhappens</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb36-7" title="7"><span class="op">}</span></a></code></pre></div>
<h2 id="Objects">Objects</h2>
<p>JavaScript objects can be thought of as simple collections of name-value pairs. As such, they are similar to:</p>
<ul>
<li>Dictionaries in Python.</li>
<li>Hashes in Perl and Ruby.</li>
<li>Hash tables in C and C++.</li>
<li>HashMaps in Java.</li>
<li>Associative arrays in PHP.</li>
</ul>
<p>The fact that this data structure is so widely used is a testament to its versatility. Since everything (bar core types) in JavaScript is an object, any JavaScript program naturally involves a great deal of hash table lookups. It's a good thing they're so fast!</p>
<p>The "name" part is a JavaScript string, while the value can be any JavaScript value — including more objects. This allows you to build data structures of arbitrary complexity.</p>
<p>There are two basic ways to create an empty object:</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb37-1" title="1"><span class="kw">var</span> obj <span class="op">=</span> <span class="kw">new</span> <span class="at">Object</span>()<span class="op">;</span></a></code></pre></div>
<p>And:</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb38-1" title="1"><span class="kw">var</span> obj <span class="op">=</span> <span class="op">{};</span></a></code></pre></div>
<p>These are semantically equivalent; the second is called object literal syntax and is more convenient. This syntax is also the core of JSON format and should be preferred at all times.</p>
<p>Object literal syntax can be used to initialize an object in its entirety:</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb39-1" title="1"><span class="kw">var</span> obj <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb39-2" title="2">  <span class="dt">name</span><span class="op">:</span> <span class="st">&#39;Carrot&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb39-3" title="3">  <span class="dt">for</span><span class="op">:</span> <span class="st">&#39;Max&#39;</span><span class="op">,</span> <span class="co">// &#39;for&#39; is a reserved word, use &#39;_for&#39; instead.</span></a>
<a class="sourceLine" id="cb39-4" title="4">  <span class="dt">details</span><span class="op">:</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb39-5" title="5">    <span class="dt">color</span><span class="op">:</span> <span class="st">&#39;orange&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb39-6" title="6">    <span class="dt">size</span><span class="op">:</span> <span class="dv">12</span></a>
<a class="sourceLine" id="cb39-7" title="7">  <span class="op">}</span></a>
<a class="sourceLine" id="cb39-8" title="8"><span class="op">};</span></a></code></pre></div>
<p>Attribute access can be chained together:</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb40-1" title="1"><span class="va">obj</span>.<span class="va">details</span>.<span class="at">color</span><span class="op">;</span> <span class="co">// orange</span></a>
<a class="sourceLine" id="cb40-2" title="2">obj[<span class="st">&#39;details&#39;</span>][<span class="st">&#39;size&#39;</span>]<span class="op">;</span> <span class="co">// 12</span></a></code></pre></div>
<p>The following example creates an object prototype(<code>Person</code>) and an instance of that prototype(<code>you</code>).</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb41-1" title="1"><span class="kw">function</span> <span class="at">Person</span>(name<span class="op">,</span> age) <span class="op">{</span></a>
<a class="sourceLine" id="cb41-2" title="2">  <span class="kw">this</span>.<span class="at">name</span> <span class="op">=</span> name<span class="op">;</span></a>
<a class="sourceLine" id="cb41-3" title="3">  <span class="kw">this</span>.<span class="at">age</span> <span class="op">=</span> age<span class="op">;</span></a>
<a class="sourceLine" id="cb41-4" title="4"><span class="op">}</span></a>
<a class="sourceLine" id="cb41-5" title="5"></a>
<a class="sourceLine" id="cb41-6" title="6"><span class="co">// Define an object</span></a>
<a class="sourceLine" id="cb41-7" title="7"><span class="kw">var</span> you <span class="op">=</span> <span class="kw">new</span> <span class="at">Person</span>(<span class="st">&#39;You&#39;</span><span class="op">,</span> <span class="dv">24</span>)<span class="op">;</span> </a>
<a class="sourceLine" id="cb41-8" title="8"><span class="co">// We are creating a new person named &quot;You&quot; aged 24.</span></a></code></pre></div>
<p><strong>Once created</strong>, an object's properties can again be accessed in one of two ways:</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb42-1" title="1"><span class="co">// dot notation</span></a>
<a class="sourceLine" id="cb42-2" title="2"><span class="va">obj</span>.<span class="at">name</span> <span class="op">=</span> <span class="st">&#39;Simon&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb42-3" title="3"><span class="kw">var</span> name <span class="op">=</span> <span class="va">obj</span>.<span class="at">name</span><span class="op">;</span></a></code></pre></div>
<p>And...</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb43-1" title="1"><span class="co">// bracket notation</span></a>
<a class="sourceLine" id="cb43-2" title="2">obj[<span class="st">&#39;name&#39;</span>] <span class="op">=</span> <span class="st">&#39;Simon&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb43-3" title="3"><span class="kw">var</span> name <span class="op">=</span> obj[<span class="st">&#39;name&#39;</span>]<span class="op">;</span></a>
<a class="sourceLine" id="cb43-4" title="4"><span class="co">// can use a variable to define a key</span></a>
<a class="sourceLine" id="cb43-5" title="5"><span class="kw">var</span> user <span class="op">=</span> <span class="at">prompt</span>(<span class="st">&#39;what is your key?&#39;</span>)</a>
<a class="sourceLine" id="cb43-6" title="6">obj[user] <span class="op">=</span> <span class="at">prompt</span>(<span class="st">&#39;what is its value?&#39;</span>)</a></code></pre></div>
<p>These are also semantically equivalent. The second method has the advantage that the name of the property is provided as a string, which means it can be calculated at run-time. However, using this method prevents some JavaScript engine and minifier optimizations being applied. It can also be used to set and get properties with names that are <a href="Reference/Lexical_grammar.html#Keywords" title="/en/JavaScript/Reference/Reserved_Words">reserved words</a>:</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb44-1" title="1"><span class="va">obj</span>.<span class="at">for</span> <span class="op">=</span> <span class="st">&#39;Simon&#39;</span><span class="op">;</span> <span class="co">// Syntax error, because &#39;for&#39; is a reserved word</span></a>
<a class="sourceLine" id="cb44-2" title="2">obj[<span class="st">&#39;for&#39;</span>] <span class="op">=</span> <span class="st">&#39;Simon&#39;</span><span class="op">;</span> <span class="co">// works fine</span></a></code></pre></div>
<div class="note">
<p>Starting in ECMAScript 5, reserved words may be used as object property names "in the buff". This means that they don't need to be "clothed" in quotes when defining object literals. See the ES5 <a href="../../../../../external.html?link=http://es5.github.io/#x7.6.1" class="external">Spec</a>.</p>
</div>
<p>For more on objects and prototypes see <a href="Reference/Global_Objects/Object.html">Object.prototype</a>. For an explanation of object prototypes and the object prototype chains see <a href="Inheritance_and_the_prototype_chain.html">Inheritance and the prototype chain</a>.</p>
<div class="note">
<p>Starting in ECMAScript 2015, object keys can be defined by the variable using bracket notation upon being created. <code>{[phoneType]: 12345}</code> is possible instead of just <code>var userPhone = {}; userPhone[phoneType] = 12345</code>.</p>
</div>
<h2 id="Arrays">Arrays</h2>
<p>Arrays in JavaScript are actually a special type of object. They work very much like regular objects (numerical properties can naturally be accessed only using <code>[]</code> syntax) but they have one magic property called '<code>length</code>'. This is always one more than the highest index in the array.</p>
<p>One way of creating arrays is as follows:</p>
<div class="sourceCode" id="cb45"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb45-1" title="1"><span class="kw">var</span> a <span class="op">=</span> <span class="kw">new</span> <span class="at">Array</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb45-2" title="2">a[<span class="dv">0</span>] <span class="op">=</span> <span class="st">&#39;dog&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb45-3" title="3">a[<span class="dv">1</span>] <span class="op">=</span> <span class="st">&#39;cat&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb45-4" title="4">a[<span class="dv">2</span>] <span class="op">=</span> <span class="st">&#39;hen&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb45-5" title="5"><span class="va">a</span>.<span class="at">length</span><span class="op">;</span> <span class="co">// 3</span></a></code></pre></div>
<p>A more convenient notation is to use an array literal:</p>
<div class="sourceCode" id="cb46"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb46-1" title="1"><span class="kw">var</span> a <span class="op">=</span> [<span class="st">&#39;dog&#39;</span><span class="op">,</span> <span class="st">&#39;cat&#39;</span><span class="op">,</span> <span class="st">&#39;hen&#39;</span>]<span class="op">;</span></a>
<a class="sourceLine" id="cb46-2" title="2"><span class="va">a</span>.<span class="at">length</span><span class="op">;</span> <span class="co">// 3</span></a></code></pre></div>
<p>Note that <code>array.length</code> isn't necessarily the number of items in the array. Consider the following:</p>
<div class="sourceCode" id="cb47"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb47-1" title="1"><span class="kw">var</span> a <span class="op">=</span> [<span class="st">&#39;dog&#39;</span><span class="op">,</span> <span class="st">&#39;cat&#39;</span><span class="op">,</span> <span class="st">&#39;hen&#39;</span>]<span class="op">;</span></a>
<a class="sourceLine" id="cb47-2" title="2">a[<span class="dv">100</span>] <span class="op">=</span> <span class="st">&#39;fox&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb47-3" title="3"><span class="va">a</span>.<span class="at">length</span><span class="op">;</span> <span class="co">// 101</span></a></code></pre></div>
<p>Remember — the length of the array is one more than the highest index.</p>
<p>If you query a non-existent array index, you'll get a value of <code>undefined</code> in return:</p>
<div class="sourceCode" id="cb48"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb48-1" title="1"><span class="kw">typeof</span> a[<span class="dv">90</span>]<span class="op">;</span> <span class="co">// undefined</span></a></code></pre></div>
<p>If you take the above about <code>[]</code> and <code>length</code> into account, you can iterate over an array using the following <code>for</code> loop:</p>
<div class="sourceCode" id="cb49"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb49-1" title="1"><span class="cf">for</span> (<span class="kw">var</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="va">a</span>.<span class="at">length</span><span class="op">;</span> i<span class="op">++</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb49-2" title="2">  <span class="co">// Do something with a[i]</span></a>
<a class="sourceLine" id="cb49-3" title="3"><span class="op">}</span></a></code></pre></div>
<p>ES2015 introduced the more concise <a href="Reference/Statements/for..-2.html"><code>for</code>...<code>of</code></a> loop for iterable objects such as arrays:</p>
<pre class="brush:js"><code>for (const currentValue of a) {
  // Do something with currentValue
}</code></pre>
<p>You could also iterate over an array using a <a href="Reference/Statements/for...html" title="/en/JavaScript/Reference/Statements/for...in"><code>for</code>...<code>in</code></a> loop, however this does not iterate over the array elements, but the array indices. Furthermore, if someone added new properties to <code>Array.prototype</code>, they would also be iterated over by such a loop. Therefore this loop type is not recommended for arrays.</p>
<p>Another way of iterating over an array that was added with ECMAScript 5 is <code>forEach()</code>:</p>
<div class="sourceCode" id="cb51"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb51-1" title="1">[<span class="st">&#39;dog&#39;</span><span class="op">,</span> <span class="st">&#39;cat&#39;</span><span class="op">,</span> <span class="st">&#39;hen&#39;</span>].<span class="at">forEach</span>(<span class="kw">function</span>(currentValue<span class="op">,</span> index<span class="op">,</span> array) <span class="op">{</span></a>
<a class="sourceLine" id="cb51-2" title="2">  <span class="co">// Do something with currentValue or array[index]</span></a>
<a class="sourceLine" id="cb51-3" title="3"><span class="op">}</span>)<span class="op">;</span></a></code></pre></div>
<p>If you want to append an item to an array simply do it like this:</p>
<div class="sourceCode" id="cb52"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb52-1" title="1"><span class="va">a</span>.<span class="at">push</span>(item)<span class="op">;</span></a></code></pre></div>
<p>Arrays come with a number of methods. See also the <a href="Reference/Global_Objects/Array.html">full documentation for array methods</a>.</p>
<table>
<thead>
<tr class="header">
<th>Method name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>a.toString()</code></td>
<td>Returns a string with the <code>toString()</code> of each element separated by commas.</td>
</tr>
<tr class="even">
<td><code>a.toLocaleString()</code></td>
<td>Returns a string with the <code>toLocaleString()</code> of each element separated by commas.</td>
</tr>
<tr class="odd">
<td><code>a.concat(item1[, item2[, ...[, itemN]]])</code></td>
<td>Returns a new array with the items added on to it.</td>
</tr>
<tr class="even">
<td><code>a.join(sep)</code></td>
<td>Converts the array to a string — with values delimited by the <code>sep</code> param</td>
</tr>
<tr class="odd">
<td><code>a.pop()</code></td>
<td>Removes and returns the last item.</td>
</tr>
<tr class="even">
<td><code>a.push(item1, ..., itemN)</code></td>
<td>Appends items to the end of the array.</td>
</tr>
<tr class="odd">
<td><code>a.shift()</code></td>
<td>Removes and returns the first item.</td>
</tr>
<tr class="even">
<td><code>a.unshift(item1[, item2[, ...[, itemN]]])</code></td>
<td>Prepends items to the start of the array.</td>
</tr>
<tr class="odd">
<td><code>a.slice(start[, end])</code></td>
<td>Returns a sub-array.</td>
</tr>
<tr class="even">
<td><code>a.sort([cmpfn])</code></td>
<td>Takes an optional comparison function.</td>
</tr>
<tr class="odd">
<td><code>a.splice(start, delcount[, item1[, ...[, itemN]]])</code></td>
<td>Lets you modify an array by deleting a section and replacing it with more items.</td>
</tr>
<tr class="even">
<td><code>a.reverse()</code></td>
<td>Reverses the array.</td>
</tr>
</tbody>
</table>
<h2 id="Functions">Functions</h2>
<p>Along with objects, functions are the core component in understanding JavaScript. The most basic function couldn't be much simpler:</p>
<div class="sourceCode" id="cb53"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb53-1" title="1"><span class="kw">function</span> <span class="at">add</span>(x<span class="op">,</span> y) <span class="op">{</span></a>
<a class="sourceLine" id="cb53-2" title="2">  <span class="kw">var</span> total <span class="op">=</span> x <span class="op">+</span> y<span class="op">;</span></a>
<a class="sourceLine" id="cb53-3" title="3">  <span class="cf">return</span> total<span class="op">;</span></a>
<a class="sourceLine" id="cb53-4" title="4"><span class="op">}</span></a></code></pre></div>
<p>This demonstrates a basic function. A JavaScript function can take 0 or more named parameters. The function body can contain as many statements as you like and can declare its own variables which are local to that function. The <code>return</code> statement can be used to return a value at any time, terminating the function. If no return statement is used (or an empty return with no value), JavaScript returns <code>undefined</code>.</p>
<p>The named parameters turn out to be more like guidelines than anything else. You can call a function without passing the parameters it expects, in which case they will be set to <code>undefined</code>.</p>
<div class="sourceCode" id="cb54"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb54-1" title="1"><span class="at">add</span>()<span class="op">;</span> <span class="co">// NaN</span></a>
<a class="sourceLine" id="cb54-2" title="2"><span class="co">// You can&#39;t perform addition on undefined</span></a></code></pre></div>
<p>You can also pass in more arguments than the function is expecting:</p>
<div class="sourceCode" id="cb55"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb55-1" title="1"><span class="at">add</span>(<span class="dv">2</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">4</span>)<span class="op">;</span> <span class="co">// 5</span></a>
<a class="sourceLine" id="cb55-2" title="2"><span class="co">// added the first two; 4 was ignored</span></a></code></pre></div>
<p>That may seem a little silly, but functions have access to an additional variable inside their body called <a href="Reference/Functions/arguments.html" title="/en/JavaScript/Reference/Functions_and_function_scope/arguments"><code>arguments</code></a>, which is an array-like object holding all of the values passed to the function. Let's re-write the add function to take as many values as we want:</p>
<div class="sourceCode" id="cb56"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb56-1" title="1"><span class="kw">function</span> <span class="at">add</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb56-2" title="2">  <span class="kw">var</span> sum <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></a>
<a class="sourceLine" id="cb56-3" title="3">  <span class="cf">for</span> (<span class="kw">var</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">,</span> j <span class="op">=</span> <span class="kw">arguments</span>.<span class="at">length</span><span class="op">;</span> i <span class="op">&lt;</span> j<span class="op">;</span> i<span class="op">++</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb56-4" title="4">    sum <span class="op">+=</span> <span class="kw">arguments</span>[i]<span class="op">;</span></a>
<a class="sourceLine" id="cb56-5" title="5">  <span class="op">}</span></a>
<a class="sourceLine" id="cb56-6" title="6">  <span class="cf">return</span> sum<span class="op">;</span></a>
<a class="sourceLine" id="cb56-7" title="7"><span class="op">}</span></a>
<a class="sourceLine" id="cb56-8" title="8"></a>
<a class="sourceLine" id="cb56-9" title="9"><span class="at">add</span>(<span class="dv">2</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">4</span><span class="op">,</span> <span class="dv">5</span>)<span class="op">;</span> <span class="co">// 14</span></a></code></pre></div>
<p>That's really not any more useful than writing <code>2 + 3 + 4 + 5</code> though. Let's create an averaging function:</p>
<div class="sourceCode" id="cb57"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb57-1" title="1"><span class="kw">function</span> <span class="at">avg</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb57-2" title="2">  <span class="kw">var</span> sum <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></a>
<a class="sourceLine" id="cb57-3" title="3">  <span class="cf">for</span> (<span class="kw">var</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">,</span> j <span class="op">=</span> <span class="kw">arguments</span>.<span class="at">length</span><span class="op">;</span> i <span class="op">&lt;</span> j<span class="op">;</span> i<span class="op">++</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb57-4" title="4">    sum <span class="op">+=</span> <span class="kw">arguments</span>[i]<span class="op">;</span></a>
<a class="sourceLine" id="cb57-5" title="5">  <span class="op">}</span></a>
<a class="sourceLine" id="cb57-6" title="6">  <span class="cf">return</span> sum / <span class="kw">arguments</span>.<span class="at">length</span><span class="op">;</span></a>
<a class="sourceLine" id="cb57-7" title="7"><span class="op">}</span></a>
<a class="sourceLine" id="cb57-8" title="8"></a>
<a class="sourceLine" id="cb57-9" title="9"><span class="at">avg</span>(<span class="dv">2</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">4</span><span class="op">,</span> <span class="dv">5</span>)<span class="op">;</span> <span class="co">// 3.5</span></a></code></pre></div>
<p>This is pretty useful, but it does seem a little verbose. To reduce this code a bit more we can look at substituting the use of the arguments array through <a href="Reference/Functions/rest_parameters.html">Rest parameter syntax</a>. In this way, we can pass in any number of arguments into the function while keeping our code minimal. The <strong>rest parameter operator</strong> is used in function parameter lists with the format: <strong>...variable</strong> and it will include within that variable the entire list of uncaptured arguments that the function was called with. We will also replace the <strong>for</strong> loop with a <strong>for...of</strong> loop to return the values within our variable.</p>
<div class="sourceCode" id="cb58"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb58-1" title="1"><span class="kw">function</span> <span class="at">avg</span>(...<span class="at">args</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb58-2" title="2">  <span class="kw">var</span> sum <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></a>
<a class="sourceLine" id="cb58-3" title="3">  <span class="cf">for</span> (<span class="kw">let</span> value <span class="kw">of</span> args) <span class="op">{</span></a>
<a class="sourceLine" id="cb58-4" title="4">    sum <span class="op">+=</span> value<span class="op">;</span></a>
<a class="sourceLine" id="cb58-5" title="5">  <span class="op">}</span></a>
<a class="sourceLine" id="cb58-6" title="6">  <span class="cf">return</span> sum / <span class="va">args</span>.<span class="at">length</span><span class="op">;</span></a>
<a class="sourceLine" id="cb58-7" title="7"><span class="op">}</span></a>
<a class="sourceLine" id="cb58-8" title="8"></a>
<a class="sourceLine" id="cb58-9" title="9"><span class="at">avg</span>(<span class="dv">2</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">4</span><span class="op">,</span> <span class="dv">5</span>)<span class="op">;</span> <span class="co">// 3.5</span></a></code></pre></div>
<div class="note">
In the above code, the variable <strong>args</strong> holds all the values that were passed into the function.<br />
<br />
It is important to note that wherever the rest parameter operator is placed in a function declaration it will store all arguments <em>after</em> its declaration, but not before. <em>i.e. function</em> <em>avg(</em><strong>firstValue,</strong> <em>...args)</em><strong> </strong>will store the first value passed into the function in the <strong>firstValue</strong> variable and the remaining arguments in <strong>args</strong>. That's another useful language feature but it does lead us to a new problem. The <code>avg()</code> function takes a comma-separated list of arguments — but what if you want to find the average of an array? You could just rewrite the function as follows:
</div>
<div class="sourceCode" id="cb59"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb59-1" title="1"><span class="kw">function</span> <span class="at">avgArray</span>(arr) <span class="op">{</span></a>
<a class="sourceLine" id="cb59-2" title="2">  <span class="kw">var</span> sum <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></a>
<a class="sourceLine" id="cb59-3" title="3">  <span class="cf">for</span> (<span class="kw">var</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">,</span> j <span class="op">=</span> <span class="va">arr</span>.<span class="at">length</span><span class="op">;</span> i <span class="op">&lt;</span> j<span class="op">;</span> i<span class="op">++</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb59-4" title="4">    sum <span class="op">+=</span> arr[i]<span class="op">;</span></a>
<a class="sourceLine" id="cb59-5" title="5">  <span class="op">}</span></a>
<a class="sourceLine" id="cb59-6" title="6">  <span class="cf">return</span> sum / <span class="va">arr</span>.<span class="at">length</span><span class="op">;</span></a>
<a class="sourceLine" id="cb59-7" title="7"><span class="op">}</span></a>
<a class="sourceLine" id="cb59-8" title="8"></a>
<a class="sourceLine" id="cb59-9" title="9"><span class="at">avgArray</span>([<span class="dv">2</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">4</span><span class="op">,</span> <span class="dv">5</span>])<span class="op">;</span> <span class="co">// 3.5</span></a></code></pre></div>
<p>But it would be nice to be able to reuse the function that we've already created. Luckily, JavaScript lets you call a function with an arbitrary array of arguments, using the <a href="Reference/Global_Objects/Function/apply.html"><code>apply()</code></a> method of any function object.</p>
<div class="sourceCode" id="cb60"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb60-1" title="1"><span class="va">avg</span>.<span class="at">apply</span>(<span class="kw">null</span><span class="op">,</span> [<span class="dv">2</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">4</span><span class="op">,</span> <span class="dv">5</span>])<span class="op">;</span> <span class="co">// 3.5</span></a></code></pre></div>
<p>The second argument to <code>apply()</code> is the array to use as arguments; the first will be discussed later on. This emphasizes the fact that functions are objects too.</p>
<div class="note">
<p>You can achieve the same result using the <a href="../../../../../external.html?link=https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/Spread_syntax">spread operator</a> in the function call.</p>
<p>For instance: <code>avg(...numbers)</code></p>
</div>
<p>JavaScript lets you create anonymous functions.</p>
<div class="sourceCode" id="cb61"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb61-1" title="1"><span class="kw">var</span> avg <span class="op">=</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb61-2" title="2">  <span class="kw">var</span> sum <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></a>
<a class="sourceLine" id="cb61-3" title="3">  <span class="cf">for</span> (<span class="kw">var</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">,</span> j <span class="op">=</span> <span class="kw">arguments</span>.<span class="at">length</span><span class="op">;</span> i <span class="op">&lt;</span> j<span class="op">;</span> i<span class="op">++</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb61-4" title="4">    sum <span class="op">+=</span> <span class="kw">arguments</span>[i]<span class="op">;</span></a>
<a class="sourceLine" id="cb61-5" title="5">  <span class="op">}</span></a>
<a class="sourceLine" id="cb61-6" title="6">  <span class="cf">return</span> sum / <span class="kw">arguments</span>.<span class="at">length</span><span class="op">;</span></a>
<a class="sourceLine" id="cb61-7" title="7"><span class="op">};</span></a></code></pre></div>
<p>This is semantically equivalent to the <code>function avg()</code> form. It's extremely powerful, as it lets you put a full function definition anywhere that you would normally put an expression. This enables all sorts of clever tricks. Here's a way of "hiding" some local variables — like block scope in C:</p>
<div class="sourceCode" id="cb62"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb62-1" title="1"><span class="kw">var</span> a <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></a>
<a class="sourceLine" id="cb62-2" title="2"><span class="kw">var</span> b <span class="op">=</span> <span class="dv">2</span><span class="op">;</span></a>
<a class="sourceLine" id="cb62-3" title="3"></a>
<a class="sourceLine" id="cb62-4" title="4">(<span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb62-5" title="5">  <span class="kw">var</span> b <span class="op">=</span> <span class="dv">3</span><span class="op">;</span></a>
<a class="sourceLine" id="cb62-6" title="6">  a <span class="op">+=</span> b<span class="op">;</span></a>
<a class="sourceLine" id="cb62-7" title="7"><span class="op">}</span>)()<span class="op">;</span></a>
<a class="sourceLine" id="cb62-8" title="8"></a>
<a class="sourceLine" id="cb62-9" title="9">a<span class="op">;</span> <span class="co">// 4</span></a>
<a class="sourceLine" id="cb62-10" title="10">b<span class="op">;</span> <span class="co">// 2</span></a></code></pre></div>
<p>JavaScript allows you to call functions recursively. This is particularly useful for dealing with tree structures, such as those found in the browser DOM.</p>
<div class="sourceCode" id="cb63"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb63-1" title="1"><span class="kw">function</span> <span class="at">countChars</span>(elm) <span class="op">{</span></a>
<a class="sourceLine" id="cb63-2" title="2">  <span class="cf">if</span> (<span class="va">elm</span>.<span class="at">nodeType</span> <span class="op">==</span> <span class="dv">3</span>) <span class="op">{</span> <span class="co">// TEXT_NODE</span></a>
<a class="sourceLine" id="cb63-3" title="3">    <span class="cf">return</span> <span class="va">elm</span>.<span class="va">nodeValue</span>.<span class="at">length</span><span class="op">;</span></a>
<a class="sourceLine" id="cb63-4" title="4">  <span class="op">}</span></a>
<a class="sourceLine" id="cb63-5" title="5">  <span class="kw">var</span> count <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></a>
<a class="sourceLine" id="cb63-6" title="6">  <span class="cf">for</span> (<span class="kw">var</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">,</span> child<span class="op">;</span> child <span class="op">=</span> <span class="va">elm</span>.<span class="at">childNodes</span>[i]<span class="op">;</span> i<span class="op">++</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb63-7" title="7">    count <span class="op">+=</span> <span class="at">countChars</span>(child)<span class="op">;</span></a>
<a class="sourceLine" id="cb63-8" title="8">  <span class="op">}</span></a>
<a class="sourceLine" id="cb63-9" title="9">  <span class="cf">return</span> count<span class="op">;</span></a>
<a class="sourceLine" id="cb63-10" title="10"><span class="op">}</span></a></code></pre></div>
<p>This highlights a potential problem with anonymous functions: how do you call them recursively if they don't have a name? JavaScript lets you name function expressions for this. You can use named <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/IIFE">IIFEs (Immediately Invoked Function Expressions)</a> as shown below:</p>
<div class="sourceCode" id="cb64"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb64-1" title="1"><span class="kw">var</span> charsInBody <span class="op">=</span> (<span class="kw">function</span> <span class="at">counter</span>(elm) <span class="op">{</span></a>
<a class="sourceLine" id="cb64-2" title="2">  <span class="cf">if</span> (<span class="va">elm</span>.<span class="at">nodeType</span> <span class="op">==</span> <span class="dv">3</span>) <span class="op">{</span> <span class="co">// TEXT_NODE</span></a>
<a class="sourceLine" id="cb64-3" title="3">    <span class="cf">return</span> <span class="va">elm</span>.<span class="va">nodeValue</span>.<span class="at">length</span><span class="op">;</span></a>
<a class="sourceLine" id="cb64-4" title="4">  <span class="op">}</span></a>
<a class="sourceLine" id="cb64-5" title="5">  <span class="kw">var</span> count <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></a>
<a class="sourceLine" id="cb64-6" title="6">  <span class="cf">for</span> (<span class="kw">var</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">,</span> child<span class="op">;</span> child <span class="op">=</span> <span class="va">elm</span>.<span class="at">childNodes</span>[i]<span class="op">;</span> i<span class="op">++</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb64-7" title="7">    count <span class="op">+=</span> <span class="at">counter</span>(child)<span class="op">;</span></a>
<a class="sourceLine" id="cb64-8" title="8">  <span class="op">}</span></a>
<a class="sourceLine" id="cb64-9" title="9">  <span class="cf">return</span> count<span class="op">;</span></a>
<a class="sourceLine" id="cb64-10" title="10"><span class="op">}</span>)(<span class="va">document</span>.<span class="at">body</span>)<span class="op">;</span></a></code></pre></div>
<p>The name provided to a function expression as above is only available to the function's own scope. This allows more optimizations to be done by the engine and results in more readable code. The name also shows up in the debugger and some stack traces, which can save you time when debugging.</p>
<p>Note that JavaScript functions are themselves objects — like everything else in JavaScript — and you can add or change properties on them just like we've seen earlier in the Objects section.</p>
<h2 id="Custom_objects">Custom objects</h2>
<div class="note">
For a more detailed discussion of object-oriented programming in JavaScript, see <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Introduction to Object-Oriented JavaScript</a>.
</div>
<p>In classic Object Oriented Programming, objects are collections of data and methods that operate on that data. JavaScript is a prototype-based language that contains no class statement, as you'd find in C++ or Java (this is sometimes confusing for programmers accustomed to languages with a class statement). Instead, JavaScript uses functions as classes. Let's consider a person object with first and last name fields. There are two ways in which the name might be displayed: as "first last" or as "last, first". Using the functions and objects that we've discussed previously, we could display the data like this:</p>
<div class="sourceCode" id="cb65"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb65-1" title="1"><span class="kw">function</span> <span class="at">makePerson</span>(first<span class="op">,</span> last) <span class="op">{</span></a>
<a class="sourceLine" id="cb65-2" title="2">  <span class="cf">return</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb65-3" title="3">    <span class="dt">first</span><span class="op">:</span> first<span class="op">,</span></a>
<a class="sourceLine" id="cb65-4" title="4">    <span class="dt">last</span><span class="op">:</span> last</a>
<a class="sourceLine" id="cb65-5" title="5">  <span class="op">};</span></a>
<a class="sourceLine" id="cb65-6" title="6"><span class="op">}</span></a>
<a class="sourceLine" id="cb65-7" title="7"><span class="kw">function</span> <span class="at">personFullName</span>(person) <span class="op">{</span></a>
<a class="sourceLine" id="cb65-8" title="8">  <span class="cf">return</span> <span class="va">person</span>.<span class="at">first</span> <span class="op">+</span> <span class="st">&#39; &#39;</span> <span class="op">+</span> <span class="va">person</span>.<span class="at">last</span><span class="op">;</span></a>
<a class="sourceLine" id="cb65-9" title="9"><span class="op">}</span></a>
<a class="sourceLine" id="cb65-10" title="10"><span class="kw">function</span> <span class="at">personFullNameReversed</span>(person) <span class="op">{</span></a>
<a class="sourceLine" id="cb65-11" title="11">  <span class="cf">return</span> <span class="va">person</span>.<span class="at">last</span> <span class="op">+</span> <span class="st">&#39;, &#39;</span> <span class="op">+</span> <span class="va">person</span>.<span class="at">first</span><span class="op">;</span></a>
<a class="sourceLine" id="cb65-12" title="12"><span class="op">}</span></a>
<a class="sourceLine" id="cb65-13" title="13"></a>
<a class="sourceLine" id="cb65-14" title="14"><span class="kw">var</span> s <span class="op">=</span> <span class="at">makePerson</span>(<span class="st">&#39;Simon&#39;</span><span class="op">,</span> <span class="st">&#39;Willison&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb65-15" title="15"><span class="at">personFullName</span>(s)<span class="op">;</span> <span class="co">// &quot;Simon Willison&quot;</span></a>
<a class="sourceLine" id="cb65-16" title="16"><span class="at">personFullNameReversed</span>(s)<span class="op">;</span> <span class="co">// &quot;Willison, Simon&quot;</span></a></code></pre></div>
<p>This works, but it's pretty ugly. You end up with dozens of functions in your global namespace. What we really need is a way to attach a function to an object. Since functions are objects, this is easy:</p>
<div class="sourceCode" id="cb66"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb66-1" title="1"><span class="kw">function</span> <span class="at">makePerson</span>(first<span class="op">,</span> last) <span class="op">{</span></a>
<a class="sourceLine" id="cb66-2" title="2">  <span class="cf">return</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb66-3" title="3">    <span class="dt">first</span><span class="op">:</span> first<span class="op">,</span></a>
<a class="sourceLine" id="cb66-4" title="4">    <span class="dt">last</span><span class="op">:</span> last<span class="op">,</span></a>
<a class="sourceLine" id="cb66-5" title="5">    <span class="dt">fullName</span><span class="op">:</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb66-6" title="6">      <span class="cf">return</span> <span class="kw">this</span>.<span class="at">first</span> <span class="op">+</span> <span class="st">&#39; &#39;</span> <span class="op">+</span> <span class="kw">this</span>.<span class="at">last</span><span class="op">;</span></a>
<a class="sourceLine" id="cb66-7" title="7">    <span class="op">},</span></a>
<a class="sourceLine" id="cb66-8" title="8">    <span class="dt">fullNameReversed</span><span class="op">:</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb66-9" title="9">      <span class="cf">return</span> <span class="kw">this</span>.<span class="at">last</span> <span class="op">+</span> <span class="st">&#39;, &#39;</span> <span class="op">+</span> <span class="kw">this</span>.<span class="at">first</span><span class="op">;</span></a>
<a class="sourceLine" id="cb66-10" title="10">    <span class="op">}</span></a>
<a class="sourceLine" id="cb66-11" title="11">  <span class="op">};</span></a>
<a class="sourceLine" id="cb66-12" title="12"><span class="op">}</span></a>
<a class="sourceLine" id="cb66-13" title="13"></a>
<a class="sourceLine" id="cb66-14" title="14"><span class="kw">var</span> s <span class="op">=</span> <span class="at">makePerson</span>(<span class="st">&#39;Simon&#39;</span><span class="op">,</span> <span class="st">&#39;Willison&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb66-15" title="15"><span class="va">s</span>.<span class="at">fullName</span>()<span class="op">;</span> <span class="co">// &quot;Simon Willison&quot;</span></a>
<a class="sourceLine" id="cb66-16" title="16"><span class="va">s</span>.<span class="at">fullNameReversed</span>()<span class="op">;</span> <span class="co">// &quot;Willison, Simon&quot;</span></a></code></pre></div>
<p>Note on the <code>this</code> keyword. Used inside a function, <code>this</code> refers to the current object. What that actually means is specified by the way in which you called that function. If you called it using <a href="Reference/Operators/Object_initializer.html#Accessing_properties" title="/en/JavaScript/Reference/Operators/Member_Operators">dot notation or bracket notation</a> on an object, that object becomes <code>this</code>. If dot notation wasn't used for the call, <code>this</code> refers to the global object.</p>
<p>Note that <code>this</code> is a frequent cause of mistakes. For example:</p>
<div class="sourceCode" id="cb67"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb67-1" title="1"><span class="kw">var</span> s <span class="op">=</span> <span class="at">makePerson</span>(<span class="st">&#39;Simon&#39;</span><span class="op">,</span> <span class="st">&#39;Willison&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb67-2" title="2"><span class="kw">var</span> fullName <span class="op">=</span> <span class="va">s</span>.<span class="at">fullName</span><span class="op">;</span></a>
<a class="sourceLine" id="cb67-3" title="3"><span class="at">fullName</span>()<span class="op">;</span> <span class="co">// undefined undefined</span></a></code></pre></div>
<p>When we call <code>fullName()</code> alone, without using <code>s.fullName()</code>, <code>this</code> is bound to the global object. Since there are no global variables called <code>first</code> or <code>last</code> we get <code>undefined</code> for each one.</p>
<p>We can take advantage of the <code>this</code> keyword to improve our <code>makePerson</code> function:</p>
<div class="sourceCode" id="cb68"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb68-1" title="1"><span class="kw">function</span> <span class="at">Person</span>(first<span class="op">,</span> last) <span class="op">{</span></a>
<a class="sourceLine" id="cb68-2" title="2">  <span class="kw">this</span>.<span class="at">first</span> <span class="op">=</span> first<span class="op">;</span></a>
<a class="sourceLine" id="cb68-3" title="3">  <span class="kw">this</span>.<span class="at">last</span> <span class="op">=</span> last<span class="op">;</span></a>
<a class="sourceLine" id="cb68-4" title="4">  <span class="kw">this</span>.<span class="at">fullName</span> <span class="op">=</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb68-5" title="5">    <span class="cf">return</span> <span class="kw">this</span>.<span class="at">first</span> <span class="op">+</span> <span class="st">&#39; &#39;</span> <span class="op">+</span> <span class="kw">this</span>.<span class="at">last</span><span class="op">;</span></a>
<a class="sourceLine" id="cb68-6" title="6">  <span class="op">};</span></a>
<a class="sourceLine" id="cb68-7" title="7">  <span class="kw">this</span>.<span class="at">fullNameReversed</span> <span class="op">=</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb68-8" title="8">    <span class="cf">return</span> <span class="kw">this</span>.<span class="at">last</span> <span class="op">+</span> <span class="st">&#39;, &#39;</span> <span class="op">+</span> <span class="kw">this</span>.<span class="at">first</span><span class="op">;</span></a>
<a class="sourceLine" id="cb68-9" title="9">  <span class="op">};</span></a>
<a class="sourceLine" id="cb68-10" title="10"><span class="op">}</span></a>
<a class="sourceLine" id="cb68-11" title="11"><span class="kw">var</span> s <span class="op">=</span> <span class="kw">new</span> <span class="at">Person</span>(<span class="st">&#39;Simon&#39;</span><span class="op">,</span> <span class="st">&#39;Willison&#39;</span>)<span class="op">;</span></a></code></pre></div>
<p>We have introduced another keyword: <code>new</code>. <code>new</code> is strongly related to <code>this</code>. It creates a brand new empty object, and then calls the function specified, with <code>this</code> set to that new object. Notice though that the function specified with <code>this</code> does not return a value but merely modifies the <code>this</code> object. It's <code>new</code> that returns the <code>this</code> object to the calling site. Functions that are designed to be called by <code>new</code> are called constructor functions. Common practice is to capitalize these functions as a reminder to call them with <code>new</code>.</p>
<p>The improved function still has the same pitfall with calling <code>fullName()</code> alone.</p>
<p>Our person objects are getting better, but there are still some ugly edges to them. Every time we create a person object we are creating two brand new function objects within it — wouldn't it be better if this code was shared?</p>
<div class="sourceCode" id="cb69"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb69-1" title="1"><span class="kw">function</span> <span class="at">personFullName</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb69-2" title="2">  <span class="cf">return</span> <span class="kw">this</span>.<span class="at">first</span> <span class="op">+</span> <span class="st">&#39; &#39;</span> <span class="op">+</span> <span class="kw">this</span>.<span class="at">last</span><span class="op">;</span></a>
<a class="sourceLine" id="cb69-3" title="3"><span class="op">}</span></a>
<a class="sourceLine" id="cb69-4" title="4"><span class="kw">function</span> <span class="at">personFullNameReversed</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb69-5" title="5">  <span class="cf">return</span> <span class="kw">this</span>.<span class="at">last</span> <span class="op">+</span> <span class="st">&#39;, &#39;</span> <span class="op">+</span> <span class="kw">this</span>.<span class="at">first</span><span class="op">;</span></a>
<a class="sourceLine" id="cb69-6" title="6"><span class="op">}</span></a>
<a class="sourceLine" id="cb69-7" title="7"><span class="kw">function</span> <span class="at">Person</span>(first<span class="op">,</span> last) <span class="op">{</span></a>
<a class="sourceLine" id="cb69-8" title="8">  <span class="kw">this</span>.<span class="at">first</span> <span class="op">=</span> first<span class="op">;</span></a>
<a class="sourceLine" id="cb69-9" title="9">  <span class="kw">this</span>.<span class="at">last</span> <span class="op">=</span> last<span class="op">;</span></a>
<a class="sourceLine" id="cb69-10" title="10">  <span class="kw">this</span>.<span class="at">fullName</span> <span class="op">=</span> personFullName<span class="op">;</span></a>
<a class="sourceLine" id="cb69-11" title="11">  <span class="kw">this</span>.<span class="at">fullNameReversed</span> <span class="op">=</span> personFullNameReversed<span class="op">;</span></a>
<a class="sourceLine" id="cb69-12" title="12"><span class="op">}</span></a></code></pre></div>
<p>That's better: we are creating the method functions only once, and assigning references to them inside the constructor. Can we do any better than that? The answer is yes:</p>
<div class="sourceCode" id="cb70"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb70-1" title="1"><span class="kw">function</span> <span class="at">Person</span>(first<span class="op">,</span> last) <span class="op">{</span></a>
<a class="sourceLine" id="cb70-2" title="2">  <span class="kw">this</span>.<span class="at">first</span> <span class="op">=</span> first<span class="op">;</span></a>
<a class="sourceLine" id="cb70-3" title="3">  <span class="kw">this</span>.<span class="at">last</span> <span class="op">=</span> last<span class="op">;</span></a>
<a class="sourceLine" id="cb70-4" title="4"><span class="op">}</span></a>
<a class="sourceLine" id="cb70-5" title="5"><span class="va">Person</span>.<span class="va">prototype</span>.<span class="at">fullName</span> <span class="op">=</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb70-6" title="6">  <span class="cf">return</span> <span class="kw">this</span>.<span class="at">first</span> <span class="op">+</span> <span class="st">&#39; &#39;</span> <span class="op">+</span> <span class="kw">this</span>.<span class="at">last</span><span class="op">;</span></a>
<a class="sourceLine" id="cb70-7" title="7"><span class="op">};</span></a>
<a class="sourceLine" id="cb70-8" title="8"><span class="va">Person</span>.<span class="va">prototype</span>.<span class="at">fullNameReversed</span> <span class="op">=</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb70-9" title="9">  <span class="cf">return</span> <span class="kw">this</span>.<span class="at">last</span> <span class="op">+</span> <span class="st">&#39;, &#39;</span> <span class="op">+</span> <span class="kw">this</span>.<span class="at">first</span><span class="op">;</span></a>
<a class="sourceLine" id="cb70-10" title="10"><span class="op">};</span></a></code></pre></div>
<p><code>Person.prototype</code> is an object shared by all instances of <code>Person</code>. It forms part of a lookup chain (that has a special name, "prototype chain"): any time you attempt to access a property of <code>Person</code> that isn't set, JavaScript will check <code>Person.prototype</code> to see if that property exists there instead. As a result, anything assigned to <code>Person.prototype</code> becomes available to all instances of that constructor via the <code>this</code> object.</p>
<p>This is an incredibly powerful tool. JavaScript lets you modify something's prototype at any time in your program, which means you can add extra methods to existing objects at runtime:</p>
<div class="sourceCode" id="cb71"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb71-1" title="1"><span class="kw">var</span> s <span class="op">=</span> <span class="kw">new</span> <span class="at">Person</span>(<span class="st">&#39;Simon&#39;</span><span class="op">,</span> <span class="st">&#39;Willison&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb71-2" title="2"><span class="va">s</span>.<span class="at">firstNameCaps</span>()<span class="op">;</span> <span class="co">// TypeError on line 1: s.firstNameCaps is not a function</span></a>
<a class="sourceLine" id="cb71-3" title="3"></a>
<a class="sourceLine" id="cb71-4" title="4"><span class="va">Person</span>.<span class="va">prototype</span>.<span class="at">firstNameCaps</span> <span class="op">=</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb71-5" title="5">  <span class="cf">return</span> <span class="kw">this</span>.<span class="va">first</span>.<span class="at">toUpperCase</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb71-6" title="6"><span class="op">};</span></a>
<a class="sourceLine" id="cb71-7" title="7"><span class="va">s</span>.<span class="at">firstNameCaps</span>()<span class="op">;</span> <span class="co">// &quot;SIMON&quot;</span></a></code></pre></div>
<p>Interestingly, you can also add things to the prototype of built-in JavaScript objects. Let's add a method to <code>String</code> that returns that string in reverse:</p>
<div class="sourceCode" id="cb72"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb72-1" title="1"><span class="kw">var</span> s <span class="op">=</span> <span class="st">&#39;Simon&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb72-2" title="2"><span class="va">s</span>.<span class="at">reversed</span>()<span class="op">;</span> <span class="co">// TypeError on line 1: s.reversed is not a function</span></a>
<a class="sourceLine" id="cb72-3" title="3"></a>
<a class="sourceLine" id="cb72-4" title="4"><span class="va">String</span>.<span class="va">prototype</span>.<span class="at">reversed</span> <span class="op">=</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb72-5" title="5">  <span class="kw">var</span> r <span class="op">=</span> <span class="st">&#39;&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb72-6" title="6">  <span class="cf">for</span> (<span class="kw">var</span> i <span class="op">=</span> <span class="kw">this</span>.<span class="at">length</span> <span class="op">-</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">&gt;=</span> <span class="dv">0</span><span class="op">;</span> i<span class="op">--</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb72-7" title="7">    r <span class="op">+=</span> <span class="kw">this</span>[i]<span class="op">;</span></a>
<a class="sourceLine" id="cb72-8" title="8">  <span class="op">}</span></a>
<a class="sourceLine" id="cb72-9" title="9">  <span class="cf">return</span> r<span class="op">;</span></a>
<a class="sourceLine" id="cb72-10" title="10"><span class="op">};</span></a>
<a class="sourceLine" id="cb72-11" title="11"></a>
<a class="sourceLine" id="cb72-12" title="12"><span class="va">s</span>.<span class="at">reversed</span>()<span class="op">;</span> <span class="co">// nomiS</span></a></code></pre></div>
<p>Our new method even works on string literals!</p>
<div class="sourceCode" id="cb73"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb73-1" title="1"><span class="st">&#39;This can now be reversed&#39;</span>.<span class="at">reversed</span>()<span class="op">;</span> <span class="co">// desrever eb won nac sihT</span></a></code></pre></div>
<p>As mentioned before, the prototype forms part of a chain. The root of that chain is <code>Object.prototype</code>, whose methods include <code>toString()</code> — it is this method that is called when you try to represent an object as a string. This is useful for debugging our <code>Person</code> objects:</p>
<div class="sourceCode" id="cb74"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb74-1" title="1"><span class="kw">var</span> s <span class="op">=</span> <span class="kw">new</span> <span class="at">Person</span>(<span class="st">&#39;Simon&#39;</span><span class="op">,</span> <span class="st">&#39;Willison&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb74-2" title="2"><span class="va">s</span>.<span class="at">toString</span>()<span class="op">;</span> <span class="co">// [object Object]</span></a>
<a class="sourceLine" id="cb74-3" title="3"></a>
<a class="sourceLine" id="cb74-4" title="4"><span class="va">Person</span>.<span class="va">prototype</span>.<span class="at">toString</span> <span class="op">=</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb74-5" title="5">  <span class="cf">return</span> <span class="st">&#39;&lt;Person: &#39;</span> <span class="op">+</span> <span class="kw">this</span>.<span class="at">fullName</span>() <span class="op">+</span> <span class="st">&#39;&gt;&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb74-6" title="6"><span class="op">}</span></a>
<a class="sourceLine" id="cb74-7" title="7"></a>
<a class="sourceLine" id="cb74-8" title="8"><span class="va">s</span>.<span class="at">toString</span>()<span class="op">;</span> <span class="co">// &quot;&lt;Person: Simon Willison&gt;&quot;</span></a></code></pre></div>
<p>Remember how <code>avg.apply()</code> had a null first argument? We can revisit that now. The first argument to <code>apply()</code> is the object that should be treated as '<code>this</code>'. For example, here's a trivial implementation of <code>new</code>:</p>
<div class="sourceCode" id="cb75"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb75-1" title="1"><span class="kw">function</span> <span class="at">trivialNew</span>(constructor<span class="op">,</span> ...<span class="at">args</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb75-2" title="2">  <span class="kw">var</span> o <span class="op">=</span> <span class="op">{};</span> <span class="co">// Create an object</span></a>
<a class="sourceLine" id="cb75-3" title="3">  <span class="va">constructor</span>.<span class="at">apply</span>(o<span class="op">,</span> args)<span class="op">;</span></a>
<a class="sourceLine" id="cb75-4" title="4">  <span class="cf">return</span> o<span class="op">;</span></a>
<a class="sourceLine" id="cb75-5" title="5"><span class="op">}</span></a></code></pre></div>
<p>This isn't an exact replica of <code>new</code> as it doesn't set up the prototype chain (it would be difficult to illustrate). This is not something you use very often, but it's useful to know about. In this snippet, <code>...args</code> (including the ellipsis) is called the "<a href="Reference/Functions/rest_parameters.html">rest arguments</a>" — as the name implies, this contains the rest of the arguments.</p>
<p>Calling</p>
<div class="sourceCode" id="cb76"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb76-1" title="1"><span class="kw">var</span> bill <span class="op">=</span> <span class="at">trivialNew</span>(Person<span class="op">,</span> <span class="st">&#39;William&#39;</span><span class="op">,</span> <span class="st">&#39;Orange&#39;</span>)<span class="op">;</span></a></code></pre></div>
<p>is therefore almost equivalent to</p>
<div class="sourceCode" id="cb77"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb77-1" title="1"><span class="kw">var</span> bill <span class="op">=</span> <span class="kw">new</span> <span class="at">Person</span>(<span class="st">&#39;William&#39;</span><span class="op">,</span> <span class="st">&#39;Orange&#39;</span>)<span class="op">;</span></a></code></pre></div>
<p><code>apply()</code> has a sister function named <a href="Reference/Global_Objects/Function/call.html" title="/en/JavaScript/Reference/Global_Objects/Function/call"><code>call</code></a>, which again lets you set <code>this</code> but takes an expanded argument list as opposed to an array.</p>
<div class="sourceCode" id="cb78"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb78-1" title="1"><span class="kw">function</span> <span class="at">lastNameCaps</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb78-2" title="2">  <span class="cf">return</span> <span class="kw">this</span>.<span class="va">last</span>.<span class="at">toUpperCase</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb78-3" title="3"><span class="op">}</span></a>
<a class="sourceLine" id="cb78-4" title="4"><span class="kw">var</span> s <span class="op">=</span> <span class="kw">new</span> <span class="at">Person</span>(<span class="st">&#39;Simon&#39;</span><span class="op">,</span> <span class="st">&#39;Willison&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb78-5" title="5"><span class="va">lastNameCaps</span>.<span class="at">call</span>(s)<span class="op">;</span></a>
<a class="sourceLine" id="cb78-6" title="6"><span class="co">// Is the same as:</span></a>
<a class="sourceLine" id="cb78-7" title="7"><span class="va">s</span>.<span class="at">lastNameCaps</span> <span class="op">=</span> lastNameCaps<span class="op">;</span></a>
<a class="sourceLine" id="cb78-8" title="8"><span class="va">s</span>.<span class="at">lastNameCaps</span>()<span class="op">;</span> <span class="co">// WILLISON</span></a></code></pre></div>
<h3 id="Inner_functions">Inner functions</h3>
<p>JavaScript function declarations are allowed inside other functions. We've seen this once before, with an earlier <code>makePerson()</code> function. An important detail of nested functions in JavaScript is that they can access variables in their parent function's scope:</p>
<div class="sourceCode" id="cb79"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb79-1" title="1"><span class="kw">function</span> <span class="at">parentFunc</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb79-2" title="2">  <span class="kw">var</span> a <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></a>
<a class="sourceLine" id="cb79-3" title="3"></a>
<a class="sourceLine" id="cb79-4" title="4">  <span class="kw">function</span> <span class="at">nestedFunc</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb79-5" title="5">    <span class="kw">var</span> b <span class="op">=</span> <span class="dv">4</span><span class="op">;</span> <span class="co">// parentFunc can&#39;t use this</span></a>
<a class="sourceLine" id="cb79-6" title="6">    <span class="cf">return</span> a <span class="op">+</span> b<span class="op">;</span> </a>
<a class="sourceLine" id="cb79-7" title="7">  <span class="op">}</span></a>
<a class="sourceLine" id="cb79-8" title="8">  <span class="cf">return</span> <span class="at">nestedFunc</span>()<span class="op">;</span> <span class="co">// 5</span></a>
<a class="sourceLine" id="cb79-9" title="9"><span class="op">}</span></a></code></pre></div>
<p>This provides a great deal of utility in writing more maintainable code. If a called function relies on one or two other functions that are not useful to any other part of your code, you can nest those utility functions inside it. This keeps the number of functions that are in the global scope down, which is always a good thing.</p>
<p>This is also a great counter to the lure of global variables. When writing complex code it is often tempting to use global variables to share values between multiple functions — which leads to code that is hard to maintain. Nested functions can share variables in their parent, so you can use that mechanism to couple functions together when it makes sense without polluting your global namespace — "local globals" if you like. This technique should be used with caution, but it's a useful ability to have.</p>
<h2 id="Closures">Closures</h2>
<p>This leads us to one of the most powerful abstractions that JavaScript has to offer — but also the most potentially confusing. What does this do?</p>
<div class="sourceCode" id="cb80"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb80-1" title="1"><span class="kw">function</span> <span class="at">makeAdder</span>(a) <span class="op">{</span></a>
<a class="sourceLine" id="cb80-2" title="2">  <span class="cf">return</span> <span class="kw">function</span>(b) <span class="op">{</span></a>
<a class="sourceLine" id="cb80-3" title="3">    <span class="cf">return</span> a <span class="op">+</span> b<span class="op">;</span></a>
<a class="sourceLine" id="cb80-4" title="4">  <span class="op">};</span></a>
<a class="sourceLine" id="cb80-5" title="5"><span class="op">}</span></a>
<a class="sourceLine" id="cb80-6" title="6"><span class="kw">var</span> add5 <span class="op">=</span> <span class="at">makeAdder</span>(<span class="dv">5</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb80-7" title="7"><span class="kw">var</span> add20 <span class="op">=</span> <span class="at">makeAdder</span>(<span class="dv">20</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb80-8" title="8"><span class="at">add5</span>(<span class="dv">6</span>)<span class="op">;</span> <span class="co">// ?</span></a>
<a class="sourceLine" id="cb80-9" title="9"><span class="at">add20</span>(<span class="dv">7</span>)<span class="op">;</span> <span class="co">// ?</span></a></code></pre></div>
<p>The name of the <code>makeAdder()</code> function should give it away: it creates new 'adder' functions, each of which, when called with one argument, adds it to the argument that it was created with.</p>
<p>What's happening here is pretty much the same as was happening with the inner functions earlier on: a function defined inside another function has access to the outer function's variables. The only difference here is that the outer function has returned, and hence common sense would seem to dictate that its local variables no longer exist. But they <em>do</em> still exist — otherwise, the adder functions would be unable to work. What's more, there are two different "copies" of <code>makeAdder()</code>'s local variables — one in which <code>a</code> is 5 and the other one where <code>a</code> is 20. So the result of that function calls is as follows:</p>
<div class="sourceCode" id="cb81"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb81-1" title="1"><span class="at">add5</span>(<span class="dv">6</span>)<span class="op">;</span> <span class="co">// returns 11</span></a>
<a class="sourceLine" id="cb81-2" title="2"><span class="at">add20</span>(<span class="dv">7</span>)<span class="op">;</span> <span class="co">// returns 27</span></a></code></pre></div>
<p>Here's what's actually happening. Whenever JavaScript executes a function, a 'scope' object is created to hold the local variables created within that function. It is initialized with any variables passed in as function parameters. This is similar to the global object that all global variables and functions live in, but with a couple of important differences: firstly, a brand new scope object is created every time a function starts executing, and secondly, unlike the global object (which is accessible as <code>this</code> and in browsers as <code>window</code>) these scope objects cannot be directly accessed from your JavaScript code. There is no mechanism for iterating over the properties of the current scope object, for example.</p>
<p>So when <code>makeAdder()</code> is called, a scope object is created with one property: <code>a</code>, which is the argument passed to the <code>makeAdder()</code> function. <code>makeAdder()</code> then returns a newly created function. Normally JavaScript's garbage collector would clean up the scope object created for <code>makeAdder()</code> at this point, but the returned function maintains a reference back to that scope object. As a result, the scope object will not be garbage-collected until there are no more references to the function object that <code>makeAdder()</code> returned.</p>
<p>Scope objects form a chain called the scope chain, similar to the prototype chain used by JavaScript's object system.</p>
<p>A <strong>closure</strong> is the combination of a function and the scope object in which it was created. Closures let you save state — as such, they can often be used in place of objects. You can find <a href="../../../../../external.html?link=http://stackoverflow.com/questions/111102/how-do-javascript-closures-work" class="external">several excellent introductions to closures</a>.</p>
<div class="metadata">
<section class="document-meta">
<h4 id="metadata">Metadata</h4>
<ul>
<li><strong>Last modified:</strong> May 12, 2020, <a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript$history">by MDN contributors</a></li>
</ul>
</section>
</div>
</div>
<div id="sidebar-quicklinks" class="sidebar">
<div class="quick-links">
<div class="quick-links-head sidebar-heading">
Related Topics
</div>
<div>
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong><em>JavaScript</em></strong></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong>Tutorials:</strong></a></li>
<li>Complete beginners
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics">JavaScript basics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps">JavaScript first steps</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks">JavaScript building blocks</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Introducing JavaScript objects</a></li>
</ol></li>
<li>JavaScript Guide
<ol>
<li><a href="Guide/Introduction.html">Introduction</a></li>
<li><a href="Guide/Grammar_and_Types.html">Grammar and types</a></li>
<li><a href="Guide/Control_flow_and_error_handling.html">Control flow and error handling</a></li>
<li><a href="Guide/Loops_and_iteration.html">Loops and iteration</a></li>
<li><a href="Guide/Functions.html">Functions</a></li>
<li><a href="Guide/Expressions_and_Operators.html">Expressions and operators</a></li>
<li><a href="Guide/Numbers_and_dates.html">Numbers and dates</a></li>
<li><a href="Guide/Text_formatting.html">Text formatting</a></li>
<li><a href="Guide/Regular_Expressions.html">Regular expressions</a></li>
<li><a href="Guide/Indexed_collections.html">Indexed collections</a></li>
<li><a href="Guide/Keyed_collections.html">Keyed collections</a></li>
<li><a href="Guide/Working_with_Objects.html">Working with objects</a></li>
<li><a href="Guide/Details_of_the_Object_Model.html">Details of the object model</a></li>
<li><a href="Guide/Using_promises.html">Using promises</a></li>
<li><a href="Guide/Iterators_and_generators.html">Iterators and generators</a></li>
<li><a href="Guide/Meta_programming.html">Meta programming</a></li>
<li><a href="Guide/Modules.html">JavaScript modules</a></li>
</ol></li>
<li>Intermediate
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Introducing JavaScript objects</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs">Client-side web APIs</a></li>
<li><a href="A_re-introduction_to_JavaScript.html">A re-introduction to JavaScript</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Equality_comparisons_and_sameness.html">Equality comparisons and sameness</a></li>
<li><a href="Closures.html">Closures</a></li>
</ol></li>
<li>Advanced
<ol>
<li><a href="Inheritance_and_the_prototype_chain.html">Inheritance and the prototype chain</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Typed_arrays.html">JavaScript typed arrays</a></li>
<li><a href="Memory_Management.html">Memory Management</a></li>
<li><a href="EventLoop.html">Concurrency model and Event Loop</a></li>
</ol></li>
<li><strong><a href="Reference.html">References:</a></strong></li>
<li>Built-in objects
<ol>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/AggregateError.html" title="The AggregateError object represents an error when several errors need to be wrapped in a single error.">AggregateError</a></li>
<li><a href="Reference/Global_Objects/Array.html" title="The JavaScript Array class is a global object that is used in the construction of arrays; which are high-level, list-like objects.">Array</a></li>
<li><a href="Reference/Global_Objects/ArrayBuffer.html" title="The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer.">ArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/AsyncFunction.html" title="The AsyncFunction constructor creates a new async function object. In JavaScript, every asynchronous function is actually an AsyncFunction object.">AsyncFunction</a></li>
<li><a href="Reference/Global_Objects/Atomics.html" title="The Atomics object provides atomic operations as static methods. They are used with SharedArrayBuffer objects.">Atomics</a></li>
<li><a href="Reference/Global_Objects/BigInt.html" title="BigInt is a built-in object that provides a way to represent whole numbers larger than 253 - 1, which is the largest number JavaScript can reliably represent with the Number primitive and represented by the Number.MAX_SAFE_INTEGER constant. BigInt can be used for arbitrarily large integers.">BigInt</a></li>
<li><a href="Reference/Global_Objects/BigInt64Array.html" title="The BigInt64Array typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigInt64Array</a></li>
<li><a href="Reference/Global_Objects/BigUint64Array.html" title="The BigUint64Array typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigUint64Array</a></li>
<li><a href="Reference/Global_Objects/Boolean.html" title="The Boolean object is an object wrapper for a boolean value.">Boolean</a></li>
<li><a href="Reference/Global_Objects/DataView.html" title="The DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform&#39;s endianness.">DataView</a></li>
<li><a href="Reference/Global_Objects/Date.html" title="JavaScript Date objects represent a single moment in time in a platform-independent format.">Date</a></li>
<li><a href="Reference/Global_Objects/Error.html" title="Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.">Error</a></li>
<li><a href="Reference/Global_Objects/EvalError.html" title="The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.">EvalError</a></li>
<li><a href="Reference/Global_Objects/Float32Array.html" title="The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float32Array</a></li>
<li><a href="Reference/Global_Objects/Float64Array.html" title="The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float64Array</a></li>
<li><a href="Reference/Global_Objects/Function.html" title="Every JavaScript function is actually a Function object. This can be seen with the code (function(){}).constructor === Function, which returns true.">Function</a></li>
<li><a href="Reference/Global_Objects/Generator.html" title="The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.">Generator</a></li>
<li><a href="Reference/Global_Objects/GeneratorFunction.html" title="The GeneratorFunction constructor creates a new generator function object. In JavaScript every generator function is actually a GeneratorFunction object.">GeneratorFunction</a></li>
<li><a href="Reference/Global_Objects/Infinity.html" title="The global property Infinity is a numeric value representing infinity.">Infinity</a></li>
<li><a href="Reference/Global_Objects/Int16Array.html" title="The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int16Array</a></li>
<li><a href="Reference/Global_Objects/Int32Array.html" title="The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int32Array</a></li>
<li><a href="Reference/Global_Objects/Int8Array.html" title="The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int8Array</a></li>
<li><a href="Reference/Global_Objects/InternalError.html" title="The InternalError object indicates an error that occurred internally in the JavaScript engine.">InternalError</a></li>
<li><a href="Reference/Global_Objects/Intl.html" title="The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The Intl object provides access to several constructors as well as functionality common to the internationalization constructors and other language sensitive functions.">Intl</a></li>
<li><a href="Reference/Global_Objects/JSON.html" title="The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can&#39;t be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.">JSON</a></li>
<li><a href="Reference/Global_Objects/Map.html" title="The Map object holds key-value pairs and remembers the original insertion order of the keys.">Map</a></li>
<li><a href="Reference/Global_Objects/Math.html" title="Math is a built-in object that has properties and methods for mathematical constants and functions. It’s not a function object.">Math</a></li>
<li><a href="Reference/Global_Objects/NaN.html" title="The global NaN property is a value representing Not-A-Number.">NaN</a></li>
<li><a href="Reference/Global_Objects/Number.html" title="The JavaScript Number type is double-precision 64-bit binary format IEEE 754 value. There is no integer type. In more recent implementations, JavaScript also supports integers with arbitrary precision using the BigInt type.">Number</a></li>
<li><a href="Reference/Global_Objects/Object.html" title="The Object class represents one of JavaScript&#39;s data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.">Object</a></li>
<li><a href="Reference/Global_Objects/Promise.html" title="The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.">Promise</a></li>
<li><a href="Reference/Global_Objects/Proxy.html" title="The Proxy object is used to define custom behavior for fundamental operations (e.g., property lookup, assignment, enumeration, function invocation, etc.).">Proxy</a></li>
<li><a href="Reference/Global_Objects/RangeError.html" title="The RangeError object indicates an error when a value is not in the set or range of allowed values.">RangeError</a></li>
<li><a href="Reference/Global_Objects/ReferenceError.html" title="The ReferenceError object represents an error when a non-existent variable is referenced.">ReferenceError</a></li>
<li><a href="Reference/Global_Objects/Reflect.html" title="Reflect is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of proxy handlers. Reflect is not a function object, so it&#39;s not constructible.">Reflect</a></li>
<li><a href="Reference/Global_Objects/RegExp.html" title="The RegExp object is used for matching text with a pattern.">RegExp</a></li>
<li><a href="Reference/Global_Objects/Set.html" title="The Set object lets you store unique values of any type, whether primitive values or object references.">Set</a></li>
<li><a href="Reference/Global_Objects/SharedArrayBuffer.html" title="The SharedArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. Unlike an ArrayBuffer, a SharedArrayBuffer cannot become detached.">SharedArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/String.html" title="The String global object is a constructor for strings or a sequence of characters.">String</a></li>
<li><a href="Reference/Global_Objects/Symbol.html" title="The data type symbol is a primitive data type. The Symbol() function returns a value of type symbol, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class, but is incomplete as a constructor because it does not support the syntax &quot;new Symbol()&quot;.">Symbol</a></li>
<li><a href="Reference/Global_Objects/SyntaxError.html" title="The SyntaxError object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.">SyntaxError</a></li>
<li><a href="Reference/Global_Objects/TypeError.html" title="The TypeError object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.">TypeError</a></li>
<li><a href="Reference/Global_Objects/TypedArray.html" title="A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.">TypedArray</a></li>
<li><a href="Reference/Global_Objects/URIError.html" title="The URIError object represents an error when a global URI handling function was used in a wrong way.">URIError</a></li>
<li><a href="Reference/Global_Objects/Uint16Array.html" title="The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint16Array</a></li>
<li><a href="Reference/Global_Objects/Uint32Array.html" title="The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint32Array</a></li>
<li><a href="Reference/Global_Objects/Uint8Array.html" title="The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8Array</a></li>
<li><a href="Reference/Global_Objects/Uint8ClampedArray.html" title="The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8ClampedArray</a></li>
<li><a href="Reference/Global_Objects/WeakMap.html" title="The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.">WeakMap</a></li>
<li><a href="Reference/Global_Objects/WeakSet.html" title="The WeakSet object lets you store weakly held objects in a collection.">WeakSet</a></li>
<li><a href="Reference/Global_Objects/WebAssembly.html" title="The WebAssembly JavaScript object acts as the namespace for all WebAssembly-related functionality.">WebAssembly</a></li>
<li><a href="Reference/Global_Objects/decodeURI.html" title="The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or by a similar routine.">decodeURI()</a></li>
<li><a href="Reference/Global_Objects/decodeURIComponent.html" title="The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.">decodeURIComponent()</a></li>
<li><a href="Reference/Global_Objects/encodeURI.html" title="The encodeURI() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURI()</a></li>
<li><a href="Reference/Global_Objects/encodeURIComponent.html" title="The encodeURIComponent() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURIComponent()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/escape.html" title="The escape() function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.">escape()</a></li>
<li><a href="Reference/Global_Objects/eval.html" title="The eval() function evaluates JavaScript code represented as a string.">eval()</a></li>
<li><a href="Reference/Global_Objects/globalThis.html" title="The global globalThis property contains the global this value, which is akin to the global object.">globalThis</a></li>
<li><a href="Reference/Global_Objects/isFinite.html" title="The global isFinite() function determines whether the passed value is a finite number. If  needed, the parameter is first converted to a number.">isFinite()</a></li>
<li><a href="Reference/Global_Objects/isNaN.html" title="The isNaN() function determines whether a value is NaN or not. Note, coercion inside the isNaN function has interesting rules; you may alternatively want to use Number.isNaN(), as defined in ECMAScript 2015.">isNaN()</a></li>
<li><a href="Reference/Global_Objects/null.html" title="The value null represents the intentional absence of any object value. It is one of JavaScript&#39;s primitive values and is treated as falsy for boolean operations.">null</a></li>
<li><a href="Reference/Global_Objects/parseFloat.html" title="The parseFloat() function parses an argument (converting it to a string first if needed) and returns a floating point number.">parseFloat()</a></li>
<li><a href="Reference/Global_Objects/parseInt.html" title="The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).">parseInt()</a></li>
<li><a href="Reference/Global_Objects/undefined.html" title="The global undefined property represents the primitive value undefined. It is one of JavaScript&#39;s primitive types.">undefined</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/unescape.html" title="The unescape() function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Usually, decodeURI or decodeURIComponent are preferred over unescape.">unescape()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><a href="Reference/Global_Objects/uneval.html" title="The uneval() function creates a string representation of the source code of an Object.">uneval()</a></li>
</ol></li>
<li>Expressions &amp; operators
<ol>
<li><a href="Reference/Operators.html" title="Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).">Arithmetic operators</a></li>
<li><a href="Reference/Operators%23Assignment_operators.html" title="An assignment operator assigns a value to its left operand based on the value of its right operand.">Assignment operators</a></li>
<li><a href="Reference/Operators.html" title="Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.">Bitwise operators</a></li>
<li><a href="Reference/Operators/Comma_Operator.html" title="The comma operator (,) evaluates each of its operands (from left to right) and returns the value of the last operand. This lets you create a compound expression in which multiple expressions are evaluated, with the compound expression&#39;s final value being the value of the rightmost of its member expressions. This is commonly used to provide multiple parameters to a for loop.">Comma operator</a></li>
<li><a href="Reference/Operators.html" title="JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., &lt;=), the operands are first converted to primitives, then to the same type, before comparison.">Comparison operators</a></li>
<li><a href="Reference/Operators/Conditional_Operator.html" title="The conditional (ternary) operator is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy.">Conditional (ternary) operator</a></li>
<li><a href="Reference/Operators/Destructuring_assignment.html" title="The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.">Destructuring assignment</a></li>
<li><a href="Reference/Operators/function.html" title="The function keyword can be used to define a function inside an expression.">Function expression</a></li>
<li><a href="Reference/Operators/Grouping.html" title="The grouping operator ( ) controls the precedence of evaluation in expressions.">Grouping operator</a></li>
<li><a href="Reference/Operators.html" title="Logical operators are typically used with Boolean (logical) values. When they are, they return a Boolean value. However, the &amp;&amp; and || operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they will return a non-Boolean value.">Logical operators</a></li>
<li><a href="Reference/Operators/Nullish_coalescing_operator.html" title="The nullish coalescing operator (??) is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.">Nullish coalescing operator</a></li>
<li><a href="Reference/Operators/Object_initializer.html" title="Objects can be initialized using new Object(), Object.create(), or using the literal notation (initializer notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).">Object initializer</a></li>
<li><a href="Reference/Operators/Operator_Precedence.html" title="Operator precedence determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.">Operator precedence</a></li>
<li><a href="Reference/Operators/Optional_chaining.html" title="The ?. operator functions similarly to the . chaining operator, except that instead of causing an error if a reference is nullish (null or undefined), the expression short-circuits with a return value of undefined.">Optional chaining</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Operators/Pipeline_operator.html" title="The experimental pipeline operator |&gt; (currently at stage 1) pipes the value of an expression into a function. This allows the creation of chained function calls in a readable manner. The result is syntactic sugar in which a function call with a single argument can be written like this:">Pipeline operator</a></li>
<li><a href="Reference/Operators/Property_Accessors-2.html" title="Property accessors provide access to an object&#39;s properties by using the dot notation or the bracket notation.">Property accessors</a></li>
<li><a href="Reference/Operators/Spread_syntax.html" title="Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.">Spread syntax</a></li>
<li><a href="Reference/Operators/async_function.html" title="The async function keyword can be used to define async functions inside expressions.">async function expression</a></li>
<li><a href="Reference/Operators/await.html" title="The await operator is used to wait for a Promise. It can only be used inside an async function.">await</a></li>
<li><a href="Reference/Operators/class.html" title="The class expression is one way to define a class in ECMAScript 2015. Similar to function expressions, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. ">class expression</a></li>
<li><a href="Reference/Operators/delete.html" title="The JavaScript delete operator removes a property from an object; if no more references to the same property are held, it is eventually released automatically.">delete operator</a></li>
<li><a href="Reference/Operators/function_.html" title="The function* keyword can be used to define a generator function inside an expression.">function* expression</a></li>
<li><a href="Reference/Operators/in.html" title="The in operator returns true if the specified property is in the specified object or its prototype chain.">in operator</a></li>
<li><a href="Reference/Operators/instanceof.html" title="The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object.">instanceof</a></li>
<li><a href="Reference/Operators/new.html" title="The new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.">new operator</a></li>
<li><a href="Reference/Operators/new-2.html" title="The new.target pseudo-property lets you detect whether a function or constructor was called using the new operator. In constructors and functions invoked using the new operator, new.target returns a reference to the constructor or function. In normal function calls, new.target is undefined.">new.target</a></li>
<li><a href="Reference/Operators/super.html" title="The super keyword is used to access and call functions on an object&#39;s parent.">super</a></li>
<li><a href="Reference/Operators/this.html" title="A function&#39;s this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode.">this</a></li>
<li><a href="Reference/Operators/typeof.html" title="The typeof operator returns a string indicating the type of the unevaluated operand.">typeof</a></li>
<li><a href="Reference/Operators/void.html" title="The void operator evaluates the given expression and then returns undefined.">void operator</a></li>
<li><a href="Reference/Operators/yield.html" title="The yield keyword is used to pause and resume a generator function (function* or legacy generator function).">yield</a></li>
<li><a href="Reference/Operators/yield_.html" title="The yield* expression is used to delegate to another generator or iterable object.">yield*</a></li>
</ol></li>
<li>Statements &amp; declarations
<ol>
<li><a href="Reference/Statements/async_function.html" title="An async function is a function declared with the async keyword. Async functions are instances of the AsyncFunction constructor, and the await keyword is permitted within them. The async and await keywords enable asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.">async function</a></li>
<li><a href="Reference/Statements/block.html" title="A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of braces (“curly brackets”) and may optionally be labelled:">block</a></li>
<li><a href="Reference/Statements/break.html" title="The break statement terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.">break</a></li>
<li><a href="Reference/Statements/class.html" title="The class declaration creates a new class with a given name using prototype-based inheritance.">class</a></li>
<li><a href="Reference/Statements/const.html" title="Constants are block-scoped, much like variables defined using the let keyword. The value of a constant can&#39;t be changed through reassignment, and it can&#39;t be redeclared.">const</a></li>
<li><a href="Reference/Statements/continue.html" title="The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.">continue</a></li>
<li><a href="Reference/Statements/debugger.html" title="The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.">debugger</a></li>
<li><a href="Reference/Statements/switch.html" title="The default keyword can be used in two situations in JavaScript: within a switch statement, or with an export statement.">default</a></li>
<li><a href="Reference/Statements/do...html" title="The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.">do...while</a></li>
<li><a href="Reference/Statements/Empty.html" title="An empty statement is used to provide no statement, although the JavaScript syntax would expect one.">empty</a></li>
<li><a href="Reference/Statements/export.html" title="The export statement is used when creating JavaScript modules to export live bindings to functions, objects, or primitive values from the module so they can be used by other programs with the import statement. Bindings that are exported can still be modified locally; when imported, although they can only be read by the importing module the value updates whenever it is updated by the exporting module.">export</a></li>
<li><a href="Reference/Statements/for.html" title="The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.">for</a></li>
<li><a href="Reference/Statements/for-await...html" title="The for await...of statement creates a loop iterating over async iterable objects as well as on sync iterables, including: built-in String, Array, Array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined async/sync iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.">for await...of</a></li>
<li><a href="Reference/Statements/for...html" title="The for...in statement iterates over all enumerable properties of an object that are keyed by strings (ignoring ones keyed by Symbols), including inherited enumerable properties.">for...in</a></li>
<li><a href="Reference/Statements/for..-2.html" title="The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.">for...of</a></li>
<li><a href="Reference/Statements/function.html" title="The function declaration (function statement) defines a function with the specified parameters.">function declaration</a></li>
<li><a href="Reference/Statements/function_.html" title="The function* declaration (function keyword followed by an asterisk) defines a generator function, which returns a Generator object.">function*</a></li>
<li><a href="Reference/Statements/if...html" title="The if statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement can be executed.">if...else</a></li>
<li><a href="Reference/Statements/import.html" title="The static import statement is used to import read only live bindings which are exported by another module. ">import</a></li>
<li><a href="Reference/Statements/import-2.html" title="The import.meta object exposes context-specific metadata to a JavaScript module. It contains information about the module, like the module&#39;s URL.">import.meta</a></li>
<li><a href="Reference/Statements/label.html" title="The labeled statement can be used with break or continue statements. It is prefixing a statement with an identifier which you can refer to.">label</a></li>
<li><a href="Reference/Statements/let.html" title="The let statement declares a block-scoped local variable, optionally initializing it to a value.">let</a></li>
<li><a href="Reference/Statements/return.html" title="The return statement ends function execution and specifies a value to be returned to the function caller.">return</a></li>
<li><a href="Reference/Statements/switch.html" title="The switch statement evaluates an expression, matching the expression&#39;s value to a case clause, and executes statements associated with that case, as well as statements in cases that follow the matching case.">switch</a></li>
<li><a href="Reference/Statements/throw.html" title="The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won&#39;t be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.">throw</a></li>
<li><a href="Reference/Statements/try...html" title="The try...catch statement marks a block of statements to try and specifies a response should an exception be thrown.">try...catch</a></li>
<li><a href="Reference/Statements/var.html" title="The var statement declares a function-scoped or globally-scoped variable, optionally initializing it to a value.">var</a></li>
<li><a href="Reference/Statements/while.html" title="The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.">while</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Statements/with.html" title="The with statement extends the scope chain for a statement.">with</a></li>
</ol></li>
<li>Functions
<ol>
<li><a href="Reference/Functions/Arrow_functions.html" title="An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords. Arrow function expressions are ill suited as methods, and they cannot be used as constructors.">Arrow function expressions</a></li>
<li><a href="Reference/Functions/Default_parameters.html" title="Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.">Default parameters</a></li>
<li><a href="Reference/Functions/Method_definitions.html" title="Starting with ECMAScript 2015, a shorter syntax for method definitions on objects initializers is introduced. It is a shorthand for a function assigned to the method&#39;s name.">Method definitions</a></li>
<li><a href="Reference/Functions/rest_parameters.html" title="The rest parameter syntax allows us to represent an indefinite number of arguments as an array.">Rest parameters</a></li>
<li><a href="Reference/Functions/arguments.html" title="arguments is an Array-like object accessible inside functions that contains the values of the arguments passed to that function.">The arguments object</a></li>
<li><a href="Reference/Functions/get.html" title="The get syntax binds an object property to a function that will be called when that property is looked up.">getter</a></li>
<li><a href="Reference/Functions/set.html" title="The set syntax binds an object property to a function to be called when there is an attempt to set that property.">setter</a></li>
</ol></li>
<li>Classes
<ol>
<li><a href="Reference/Classes/Public_class_fields.html" title="Both static and instance public fields are writable, enumerable, and configurable properties. As such, unlike their private counterparts, they participate in prototype inheritance.">Class fields</a></li>
<li><a href="Reference/Classes/constructor.html" title="The constructor method is a special method for creating and initializing an object created within a class.">constructor</a></li>
<li><a href="Reference/Classes/extends.html" title="The extends keyword is used in class declarations or class expressions to create a class which is a child of another class.">extends</a></li>
<li><a href="Reference/Classes/static.html" title="The static keyword defines a static method for a class. Static methods aren&#39;t called on instances of the class. Instead, they&#39;re called on the class itself.">static</a></li>
</ol></li>
<li>Errors
<ol>
<li><a href="Reference/Errors/Property_access_denied.html" title="The JavaScript exception &quot;Permission denied to access property&quot; occurs when there was an attempt to access an object for which you have no permission.">Error: Permission denied to access property "x"</a></li>
<li><a href="Reference/Errors/Too_much_recursion.html" title="The JavaScript exception &quot;too much recursion&quot; or &quot;Maximum call stack size exceeded&quot; occurs when there are too many function calls, or a function is missing a base case.">InternalError: too much recursion</a></li>
<li><a href="Reference/Errors/Not_a_codepoint.html" title="The JavaScript exception &quot;Invalid code point&quot; occurs when NaN values, negative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF (1114111) are used with String.fromCodePoint().">RangeError: argument is not a valid code point</a></li>
<li><a href="Reference/Errors/Invalid_array_length.html" title="The JavaScript exception &quot;Invalid array length&quot; occurs when creating an Array or an ArrayBuffer which has a length which is either negative or larger or equal to 232, or when setting the Array.length property to a value which is either negative or larger or equal to 232.">RangeError: invalid array length</a></li>
<li><a href="Reference/Errors/Invalid_date.html" title="The JavaScript exception &quot;invalid date&quot; occurs when a string leading to an invalid date has been provided to Date or Date.parse().">RangeError: invalid date</a></li>
<li><a href="Reference/Errors/Precision_range.html" title="The JavaScript exception &quot;precision is out of range&quot; occurs when a number that&#39;s outside of the range of 0 and 20 (or 21) was passed into toFixed or toPrecision.">RangeError: precision is out of range</a></li>
<li><a href="Reference/Errors/Bad_radix.html" title="The JavaScript exception &quot;radix must be an integer at least 2 and no greater than 36&quot; occurs when the optional radix parameter of the Number.prototype.toString() or the BigInt.prototype.toString() method was specified and is not between 2 and 36.">RangeError: radix must be an integer</a></li>
<li><a href="Reference/Errors/Resulting_string_too_large.html" title="The JavaScript exception &quot;repeat count must be less than infinity&quot; occurs when the String.prototype.repeat() method is used with a count argument that is infinity.">RangeError: repeat count must be less than infinity</a></li>
<li><a href="Reference/Errors/Negative_repetition_count.html" title="The JavaScript exception &quot;repeat count must be non-negative&quot; occurs when the String.prototype.repeat() method is used with a count argument that is a negative number.">RangeError: repeat count must be non-negative</a></li>
<li><a href="Reference/Errors/Not_defined.html" title="The JavaScript exception &quot;variable is not defined&quot; occurs when there is a non-existent variable referenced somewhere.">ReferenceError: "x" is not defined</a></li>
<li><a href="Reference/Errors/Undeclared_var.html" title="The JavaScript strict mode-only exception &quot;Assignment to undeclated variable&quot; occurs when the value has been assigned to an undeclared variable.">ReferenceError: assignment to undeclared variable "x"</a></li>
<li><a href="Reference/Errors/Cant_access_lexical_declaration_before_init.html" title="The JavaScript exception &quot;can&#39;t access lexical declaration `variable&#39; before initialization&quot; occurs when a lexical variable was accessed before it was initialized. This happens within any block statement, when let or const declarations are accessed before they are defined.">ReferenceError: can't access lexical declaration`X' before initialization</a></li>
<li><a href="Reference/Errors/Deprecated_caller_or_arguments_usage.html" title="The JavaScript strict mode-only exception &quot;deprecated caller or arguments usage&quot; occurs when the deprecated Function.caller or Function.arguments properties are used.">ReferenceError: deprecated caller or arguments usage</a></li>
<li><a href="Reference/Errors/Invalid_assignment_left-hand_side.html" title="The JavaScript exception &quot;invalid assignment left-hand side&quot; occurs when there was an unexpected assignment somewhere. For example, a single &quot;=&quot; sign was used instead of &quot;==&quot; or &quot;===&quot;.">ReferenceError: invalid assignment left-hand side</a></li>
<li><a href="Reference/Errors/Undefined_prop.html" title="The JavaScript warning &quot;reference to undefined property&quot; occurs when a script attempted to access an object property which doesn&#39;t exist.">ReferenceError: reference to undefined property "x"</a></li>
<li><a href="Reference/Errors/Deprecated_octal.html" title="The JavaScript strict mode-only exception &quot;0-prefixed octal literals and octal escape sequences are deprecated; for octal literals use the &quot;0o&quot; prefix instead&quot; occurs when deprecated octal literals and octal escape sequences are used.">SyntaxError: "0"-prefixed octal literals and octal escape seq. are deprecated</a></li>
<li><a href="Reference/Errors/Strict_Non_Simple_Params.html" title="The JavaScript exception &quot;&#39;use strict&#39; not allowed in function&quot; occurs when a &quot;use strict&quot; directive is used at the top of a function with default parameters, rest parameters, or destructuring parameters.">SyntaxError: "use strict" not allowed in function with non-simple parameters</a></li>
<li><a href="Reference/Errors/Reserved_identifier.html" title="The JavaScript exception &quot;variable is a reserved identifier&quot; occurs when reserved keywords are used as identifiers.">SyntaxError: "x" is a reserved identifier</a></li>
<li><a href="Reference/Errors/JSON_bad_parse.html" title="The JavaScript exceptions thrown by JSON.parse() occur when string failed to be parsed as JSON.">SyntaxError: JSON.parse: bad parsing</a></li>
<li><a href="Reference/Errors/Malformed_formal_parameter.html" title="The JavaScript exception &quot;malformed formal parameter&quot; occurs when the argument list of a Function() constructor call is invalid somehow.">SyntaxError: Malformed formal parameter</a></li>
<li><a href="Reference/Errors/Unexpected_token.html" title="The JavaScript exceptions &quot;unexpected token&quot; occur when a specific language construct was expected, but something else was provided. This might be a simple typo.">SyntaxError: Unexpected token</a></li>
<li><a href="Reference/Errors/Deprecated_source_map_pragma.html" title="The JavaScript warning &quot;Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead&quot; occurs when there is a deprecated source map syntax in a JavaScript source.">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li>
<li><a href="Reference/Errors/Invalid_for-of_initializer.html" title="The JavaScript exception &quot;a declaration in the head of a for-of loop can&#39;t have an initializer&quot; occurs when the head of a for...of loop contains an initializer expression such as |for (var i = 0 of iterable)|. This is not allowed in for-of loops.">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li>
<li><a href="Reference/Errors/Delete_in_strict_mode.html" title="The JavaScript strict mode-only exception &quot;applying the &#39;delete&#39; operator to an unqualified name is deprecated&quot; occurs when variables are attempted to be deleted using the delete operator.">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li>
<li><a href="Reference/Errors/Invalid_for-in_initializer.html" title="The JavaScript strict mode-only exception &quot;for-in loop head declarations may not have initializers&quot; occurs when the head of a for...in contains an initializer expression, such as |for (var i = 0 in obj)|. This is not allowed in for-of loops in strict mode.">SyntaxError: for-in loop head declarations may not have initializers</a></li>
<li><a href="Reference/Errors/Unnamed_function_statement.html" title="The JavaScript exception &quot;function statement requires a name&quot; occurs when there is a function statement in the code that requires a name.">SyntaxError: function statement requires a name</a></li>
<li><a href="Reference/Errors/Identifier_after_number.html" title="The JavaScript exception &quot;identifier starts immediately after numeric literal&quot; occurs when an identifier started with a digit. Identifiers can only start with a letter, underscore (_), or dollar sign ($).">SyntaxError: identifier starts immediately after numeric literal</a></li>
<li><a href="Reference/Errors/Illegal_character.html" title="The JavaScript exception &quot;illegal character&quot; occurs when there is an invalid or unexpected token that doesn&#39;t belong at this position in the code.">SyntaxError: illegal character</a></li>
<li><a href="Reference/Errors/Bad_regexp_flag.html" title="The JavaScript exception &quot;invalid regular expression flag&quot; occurs when the flags, defined after the second slash in regular expression literal, are not one of g, i, m, u, or y.">SyntaxError: invalid regular expression flag "x"</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_argument_list.html" title="The JavaScript exception &quot;missing ) after argument list&quot; occurs when there is an error with how a function is called. This might be a typo, a missing operator, or an unescaped string.">SyntaxError: missing ) after argument list</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_condition.html" title="The JavaScript exception &quot;missing ) after condition&quot; occurs when there is an error with how an if condition is written. It must appear in parenthesis after the if keyword.">SyntaxError: missing ) after condition</a></li>
<li><a href="Reference/Errors/Missing_colon_after_property_id.html" title="The JavaScript exception &quot;missing : after property id&quot; occurs when objects are created using the object initializer syntax. A colon (:) separates keys and values for the object&#39;s properties. Somehow, this colon is missing or misplaced.">SyntaxError: missing : after property id</a></li>
<li><a href="Reference/Errors/Missing_semicolon_before_statement.html" title="The JavaScript exception &quot;missing ; before statement&quot; occurs when there is a semicolon (;) missing somewhere and can&#39;t be added by automatic semicolon insertion (ASI). You need to provide a semicolon, so that JavaScript can parse the source code correctly.">SyntaxError: missing ; before statement</a></li>
<li><a href="Reference/Errors/Missing_initializer_in_const.html" title="The JavaScript exception &quot;missing = in const declaration&quot; occurs when a const declaration was not given a value in the same statement (like const RED_FLAG;). You need to provide one (const RED_FLAG = &#39;#ff0&#39;).">SyntaxError: missing = in const declaration</a></li>
<li><a href="Reference/Errors/Missing_bracket_after_list.html" title="The JavaScript exception &quot;missing ] after element list&quot; occurs when there is an error with the array initializer syntax somewhere. Likely there is a closing bracket (&quot;]&quot;) or a comma (&quot;,&quot;) missing.">SyntaxError: missing ] after element list</a></li>
<li><a href="Reference/Errors/Missing_formal_parameter.html" title="The JavaScript exception &quot;missing formal parameter&quot; occurs when your function declaration is missing valid parameters.">SyntaxError: missing formal parameter</a></li>
<li><a href="Reference/Errors/Missing_name_after_dot_operator.html" title="The JavaScript exception &quot;missing name after . operator&quot; occurs when there is a problem with how the dot operator (.) is used for property access.">SyntaxError: missing name after . operator</a></li>
<li><a href="Reference/Errors/No_variable_name.html" title="The JavaScript exception &quot;missing variable name&quot; occurs way too often as naming things is so hard. Or maybe a comma is wrong. Check for typos!">SyntaxError: missing variable name</a></li>
<li><a href="Reference/Errors/Missing_curly_after_function_body.html" title="The JavaScript exception &quot;missing } after function body&quot; occurs when there is a syntax mistake when creating a function somewhere. Check if any closing curly brackets or parenthesis are in the correct order.">SyntaxError: missing } after function body</a></li>
<li><a href="Reference/Errors/Missing_curly_after_property_list.html" title="The JavaScript exception &quot;missing } after property list&quot; occurs when there is a mistake in the object initializer syntax somewhere. Might be in fact a missing curly bracket, but could also be a missing comma.">SyntaxError: missing } after property list</a></li>
<li><a href="Reference/Errors/Redeclared_parameter.html" title="The JavaScript exception &quot;redeclaration of formal parameter&quot; occurs when the same variable name occurs as a function parameter and is then redeclared using a let assignment in a function body again.">SyntaxError: redeclaration of formal parameter "x"</a></li>
<li><a href="Reference/Errors/Bad_return_or_yield.html" title="The JavaScript exception &quot;return (or yield) not in function&quot; occurs when a return or yield statement is called outside of a function.">SyntaxError: return not in function</a></li>
<li><a href="Reference/Errors/Equal_as_assign.html" title="The JavaScript warning &quot;test for equality (==) mistyped as assignment (=)?&quot; occurs when there was an assignment (=) when you would normally expect a test for equality (==).">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li>
<li><a href="Reference/Errors/Unterminated_string_literal.html" title="The JavaScript error &quot;unterminated string literal&quot; occurs when there is an unterminated String somewhere. String literals must be enclosed by single (&#39;) or double (&quot;) quotes.">SyntaxError: unterminated string literal</a></li>
<li><a href="Reference/Errors/No_properties.html" title="The JavaScript exception &quot;null (or undefined) has no properties&quot; occurs when you attempt to access properties of null and undefined. They don&#39;t have any.">TypeError: "x" has no properties</a></li>
<li><a href="Reference/Errors/Unexpected_type.html" title="The JavaScript exception &quot;x is (not) y&quot; occurs when there was an unexpected type. Oftentimes, unexpected undefined or null values.">TypeError: "x" is (not) "y"</a></li>
<li><a href="Reference/Errors/Not_a_constructor.html" title="The JavaScript exception &quot;is not a constructor&quot; occurs when there was an attempt to use an object or a variable as a constructor, but that object or variable is not a constructor.">TypeError: "x" is not a constructor</a></li>
<li><a href="Reference/Errors/Not_a_function.html" title="The JavaScript exception &quot;is not a function&quot; occurs when there was an attempt to call a value from a function, but the value is not actually a function.">TypeError: "x" is not a function</a></li>
<li><a href="Reference/Errors/No_non-null_object.html" title="The JavaScript exception &quot;is not a non-null object&quot; occurs when an object is expected somewhere and wasn&#39;t provided. null is not an object and won&#39;t work.">TypeError: "x" is not a non-null object</a></li>
<li><a href="Reference/Errors/Read-only.html" title="The JavaScript strict mode-only exception &quot;is read-only&quot; occurs when a global variable or object property that was assigned to is a read-only property.">TypeError: "x" is read-only</a></li>
<li><a href="Reference/Errors/is_not_iterable.html" title="The JavaScript exception &quot;is not iterable&quot; occurs when the value which is given as the right hand-side of for…of or as argument of a function such as Promise.all or TypedArray.from, is not an iterable object.">TypeError: 'x' is not iterable</a></li>
<li><a href="Reference/Errors/More_arguments_needed.html" title="The JavaScript exception &quot;more arguments needed&quot; occurs when there is an error with how a function is called. More arguments need to be provided.">TypeError: More arguments needed</a></li>
<li><a href="Reference/Errors/Reduce_of_empty_array_with_no_initial_value.html" title="The JavaScript exception &quot;reduce of empty array with no initial value&quot; occurs when a reduce function is used.">TypeError: Reduce of empty array with no initial value</a></li>
<li><a href="Reference/Errors/Called_on_incompatible_type.html" title="The JavaScript exception &quot;called on incompatible target (or object)&quot; occurs when a function (on a given object), is called with a this not corresponding to the type expected by the function.">TypeError: X.prototype.y called on incompatible type</a></li>
<li><a href="Reference/Errors/Dead_object.html" title="The JavaScript exception &quot;can&#39;t access dead object&quot; occurs when Firefox disallows add-ons to keep strong references to DOM objects after their parent document has been destroyed to improve in memory usage and to prevent memory leaks.">TypeError: can't access dead object</a></li>
<li><a href="Reference/Errors/Cant_access_property.html" title="The JavaScript exception &quot;can&#39;t access property&quot; occurs when property access was operated on undefined or null values.">TypeError: can't access property "x" of "y"</a></li>
<li><a href="Reference/Errors/Cant_assign_to_property.html" title="The JavaScript strict mode exception &quot;can&#39;t assign to property&quot; occurs when attempting to create a property on primitive value such as a symbol, a string, a number or a boolean. Primitive values cannot hold any property.">TypeError: can't assign to property "x" on "y": not an object</a></li>
<li><a href="Reference/Errors/Cant_define_property_object_not_extensible.html" title="The JavaScript exception &quot;can&#39;t define property &quot;x&quot;: &quot;obj&quot; is not extensible&quot; occurs when Object.preventExtensions() marked an object as no longer extensible, so that it will never have properties beyond the ones it had at the time it was marked as non-extensible.">TypeError: can't define property "x": "obj" is not extensible</a></li>
<li><a href="Reference/Errors/Non_configurable_array_element.html" title="The JavaScript exception &quot;can&#39;t delete non-configurable array element&quot; occurs when it was attempted to shorten the length of an array, but one of the array&#39;s elements is non-configurable.">TypeError: can't delete non-configurable array element</a></li>
<li><a href="Reference/Errors/Cant_redefine_property.html" title="The JavaScript exception &quot;can&#39;t redefine non-configurable property&quot; occurs when it was attempted to redefine a property, but that property is non-configurable.">TypeError: can't redefine non-configurable property "x"</a></li>
<li><a href="Reference/Errors/in_operator_no_object.html" title="The JavaScript exception &quot;right-hand side of &#39;in&#39; should be an object&quot; occurs when the in operator was used to search in strings, or in numbers, or other primitive types. It can only be used to check if a property is in an object.">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li>
<li><a href="Reference/Errors/Cyclic_object_value.html" title="The JavaScript exception &quot;cyclic object value&quot; occurs when object references were found in JSON. JSON.stringify() doesn&#39;t try to solve them and fails accordingly.">TypeError: cyclic object value</a></li>
<li><a href="Reference/Errors/invalid_right_hand_side_instanceof_operand.html" title="The JavaScript exception &quot;invalid &#39;instanceof&#39; operand&quot; occurs when the right hand side operands of the instanceof operator isn&#39;t used with a constructor object, i.e. an object which has a prototype property and is callable.">TypeError: invalid 'instanceof' operand 'x'</a></li>
<li><a href="Reference/Errors/Array_sort_argument.html" title="The JavaScript exception &quot;invalid Array.prototype.sort argument&quot; occurs when the argument of Array.prototype.sort() isn&#39;t either undefined or a function which compares its operands.">TypeError: invalid Array.prototype.sort argument</a></li>
<li><a href="Reference/Errors/Typed_array_invalid_arguments.html" title="The JavaScript exception &quot;invalid arguments&quot; occurs when typed array constructors are provided with a wrong argument.">TypeError: invalid arguments</a></li>
<li><a href="Reference/Errors/Invalid_const_assignment.html" title="The JavaScript exception &quot;invalid assignment to const&quot; occurs when it was attempted to alter a constant value. JavaScript const declarations can&#39;t be re-assigned or redeclared.">TypeError: invalid assignment to const "x"</a></li>
<li><a href="Reference/Errors/Cant_delete.html" title="The JavaScript exception &quot;property is non-configurable and can&#39;t be deleted&quot; occurs when it was attempted to delete a property, but that property is non-configurable.">TypeError: property "x" is non-configurable and can't be deleted</a></li>
<li><a href="Reference/Errors/Getter_only.html" title="The JavaScript strict mode-only exception &quot;setting getter-only property&quot; occurs when there is an attempt to set a new value to a property for which only a getter is specified.">TypeError: setting getter-only property "x"</a></li>
<li><a href="Reference/Errors/Var_hides_argument.html" title="The JavaScript strict mode-only exception &quot;variable redeclares argument&quot; occurs when the same variable name occurs as a function parameter and is then redeclared using a var assignment in a function body again.">TypeError: variable "x" redeclares argument</a></li>
<li><a href="Reference/Errors/Malformed_URI.html" title="The JavaScript exception &quot;malformed URI sequence&quot; occurs when URI encoding or decoding wasn&#39;t successful.">URIError: malformed URI sequence</a></li>
<li><a href="Reference/Errors/Already_has_pragma.html" title="The JavaScript warning &quot;-file- is being assigned a //# sourceMappingURL, but already has one.&quot; occurs when a source map has been specified more than once for a given JavaScript source.">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li>
<li><a href="Reference/Errors/Bad_octal.html" title="The JavaScript warning &quot;08 (or 09) is not a legal ECMA-262 octal constant&quot; occurs when 08 or 09 number literals are used. They can&#39;t be interpreted as an octal number.">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li>
<li><a href="Reference/Errors/Deprecated_toLocaleFormat.html" title="The JavaScript warning &quot;Date.prototype.toLocaleFormat is deprecated; consider using Intl.DateTimeFormat instead&quot; occurs when the non-standard Date.prototype.toLocaleFormat method is used.">Warning: Date.prototype.toLocaleFormat is deprecated</a></li>
<li><a href="Reference/Errors/For-each-in_loops_are_deprecated.html" title="The JavaScript warning &quot;JavaScript 1.6&#39;s for-each-in loops are deprecated; consider using ES6 for-of instead&quot; occurs when a for each (variable in obj) statement is used.">Warning: JavaScript 1.6's for-each-in loops are deprecated</a></li>
<li><a href="Reference/Errors/Deprecated_String_generics.html" title="The JavaScript warning about string generics occurs in Firefox versions prior to 68. String generics have been removed starting with Firefox 68.">Warning: String.x is deprecated; use String.prototype.x instead</a></li>
<li><a href="Reference/Errors/Deprecated_expression_closures.html" title="The JavaScript warning &quot;expression closures are deprecated&quot; occurs when the non-standard expression closure syntax (shorthand function syntax) is used.">Warning: expression closures are deprecated</a></li>
<li><a href="Reference/Errors/Stmt_after_return.html" title="The JavaScript warning &quot;unreachable code after return statement&quot; occurs when using an expression after a return statement, or when using a semicolon-less return statement but including an expression directly after.">Warning: unreachable code after return statement</a></li>
</ol></li>
<li>Misc
<ol>
<li><a href="JavaScript_technologies_overview.html">JavaScript technologies overview</a></li>
<li><a href="Reference/Lexical_grammar.html">Lexical grammar</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Enumerability_and_ownership_of_properties.html">Enumerability and ownership of properties</a></li>
<li><a href="Reference/Iteration_protocols.html">Iteration protocols</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Reference/Strict_mode/Transitioning_to_strict_mode.html">Transitioning to strict mode</a></li>
<li><a href="Reference/Template_literals.html">Template literals</a></li>
<li><a href="Reference/Deprecated_and_obsolete_features.html">Deprecated features</a></li>
</ol></li>
</ol>
</div>
</div>
</div>
</div>
</div>
<section class="newsletter-container">
<div id="newsletter-form-container" class="newsletter">
<section class="newsletter-head">
<h2 id="learn-the-best-of-web-development" class="newsletter-teaser">Learn the best of web development</h2>
<p>Get the latest and greatest from MDN delivered straight to your inbox.</p>
<p>The newsletter is offered in English only at the moment.</p>
</section>
<div class="form-group newsletter-group-email">
E-mail
</div>
<div id="newsletter-privacy" class="form-group form-group-agree newsletter-group-privacy" data-aria-hidden="false">
I’m okay with Mozilla handling my info as explained in this <a href="../../../../../external.html?link=https://www.mozilla.org/privacy/">Privacy Policy</a>.
</div>
<div class="newsletter-group-submit">
Sign up now
</div>
<span>Hide Newsletter Sign-up</span>
</div>
</section>
<div class="content-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/" class="nav-footer-logo">MDN Web Docs</a>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Web Technologies</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn Web Development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/About">About MDN</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Feedback</a></li>
</ul>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/">About</a></li>
<li><a href="../../../../../external.html?link=https://shop.spreadshirt.com/mdn-store/">MDN Web Docs Store</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/contact/">Contact Us</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/firefox/?utm_source=developer.mozilla.org&amp;utm_campaign=footer&amp;utm_medium=referral">Firefox</a></li>
</ul>
<div class="social social-mdn">
<h4 id="mdn">MDN</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<div class="social social-moz">
<h4 id="mozilla">Mozilla</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<p>© 2005-2020 Mozilla and individual contributors. Content is available under <a href="../../../../../external.html?link=https://developer.mozilla.org/docs/MDN/About#Copyrights_and_licenses">these licenses</a>.</p>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/legal/terms/mozilla">Terms</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/">Privacy</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/#cookies">Cookies</a></li>
</ul>
</div>
</div>
<div id="auth-modal" class="modal hidden">
<section class="auth-providers" tabindex="-1" data-role="dialog" data-aria-modal="true" data-aria-labelledby="modal-main-heading">
<h2 id="modal-main-heading">Sign In</h2>
<p>Sign in to enjoy the benefits of an MDN account. If you haven’t already created an account, you will be prompted to do so after signing in.</p>
<div class="auth-button-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/users/github/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FA_re-introduction_to_JavaScript" class="github-auth">Sign in with Github</a> <a href="../../../../../external.html?link=https://developer.mozilla.org/users/google/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FA_re-introduction_to_JavaScript" class="google-auth">Sign in with Google</a>
</div>
<span>Close modal</span>
</section>
</div>
<div id="react-container" data-component-name="SPA">
<div class="loading-bar">

</div>
<ul>
<li><a href="#content" id="skip-main">Skip to main content</a></li>
<li><a href="#language" id="skip-language">Select language</a></li>
<li><a href="#main-q" id="skip-search">Skip to search</a></li>
</ul>
<ul>
<li>Technologies
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Technologies Overview</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide/Graphics">Graphics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API">APIs / DOM</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions">Browser Extensions</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/MathML">MathML</a></li>
</ul></li>
<li>References &amp; Guides
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn web development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Tutorials">Tutorials</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Reference">References</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide">Developer Guides</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Accessibility">Accessibility</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Games">Game development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">...more docs</a></li>
</ul></li>
<li>Feedback
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Send Feedback</a></li>
<li><a href="../../../../../external.html?link=https://support.mozilla.org/">Get Firefox help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://stackoverflow.com/">Get web development help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Community">Join the MDN community</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/sprints/issues/new?template=issue-template.md&amp;projects=mdn/sprints/2&amp;labels=user-report&amp;title=/en-US/docs/Web/JavaScript/Closures">Report a content problem 🌐</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/kuma/issues/new/choose">Report an issue 🌐</a></li>
</ul></li>
</ul>
<div class="header-search">
Search MDN
<span>Open search</span>
</div>
<div data-role="main">
<div class="titlebar-container">
<div class="titlebar">

</div>
</div>
<div class="full-width-row-container">
<div class="max-content-width-container">
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web" class="breadcrumb-chevron"><span class="pre-text">See </span><span data-property="name">Web technology for developers</span></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript" class="breadcrumb-previous"><span class="pre-text">See </span><span data-property="name">JavaScript</span></a></li>
<li><a href="Closures.html" class="crumb-current-page"><span data-property="name" data-aria-current="page">Closures</span></a></li>
</ol>
<div class="dropdown-container language-menu">
English<span class="dropdown-arrow-down" data-aria-hidden="true">▼</span>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/de/docs/Web/JavaScript/Closures" title="German">Deutsch</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/es/docs/Web/JavaScript/Closures" title="Spanish">Español</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/fr/docs/Web/JavaScript/Closures" title="French">Français</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/id/docs/Web/JavaScript/Panduan/Closures" title="Indonesian">Bahasa Indonesia</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/it/docs/Web/JavaScript/Chiusure" title="Italian">Italiano</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ja/docs/Web/JavaScript/Closures" title="Japanese">日本語</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Closures" title="Korean">한국어</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pl/docs/Web/JavaScript/Domkniecia" title="Polish">Polski</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Closures" title="Portuguese (Brazilian)">Português (do Brasil)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ru/docs/Web/JavaScript/Closures" title="Russian">Русский</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/uk/docs/Web/JavaScript/Closures" title="Ukrainian">Українська</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/vi/docs/Web/JavaScript/Closures" title="Vietnamese">Tiếng Việt</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures" title="Chinese (Simplified)">中文 (简体)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Closures" title="Chinese (Traditional)">正體中文 (繁體)</a></li>
<li><a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Closures$locales" id="translations-add">Add a translation</a></li>
</ul>
</div>
</div>
</div>
<div class="wiki-left-present content-layout">
<div id="content" class="article text-content">
<div>

</div>
<p>A <strong>closure</strong> is the combination of a function bundled together (enclosed) with references to its surrounding state (the <strong>lexical environment</strong>). In other words, a closure gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.</p>
<h2 id="Lexical_scoping">Lexical scoping</h2>
<p>Consider the following example code:</p>
<div>
<div class="sourceCode" id="cb82"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb82-1" title="1"><span class="kw">function</span> <span class="at">init</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb82-2" title="2">  <span class="kw">var</span> name <span class="op">=</span> <span class="st">&#39;Mozilla&#39;</span><span class="op">;</span> <span class="co">// name is a local variable created by init</span></a>
<a class="sourceLine" id="cb82-3" title="3">  <span class="kw">function</span> <span class="at">displayName</span>() <span class="op">{</span> <span class="co">// displayName() is the inner function, a closure</span></a>
<a class="sourceLine" id="cb82-4" title="4">    <span class="at">alert</span>(name)<span class="op">;</span> <span class="co">// use variable declared in the parent function</span></a>
<a class="sourceLine" id="cb82-5" title="5">  <span class="op">}</span></a>
<a class="sourceLine" id="cb82-6" title="6">  <span class="at">displayName</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb82-7" title="7"><span class="op">}</span></a>
<a class="sourceLine" id="cb82-8" title="8"><span class="at">init</span>()<span class="op">;</span></a></code></pre></div>
</div>
<p><code>init()</code> creates a local variable called <code>name</code> and a function called <code>displayName()</code>. The <code>displayName()</code> function is an inner function that is defined inside <code>init()</code> and is available only within the body of the <code>init()</code> function. Note that the <code>displayName()</code> function has no local variables of its own. However, since inner functions have access to the variables of outer functions, <code>displayName()</code> can access the variable <code>name</code> declared in the parent function, <code>init()</code>.</p>
<p>Run the code using <a href="../../../../../external.html?link=http://jsfiddle.net/xAFs9/3/" class="external">this JSFiddle link</a> and notice that the <code>alert()</code> statement within the <code>displayName()</code> function successfully displays the value of the <code>name</code> variable, which is declared in its parent function. This is an example of <em>lexical</em> <em>scoping</em>, which describes how a parser resolves variable names when functions are nested. The word <em>lexical</em> refers to the fact that lexical scoping uses the location where a variable is declared within the source code to determine where that variable is available. Nested functions have access to variables declared in their outer scope.</p>
<h2 id="Closure">Closure</h2>
<p>Consider the following code example:</p>
<div class="sourceCode" id="cb83"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb83-1" title="1"><span class="kw">function</span> <span class="at">makeFunc</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb83-2" title="2">  <span class="kw">var</span> name <span class="op">=</span> <span class="st">&#39;Mozilla&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb83-3" title="3">  <span class="kw">function</span> <span class="at">displayName</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb83-4" title="4">    <span class="at">alert</span>(name)<span class="op">;</span></a>
<a class="sourceLine" id="cb83-5" title="5">  <span class="op">}</span></a>
<a class="sourceLine" id="cb83-6" title="6">  <span class="cf">return</span> displayName<span class="op">;</span></a>
<a class="sourceLine" id="cb83-7" title="7"><span class="op">}</span></a>
<a class="sourceLine" id="cb83-8" title="8"></a>
<a class="sourceLine" id="cb83-9" title="9"><span class="kw">var</span> myFunc <span class="op">=</span> <span class="at">makeFunc</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb83-10" title="10"><span class="at">myFunc</span>()<span class="op">;</span></a></code></pre></div>
<p>Running this code has exactly the same effect as the previous example of the <code>init()</code> function above. What's different (and interesting) is that the <code>displayName()</code> inner function is returned from the outer function <em>before being executed</em>.</p>
<p>At first glance, it might seem unintuitive that this code still works. In some programming languages, the local variables within a function exist for just the duration of that function's execution. Once <code>makeFunc()</code> finishes executing, you might expect that the name variable would no longer be accessible. However, because the code still works as expected, this is obviously not the case in JavaScript.</p>
<p>The reason is that functions in JavaScript form closures. A <em>closure</em> is the combination of a function and the lexical environment within which that function was declared. This environment consists of any local variables that were in-scope at the time the closure was created. In this case, <code>myFunc</code> is a reference to the instance of the function <code>displayName</code> that is created when <code>makeFunc</code> is run. The instance of <code>displayName</code> maintains a reference to its lexical environment, within which the variable <code>name</code> exists. For this reason, when <code>myFunc</code> is invoked, the variable <code>name</code> remains available for use, and "Mozilla" is passed to <code>alert</code>.</p>
<p>Here's a slightly more interesting example—a <code>makeAdder</code> function:</p>
<div class="sourceCode" id="cb84"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb84-1" title="1"><span class="kw">function</span> <span class="at">makeAdder</span>(x) <span class="op">{</span></a>
<a class="sourceLine" id="cb84-2" title="2">  <span class="cf">return</span> <span class="kw">function</span>(y) <span class="op">{</span></a>
<a class="sourceLine" id="cb84-3" title="3">    <span class="cf">return</span> x <span class="op">+</span> y<span class="op">;</span></a>
<a class="sourceLine" id="cb84-4" title="4">  <span class="op">};</span></a>
<a class="sourceLine" id="cb84-5" title="5"><span class="op">}</span></a>
<a class="sourceLine" id="cb84-6" title="6"></a>
<a class="sourceLine" id="cb84-7" title="7"><span class="kw">var</span> add5 <span class="op">=</span> <span class="at">makeAdder</span>(<span class="dv">5</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb84-8" title="8"><span class="kw">var</span> add10 <span class="op">=</span> <span class="at">makeAdder</span>(<span class="dv">10</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb84-9" title="9"></a>
<a class="sourceLine" id="cb84-10" title="10"><span class="va">console</span>.<span class="at">log</span>(<span class="at">add5</span>(<span class="dv">2</span>))<span class="op">;</span>  <span class="co">// 7</span></a>
<a class="sourceLine" id="cb84-11" title="11"><span class="va">console</span>.<span class="at">log</span>(<span class="at">add10</span>(<span class="dv">2</span>))<span class="op">;</span> <span class="co">// 12</span></a></code></pre></div>
<p>In this example, we have defined a function <code>makeAdder(x)</code>, that takes a single argument <code>x</code>, and returns a new function. The function it returns takes a single argument <code>y</code>, and returns the sum of <code>x</code> and <code>y</code>.</p>
<p>In essence, <code>makeAdder</code> is a function factory. It creates functions that can add a specific value to their argument. In the above example, the function factory creates two new functions—one that adds five to its argument, and one that adds 10.</p>
<p><code>add5</code> and <code>add10</code> are both closures. They share the same function body definition, but store different lexical environments. In <code>add5</code>'s lexical environment, <code>x</code> is 5, while in the lexical environment for <code>add10</code>, <code>x</code> is 10.</p>
<h2 id="Practical_closures">Practical closures</h2>
<p>Closures are useful because they let you associate data (the lexical environment) with a function that operates on that data. This has obvious parallels to object-oriented programming, where objects allow you to associate data (the object's properties) with one or more methods.</p>
<p>Consequently, you can use a closure anywhere that you might normally use an object with only a single method.</p>
<p>Situations where you might want to do this are particularly common on the web. Much of the code written in front-end JavaScript is event-based. You define some behavior, and then attach it to an event that is triggered by the user (such as a click or a keypress). The code is attached as a callback (a single function that is executed in response to the event).</p>
<p>For instance, suppose we want to add buttons to a page to adjust the text size. One way of doing this is to specify the font-size of the <code>body</code> element (in pixels), and then set the size of the other elements on the page (such as headers) using the relative <code>em</code> unit:</p>
<div class="sourceCode" id="cb85"><pre class="sourceCode brush: css notranslate"><code class="sourceCode css"><a class="sourceLine" id="cb85-1" title="1">body {</a>
<a class="sourceLine" id="cb85-2" title="2">  <span class="kw">font-family</span>: Helvetica<span class="op">,</span> Arial<span class="op">,</span> <span class="dv">sans-serif</span><span class="op">;</span></a>
<a class="sourceLine" id="cb85-3" title="3">  <span class="kw">font-size</span>: <span class="dv">12</span><span class="dt">px</span><span class="op">;</span></a>
<a class="sourceLine" id="cb85-4" title="4">}</a>
<a class="sourceLine" id="cb85-5" title="5"></a>
<a class="sourceLine" id="cb85-6" title="6">h1 {</a>
<a class="sourceLine" id="cb85-7" title="7">  <span class="kw">font-size</span>: <span class="dv">1.5</span><span class="dt">em</span><span class="op">;</span></a>
<a class="sourceLine" id="cb85-8" title="8">}</a>
<a class="sourceLine" id="cb85-9" title="9"></a>
<a class="sourceLine" id="cb85-10" title="10">h2 {</a>
<a class="sourceLine" id="cb85-11" title="11">  <span class="kw">font-size</span>: <span class="dv">1.2</span><span class="dt">em</span><span class="op">;</span></a>
<a class="sourceLine" id="cb85-12" title="12">}</a></code></pre></div>
<p>Such interactive text size buttons can change the <code>font-size</code> property of the <code>body</code> element, and the adjustments are picked up by other elements on the page thanks to the relative units.</p>
<p>Here's the JavaScript:</p>
<div class="sourceCode" id="cb86"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb86-1" title="1"><span class="kw">function</span> <span class="at">makeSizer</span>(size) <span class="op">{</span></a>
<a class="sourceLine" id="cb86-2" title="2">  <span class="cf">return</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb86-3" title="3">    <span class="va">document</span>.<span class="va">body</span>.<span class="va">style</span>.<span class="at">fontSize</span> <span class="op">=</span> size <span class="op">+</span> <span class="st">&#39;px&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb86-4" title="4">  <span class="op">};</span></a>
<a class="sourceLine" id="cb86-5" title="5"><span class="op">}</span></a>
<a class="sourceLine" id="cb86-6" title="6"></a>
<a class="sourceLine" id="cb86-7" title="7"><span class="kw">var</span> size12 <span class="op">=</span> <span class="at">makeSizer</span>(<span class="dv">12</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb86-8" title="8"><span class="kw">var</span> size14 <span class="op">=</span> <span class="at">makeSizer</span>(<span class="dv">14</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb86-9" title="9"><span class="kw">var</span> size16 <span class="op">=</span> <span class="at">makeSizer</span>(<span class="dv">16</span>)<span class="op">;</span></a></code></pre></div>
<p><code>size12</code>, <code>size14</code>, and <code>size16</code> are now functions that resize the body text to 12, 14, and 16 pixels, respectively. You can attach them to buttons (in this case hyperlinks) as demonstrated in the following code example.</p>
<div class="sourceCode" id="cb87"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb87-1" title="1"><span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;size-12&#39;</span>).<span class="at">onclick</span> <span class="op">=</span> size12<span class="op">;</span></a>
<a class="sourceLine" id="cb87-2" title="2"><span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;size-14&#39;</span>).<span class="at">onclick</span> <span class="op">=</span> size14<span class="op">;</span></a>
<a class="sourceLine" id="cb87-3" title="3"><span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;size-16&#39;</span>).<span class="at">onclick</span> <span class="op">=</span> size16<span class="op">;</span></a></code></pre></div>
<div class="sourceCode" id="cb88"><pre class="sourceCode brush: html notranslate"><code class="sourceCode html"><a class="sourceLine" id="cb88-1" title="1"><span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;#&quot;</span><span class="ot"> id=</span><span class="st">&quot;size-12&quot;</span><span class="kw">&gt;</span>12<span class="kw">&lt;/a&gt;</span></a>
<a class="sourceLine" id="cb88-2" title="2"><span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;#&quot;</span><span class="ot"> id=</span><span class="st">&quot;size-14&quot;</span><span class="kw">&gt;</span>14<span class="kw">&lt;/a&gt;</span></a>
<a class="sourceLine" id="cb88-3" title="3"><span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;#&quot;</span><span class="ot"> id=</span><span class="st">&quot;size-16&quot;</span><span class="kw">&gt;</span>16<span class="kw">&lt;/a&gt;</span></a></code></pre></div>
<p>Run the code using <a href="../../../../../external.html?link=https://jsfiddle.net/vnkuZ/7726/" class="external">JSFiddle</a>.</p>
<h2 id="Emulating_private_methods_with_closures">Emulating private methods with closures</h2>
<p>Languages such as Java allow you to declare methods as private, meaning that they can be called only by other methods in the same class.</p>
<p>JavaScript does not provide a native way of doing this, but it is possible to emulate private methods using closures. Private methods aren't just useful for restricting access to code. They also provide a powerful way of managing your global namespace.</p>
<p>The following code illustrates how to use closures to define public functions that can access private functions and variables. Note that these closures follow the <a href="../../../../../external.html?link=http://www.google.com/search?q=javascript+module+pattern" class="external" title="http://www.google.com/search?q=javascript+module+pattern">Module Design Pattern</a>.</p>
<div class="sourceCode" id="cb89"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb89-1" title="1"><span class="kw">var</span> counter <span class="op">=</span> (<span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb89-2" title="2">  <span class="kw">var</span> privateCounter <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></a>
<a class="sourceLine" id="cb89-3" title="3">  <span class="kw">function</span> <span class="at">changeBy</span>(val) <span class="op">{</span></a>
<a class="sourceLine" id="cb89-4" title="4">    privateCounter <span class="op">+=</span> val<span class="op">;</span></a>
<a class="sourceLine" id="cb89-5" title="5">  <span class="op">}</span></a>
<a class="sourceLine" id="cb89-6" title="6"></a>
<a class="sourceLine" id="cb89-7" title="7">  <span class="cf">return</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb89-8" title="8">    <span class="dt">increment</span><span class="op">:</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb89-9" title="9">      <span class="at">changeBy</span>(<span class="dv">1</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb89-10" title="10">    <span class="op">},</span></a>
<a class="sourceLine" id="cb89-11" title="11"></a>
<a class="sourceLine" id="cb89-12" title="12">    <span class="dt">decrement</span><span class="op">:</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb89-13" title="13">      <span class="at">changeBy</span>(<span class="op">-</span><span class="dv">1</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb89-14" title="14">    <span class="op">},</span></a>
<a class="sourceLine" id="cb89-15" title="15"></a>
<a class="sourceLine" id="cb89-16" title="16">    <span class="dt">value</span><span class="op">:</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb89-17" title="17">      <span class="cf">return</span> privateCounter<span class="op">;</span></a>
<a class="sourceLine" id="cb89-18" title="18">    <span class="op">}</span></a>
<a class="sourceLine" id="cb89-19" title="19">  <span class="op">};</span></a>
<a class="sourceLine" id="cb89-20" title="20"><span class="op">}</span>)()<span class="op">;</span></a>
<a class="sourceLine" id="cb89-21" title="21"></a>
<a class="sourceLine" id="cb89-22" title="22"><span class="va">console</span>.<span class="at">log</span>(<span class="va">counter</span>.<span class="at">value</span>())<span class="op">;</span>  <span class="co">// 0.</span></a>
<a class="sourceLine" id="cb89-23" title="23"></a>
<a class="sourceLine" id="cb89-24" title="24"><span class="va">counter</span>.<span class="at">increment</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb89-25" title="25"><span class="va">counter</span>.<span class="at">increment</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb89-26" title="26"><span class="va">console</span>.<span class="at">log</span>(<span class="va">counter</span>.<span class="at">value</span>())<span class="op">;</span>  <span class="co">// 2.</span></a>
<a class="sourceLine" id="cb89-27" title="27"></a>
<a class="sourceLine" id="cb89-28" title="28"><span class="va">counter</span>.<span class="at">decrement</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb89-29" title="29"><span class="va">console</span>.<span class="at">log</span>(<span class="va">counter</span>.<span class="at">value</span>())<span class="op">;</span>  <span class="co">// 1.</span></a></code></pre></div>
<p>In previous examples, each closure had its own lexical environment. Here though, there is a single lexical environment that is shared by the three functions: <code>counter.increment</code>, <code>counter.decrement</code>, and <code>counter.value</code>.</p>
<p>The shared lexical environment is created in the body of an anonymous function, <em>which is executed as soon as it has been defined</em> (also known as an <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/IIFE">IIFE</a>). The lexical environment contains two private items: a variable called <code>privateCounter</code>, and a function called <code>changeBy</code>. You can't access either of these private members from outside the anonymous function. Instead, you can access them using the three public functions that are returned from the anonymous wrapper.</p>
<p>Those three public functions are closures that share the same lexical environment. Thanks to JavaScript's lexical scoping, they each have access to the <code>privateCounter</code> variable and the <code>changeBy</code> function.</p>
<div class="note">
<p>Notice that I defined an anonymous function that creates a counter, and then I call it immediately and assign the result to the <code>counter</code> variable. You could store this function in a separate variable <code>makeCounter</code>, and then use it to create several counters.</p>
</div>
<div class="sourceCode" id="cb90"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb90-1" title="1"><span class="kw">var</span> makeCounter <span class="op">=</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb90-2" title="2">  <span class="kw">var</span> privateCounter <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></a>
<a class="sourceLine" id="cb90-3" title="3">  <span class="kw">function</span> <span class="at">changeBy</span>(val) <span class="op">{</span></a>
<a class="sourceLine" id="cb90-4" title="4">    privateCounter <span class="op">+=</span> val<span class="op">;</span></a>
<a class="sourceLine" id="cb90-5" title="5">  <span class="op">}</span></a>
<a class="sourceLine" id="cb90-6" title="6">  <span class="cf">return</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb90-7" title="7">    <span class="dt">increment</span><span class="op">:</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb90-8" title="8">      <span class="at">changeBy</span>(<span class="dv">1</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb90-9" title="9">    <span class="op">},</span></a>
<a class="sourceLine" id="cb90-10" title="10"></a>
<a class="sourceLine" id="cb90-11" title="11">    <span class="dt">decrement</span><span class="op">:</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb90-12" title="12">      <span class="at">changeBy</span>(<span class="op">-</span><span class="dv">1</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb90-13" title="13">    <span class="op">},</span></a>
<a class="sourceLine" id="cb90-14" title="14"></a>
<a class="sourceLine" id="cb90-15" title="15">    <span class="dt">value</span><span class="op">:</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb90-16" title="16">      <span class="cf">return</span> privateCounter<span class="op">;</span></a>
<a class="sourceLine" id="cb90-17" title="17">    <span class="op">}</span></a>
<a class="sourceLine" id="cb90-18" title="18">  <span class="op">}</span></a>
<a class="sourceLine" id="cb90-19" title="19"><span class="op">};</span></a>
<a class="sourceLine" id="cb90-20" title="20"></a>
<a class="sourceLine" id="cb90-21" title="21"><span class="kw">var</span> counter1 <span class="op">=</span> <span class="at">makeCounter</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb90-22" title="22"><span class="kw">var</span> counter2 <span class="op">=</span> <span class="at">makeCounter</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb90-23" title="23"></a>
<a class="sourceLine" id="cb90-24" title="24"><span class="at">alert</span>(<span class="va">counter1</span>.<span class="at">value</span>())<span class="op">;</span>  <span class="co">// 0.</span></a>
<a class="sourceLine" id="cb90-25" title="25"></a>
<a class="sourceLine" id="cb90-26" title="26"><span class="va">counter1</span>.<span class="at">increment</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb90-27" title="27"><span class="va">counter1</span>.<span class="at">increment</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb90-28" title="28"><span class="at">alert</span>(<span class="va">counter1</span>.<span class="at">value</span>())<span class="op">;</span> <span class="co">// 2.</span></a>
<a class="sourceLine" id="cb90-29" title="29"></a>
<a class="sourceLine" id="cb90-30" title="30"><span class="va">counter1</span>.<span class="at">decrement</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb90-31" title="31"><span class="at">alert</span>(<span class="va">counter1</span>.<span class="at">value</span>())<span class="op">;</span> <span class="co">// 1.</span></a>
<a class="sourceLine" id="cb90-32" title="32"><span class="at">alert</span>(<span class="va">counter2</span>.<span class="at">value</span>())<span class="op">;</span> <span class="co">// 0.</span></a></code></pre></div>
<p>Notice how the two counters maintain their independence from one another. Each closure references a different version of the <code>privateCounter</code> variable through its own closure. Each time one of the counters is called, its lexical environment changes by changing the value of this variable. Changes to the variable value in one closure don't affect the value in the other closure.</p>
<div class="note">
<p>Using closures in this way provides benefits that are normally associated with object-oriented programming. In particular, <em>data hiding</em> and <em>encapsulation</em>.</p>
</div>
<h2 id="Closure_Scope_Chain">Closure Scope Chain</h2>
<p>Every closure has three scopes:</p>
<ul>
<li>Local Scope (Own scope)</li>
<li>Outer Functions Scope</li>
<li>Global Scope</li>
</ul>
<p>A common mistake is not realizing that, in the case where the outer function is itself a nested function, access to the outer function's scope includes the enclosing scope of the outer function—effectively creating a chain of function scopes. To demonstrate, consider the following example code.</p>
<div class="sourceCode" id="cb91"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb91-1" title="1"><span class="co">// global scope</span></a>
<a class="sourceLine" id="cb91-2" title="2"><span class="kw">var</span> e <span class="op">=</span> <span class="dv">10</span><span class="op">;</span></a>
<a class="sourceLine" id="cb91-3" title="3"><span class="kw">function</span> <span class="at">sum</span>(a)<span class="op">{</span></a>
<a class="sourceLine" id="cb91-4" title="4">  <span class="cf">return</span> <span class="kw">function</span>(b)<span class="op">{</span></a>
<a class="sourceLine" id="cb91-5" title="5">    <span class="cf">return</span> <span class="kw">function</span>(c)<span class="op">{</span></a>
<a class="sourceLine" id="cb91-6" title="6">      <span class="co">// outer functions scope</span></a>
<a class="sourceLine" id="cb91-7" title="7">      <span class="cf">return</span> <span class="kw">function</span>(d)<span class="op">{</span></a>
<a class="sourceLine" id="cb91-8" title="8">        <span class="co">// local scope</span></a>
<a class="sourceLine" id="cb91-9" title="9">        <span class="cf">return</span> a <span class="op">+</span> b <span class="op">+</span> c <span class="op">+</span> d <span class="op">+</span> e<span class="op">;</span></a>
<a class="sourceLine" id="cb91-10" title="10">      <span class="op">}</span></a>
<a class="sourceLine" id="cb91-11" title="11">    <span class="op">}</span></a>
<a class="sourceLine" id="cb91-12" title="12">  <span class="op">}</span></a>
<a class="sourceLine" id="cb91-13" title="13"><span class="op">}</span></a>
<a class="sourceLine" id="cb91-14" title="14"></a>
<a class="sourceLine" id="cb91-15" title="15"><span class="va">console</span>.<span class="at">log</span>(<span class="at">sum</span>(<span class="dv">1</span>)(<span class="dv">2</span>)(<span class="dv">3</span>)(<span class="dv">4</span>))<span class="op">;</span> <span class="co">// log 20</span></a>
<a class="sourceLine" id="cb91-16" title="16"></a>
<a class="sourceLine" id="cb91-17" title="17"><span class="co">// You can also write without anonymous functions:</span></a>
<a class="sourceLine" id="cb91-18" title="18"></a>
<a class="sourceLine" id="cb91-19" title="19"><span class="co">// global scope</span></a>
<a class="sourceLine" id="cb91-20" title="20"><span class="kw">var</span> e <span class="op">=</span> <span class="dv">10</span><span class="op">;</span></a>
<a class="sourceLine" id="cb91-21" title="21"><span class="kw">function</span> <span class="at">sum</span>(a)<span class="op">{</span></a>
<a class="sourceLine" id="cb91-22" title="22">  <span class="cf">return</span> <span class="kw">function</span> <span class="at">sum2</span>(b)<span class="op">{</span></a>
<a class="sourceLine" id="cb91-23" title="23">    <span class="cf">return</span> <span class="kw">function</span> <span class="at">sum3</span>(c)<span class="op">{</span></a>
<a class="sourceLine" id="cb91-24" title="24">      <span class="co">// outer functions scope</span></a>
<a class="sourceLine" id="cb91-25" title="25">      <span class="cf">return</span> <span class="kw">function</span> <span class="at">sum4</span>(d)<span class="op">{</span></a>
<a class="sourceLine" id="cb91-26" title="26">        <span class="co">// local scope</span></a>
<a class="sourceLine" id="cb91-27" title="27">        <span class="cf">return</span> a <span class="op">+</span> b <span class="op">+</span> c <span class="op">+</span> d <span class="op">+</span> e<span class="op">;</span></a>
<a class="sourceLine" id="cb91-28" title="28">      <span class="op">}</span></a>
<a class="sourceLine" id="cb91-29" title="29">    <span class="op">}</span></a>
<a class="sourceLine" id="cb91-30" title="30">  <span class="op">}</span></a>
<a class="sourceLine" id="cb91-31" title="31"><span class="op">}</span></a>
<a class="sourceLine" id="cb91-32" title="32"></a>
<a class="sourceLine" id="cb91-33" title="33"><span class="kw">var</span> s <span class="op">=</span> <span class="at">sum</span>(<span class="dv">1</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb91-34" title="34"><span class="kw">var</span> s1 <span class="op">=</span> <span class="at">s</span>(<span class="dv">2</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb91-35" title="35"><span class="kw">var</span> s2 <span class="op">=</span> <span class="at">s1</span>(<span class="dv">3</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb91-36" title="36"><span class="kw">var</span> s3 <span class="op">=</span> <span class="at">s2</span>(<span class="dv">4</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb91-37" title="37"><span class="va">console</span>.<span class="at">log</span>(s3) <span class="co">//log 20</span></a></code></pre></div>
<p>In the example above, there's a series of nested functions, all of which have access to the outer functions' scope. In this context, we can say that closures have access to <em>all</em> outer function scopes.</p>
<h2 id="Creating_closures_in_loops_A_common_mistake">Creating closures in loops: A common mistake</h2>
<p>Prior to the introduction of the <a href="Reference/Statements/let.html" title="let"><code>let</code></a> keyword in ECMAScript 2015, a common problem with closures occurred when you created them inside a loop. To demonstrate, consider the following example code.</p>
<div class="sourceCode" id="cb92"><pre class="sourceCode brush: html notranslate"><code class="sourceCode html"><a class="sourceLine" id="cb92-1" title="1"><span class="kw">&lt;p</span><span class="ot"> id=</span><span class="st">&quot;help&quot;</span><span class="kw">&gt;</span>Helpful notes will appear here<span class="kw">&lt;/p&gt;</span></a>
<a class="sourceLine" id="cb92-2" title="2"><span class="kw">&lt;p&gt;</span>E-mail: <span class="kw">&lt;input</span><span class="ot"> type=</span><span class="st">&quot;text&quot;</span><span class="ot"> id=</span><span class="st">&quot;email&quot;</span><span class="ot"> name=</span><span class="st">&quot;email&quot;</span><span class="kw">&gt;&lt;/p&gt;</span></a>
<a class="sourceLine" id="cb92-3" title="3"><span class="kw">&lt;p&gt;</span>Name: <span class="kw">&lt;input</span><span class="ot"> type=</span><span class="st">&quot;text&quot;</span><span class="ot"> id=</span><span class="st">&quot;name&quot;</span><span class="ot"> name=</span><span class="st">&quot;name&quot;</span><span class="kw">&gt;&lt;/p&gt;</span></a>
<a class="sourceLine" id="cb92-4" title="4"><span class="kw">&lt;p&gt;</span>Age: <span class="kw">&lt;input</span><span class="ot"> type=</span><span class="st">&quot;text&quot;</span><span class="ot"> id=</span><span class="st">&quot;age&quot;</span><span class="ot"> name=</span><span class="st">&quot;age&quot;</span><span class="kw">&gt;&lt;/p&gt;</span></a></code></pre></div>
<div class="sourceCode" id="cb93"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb93-1" title="1"><span class="kw">function</span> <span class="at">showHelp</span>(help) <span class="op">{</span></a>
<a class="sourceLine" id="cb93-2" title="2">  <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;help&#39;</span>).<span class="at">innerHTML</span> <span class="op">=</span> help<span class="op">;</span></a>
<a class="sourceLine" id="cb93-3" title="3"><span class="op">}</span></a>
<a class="sourceLine" id="cb93-4" title="4"></a>
<a class="sourceLine" id="cb93-5" title="5"><span class="kw">function</span> <span class="at">setupHelp</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb93-6" title="6">  <span class="kw">var</span> helpText <span class="op">=</span> [</a>
<a class="sourceLine" id="cb93-7" title="7">      <span class="op">{</span><span class="st">&#39;id&#39;</span><span class="op">:</span> <span class="st">&#39;email&#39;</span><span class="op">,</span> <span class="st">&#39;help&#39;</span><span class="op">:</span> <span class="st">&#39;Your e-mail address&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb93-8" title="8">      <span class="op">{</span><span class="st">&#39;id&#39;</span><span class="op">:</span> <span class="st">&#39;name&#39;</span><span class="op">,</span> <span class="st">&#39;help&#39;</span><span class="op">:</span> <span class="st">&#39;Your full name&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb93-9" title="9">      <span class="op">{</span><span class="st">&#39;id&#39;</span><span class="op">:</span> <span class="st">&#39;age&#39;</span><span class="op">,</span> <span class="st">&#39;help&#39;</span><span class="op">:</span> <span class="st">&#39;Your age (you must be over 16)&#39;</span><span class="op">}</span></a>
<a class="sourceLine" id="cb93-10" title="10">    ]<span class="op">;</span></a>
<a class="sourceLine" id="cb93-11" title="11"></a>
<a class="sourceLine" id="cb93-12" title="12">  <span class="cf">for</span> (<span class="kw">var</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="va">helpText</span>.<span class="at">length</span><span class="op">;</span> i<span class="op">++</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb93-13" title="13">    <span class="kw">var</span> item <span class="op">=</span> helpText[i]<span class="op">;</span></a>
<a class="sourceLine" id="cb93-14" title="14">    <span class="va">document</span>.<span class="at">getElementById</span>(<span class="va">item</span>.<span class="at">id</span>).<span class="at">onfocus</span> <span class="op">=</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb93-15" title="15">      <span class="at">showHelp</span>(<span class="va">item</span>.<span class="at">help</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb93-16" title="16">    <span class="op">}</span></a>
<a class="sourceLine" id="cb93-17" title="17">  <span class="op">}</span></a>
<a class="sourceLine" id="cb93-18" title="18"><span class="op">}</span></a>
<a class="sourceLine" id="cb93-19" title="19"></a>
<a class="sourceLine" id="cb93-20" title="20"><span class="at">setupHelp</span>()<span class="op">;</span></a></code></pre></div>
<p>Try running the code in <a href="../../../../../external.html?link=https://jsfiddle.net/v7gjv/8164/" class="external">JSFiddle</a>.</p>
<p>The <code>helpText</code> array defines three helpful hints, each associated with the ID of an input field in the document. The loop cycles through these definitions, hooking up an <code>onfocus</code> event to each one that shows the associated help method.</p>
<p>If you try this code out, you'll see that it doesn't work as expected. No matter what field you focus on, the message about your age will be displayed.</p>
<p>The reason for this is that the functions assigned to <code>onfocus</code> are closures; they consist of the function definition and the captured environment from the <code>setupHelp</code> function's scope. Three closures have been created by the loop, but each one shares the same single lexical environment, which has a variable with changing values (<code>item</code>). This is because the variable <code>item</code> is declared with <code>var</code> and thus has function scope due to hoisting. The value of <code>item.help</code> is determined when the <code>onfocus</code> callbacks are executed. Because the loop has already run its course by that time, the <code>item</code> variable object (shared by all three closures) has been left pointing to the last entry in the <code>helpText</code> list.</p>
<p>One solution in this case is to use more closures: in particular, to use a function factory as described earlier:</p>
<div class="sourceCode" id="cb94"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb94-1" title="1"><span class="kw">function</span> <span class="at">showHelp</span>(help) <span class="op">{</span></a>
<a class="sourceLine" id="cb94-2" title="2">  <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;help&#39;</span>).<span class="at">innerHTML</span> <span class="op">=</span> help<span class="op">;</span></a>
<a class="sourceLine" id="cb94-3" title="3"><span class="op">}</span></a>
<a class="sourceLine" id="cb94-4" title="4"></a>
<a class="sourceLine" id="cb94-5" title="5"><span class="kw">function</span> <span class="at">makeHelpCallback</span>(help) <span class="op">{</span></a>
<a class="sourceLine" id="cb94-6" title="6">  <span class="cf">return</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb94-7" title="7">    <span class="at">showHelp</span>(help)<span class="op">;</span></a>
<a class="sourceLine" id="cb94-8" title="8">  <span class="op">};</span></a>
<a class="sourceLine" id="cb94-9" title="9"><span class="op">}</span></a>
<a class="sourceLine" id="cb94-10" title="10"></a>
<a class="sourceLine" id="cb94-11" title="11"><span class="kw">function</span> <span class="at">setupHelp</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb94-12" title="12">  <span class="kw">var</span> helpText <span class="op">=</span> [</a>
<a class="sourceLine" id="cb94-13" title="13">      <span class="op">{</span><span class="st">&#39;id&#39;</span><span class="op">:</span> <span class="st">&#39;email&#39;</span><span class="op">,</span> <span class="st">&#39;help&#39;</span><span class="op">:</span> <span class="st">&#39;Your e-mail address&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb94-14" title="14">      <span class="op">{</span><span class="st">&#39;id&#39;</span><span class="op">:</span> <span class="st">&#39;name&#39;</span><span class="op">,</span> <span class="st">&#39;help&#39;</span><span class="op">:</span> <span class="st">&#39;Your full name&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb94-15" title="15">      <span class="op">{</span><span class="st">&#39;id&#39;</span><span class="op">:</span> <span class="st">&#39;age&#39;</span><span class="op">,</span> <span class="st">&#39;help&#39;</span><span class="op">:</span> <span class="st">&#39;Your age (you must be over 16)&#39;</span><span class="op">}</span></a>
<a class="sourceLine" id="cb94-16" title="16">    ]<span class="op">;</span></a>
<a class="sourceLine" id="cb94-17" title="17"></a>
<a class="sourceLine" id="cb94-18" title="18">  <span class="cf">for</span> (<span class="kw">var</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="va">helpText</span>.<span class="at">length</span><span class="op">;</span> i<span class="op">++</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb94-19" title="19">    <span class="kw">var</span> item <span class="op">=</span> helpText[i]<span class="op">;</span></a>
<a class="sourceLine" id="cb94-20" title="20">    <span class="va">document</span>.<span class="at">getElementById</span>(<span class="va">item</span>.<span class="at">id</span>).<span class="at">onfocus</span> <span class="op">=</span> <span class="at">makeHelpCallback</span>(<span class="va">item</span>.<span class="at">help</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb94-21" title="21">  <span class="op">}</span></a>
<a class="sourceLine" id="cb94-22" title="22"><span class="op">}</span></a>
<a class="sourceLine" id="cb94-23" title="23"></a>
<a class="sourceLine" id="cb94-24" title="24"><span class="at">setupHelp</span>()<span class="op">;</span></a></code></pre></div>
<p>Run the code using <a href="../../../../../external.html?link=https://jsfiddle.net/v7gjv/9573/" class="external">this JSFiddle link</a>.</p>
<p>This works as expected. Rather than the callbacks all sharing a single lexical environment, the <code>makeHelpCallback</code> function creates <em>a new lexical environment</em> for each callback, in which <code>help</code> refers to the corresponding string from the <code>helpText</code> array.</p>
<p>One other way to write the above using anonymous closures is:</p>
<div class="sourceCode" id="cb95"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb95-1" title="1"><span class="kw">function</span> <span class="at">showHelp</span>(help) <span class="op">{</span></a>
<a class="sourceLine" id="cb95-2" title="2">  <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;help&#39;</span>).<span class="at">innerHTML</span> <span class="op">=</span> help<span class="op">;</span></a>
<a class="sourceLine" id="cb95-3" title="3"><span class="op">}</span></a>
<a class="sourceLine" id="cb95-4" title="4"></a>
<a class="sourceLine" id="cb95-5" title="5"><span class="kw">function</span> <span class="at">setupHelp</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb95-6" title="6">  <span class="kw">var</span> helpText <span class="op">=</span> [</a>
<a class="sourceLine" id="cb95-7" title="7">      <span class="op">{</span><span class="st">&#39;id&#39;</span><span class="op">:</span> <span class="st">&#39;email&#39;</span><span class="op">,</span> <span class="st">&#39;help&#39;</span><span class="op">:</span> <span class="st">&#39;Your e-mail address&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb95-8" title="8">      <span class="op">{</span><span class="st">&#39;id&#39;</span><span class="op">:</span> <span class="st">&#39;name&#39;</span><span class="op">,</span> <span class="st">&#39;help&#39;</span><span class="op">:</span> <span class="st">&#39;Your full name&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb95-9" title="9">      <span class="op">{</span><span class="st">&#39;id&#39;</span><span class="op">:</span> <span class="st">&#39;age&#39;</span><span class="op">,</span> <span class="st">&#39;help&#39;</span><span class="op">:</span> <span class="st">&#39;Your age (you must be over 16)&#39;</span><span class="op">}</span></a>
<a class="sourceLine" id="cb95-10" title="10">    ]<span class="op">;</span></a>
<a class="sourceLine" id="cb95-11" title="11"></a>
<a class="sourceLine" id="cb95-12" title="12">  <span class="cf">for</span> (<span class="kw">var</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="va">helpText</span>.<span class="at">length</span><span class="op">;</span> i<span class="op">++</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb95-13" title="13">    (<span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb95-14" title="14">       <span class="kw">var</span> item <span class="op">=</span> helpText[i]<span class="op">;</span></a>
<a class="sourceLine" id="cb95-15" title="15">       <span class="va">document</span>.<span class="at">getElementById</span>(<span class="va">item</span>.<span class="at">id</span>).<span class="at">onfocus</span> <span class="op">=</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb95-16" title="16">         <span class="at">showHelp</span>(<span class="va">item</span>.<span class="at">help</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb95-17" title="17">       <span class="op">}</span></a>
<a class="sourceLine" id="cb95-18" title="18">    <span class="op">}</span>)()<span class="op">;</span> <span class="co">// Immediate event listener attachment with the current value of item (preserved until iteration).</span></a>
<a class="sourceLine" id="cb95-19" title="19">  <span class="op">}</span></a>
<a class="sourceLine" id="cb95-20" title="20"><span class="op">}</span></a>
<a class="sourceLine" id="cb95-21" title="21"></a>
<a class="sourceLine" id="cb95-22" title="22"><span class="at">setupHelp</span>()<span class="op">;</span></a></code></pre></div>
<p>If you don't want to use more closures, you can use the <code>let</code> keyword introduced in ES2015 :</p>
<div class="sourceCode" id="cb96"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb96-1" title="1"><span class="kw">function</span> <span class="at">showHelp</span>(help) <span class="op">{</span></a>
<a class="sourceLine" id="cb96-2" title="2">  <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;help&#39;</span>).<span class="at">innerHTML</span> <span class="op">=</span> help<span class="op">;</span></a>
<a class="sourceLine" id="cb96-3" title="3"><span class="op">}</span></a>
<a class="sourceLine" id="cb96-4" title="4"></a>
<a class="sourceLine" id="cb96-5" title="5"><span class="kw">function</span> <span class="at">setupHelp</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb96-6" title="6">  <span class="kw">var</span> helpText <span class="op">=</span> [</a>
<a class="sourceLine" id="cb96-7" title="7">      <span class="op">{</span><span class="st">&#39;id&#39;</span><span class="op">:</span> <span class="st">&#39;email&#39;</span><span class="op">,</span> <span class="st">&#39;help&#39;</span><span class="op">:</span> <span class="st">&#39;Your e-mail address&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb96-8" title="8">      <span class="op">{</span><span class="st">&#39;id&#39;</span><span class="op">:</span> <span class="st">&#39;name&#39;</span><span class="op">,</span> <span class="st">&#39;help&#39;</span><span class="op">:</span> <span class="st">&#39;Your full name&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb96-9" title="9">      <span class="op">{</span><span class="st">&#39;id&#39;</span><span class="op">:</span> <span class="st">&#39;age&#39;</span><span class="op">,</span> <span class="st">&#39;help&#39;</span><span class="op">:</span> <span class="st">&#39;Your age (you must be over 16)&#39;</span><span class="op">}</span></a>
<a class="sourceLine" id="cb96-10" title="10">    ]<span class="op">;</span></a>
<a class="sourceLine" id="cb96-11" title="11"></a>
<a class="sourceLine" id="cb96-12" title="12">  <span class="cf">for</span> (<span class="kw">let</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="va">helpText</span>.<span class="at">length</span><span class="op">;</span> i<span class="op">++</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb96-13" title="13">    <span class="kw">let</span> item <span class="op">=</span> helpText[i]<span class="op">;</span></a>
<a class="sourceLine" id="cb96-14" title="14">    <span class="va">document</span>.<span class="at">getElementById</span>(<span class="va">item</span>.<span class="at">id</span>).<span class="at">onfocus</span> <span class="op">=</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb96-15" title="15">      <span class="at">showHelp</span>(<span class="va">item</span>.<span class="at">help</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb96-16" title="16">    <span class="op">}</span></a>
<a class="sourceLine" id="cb96-17" title="17">  <span class="op">}</span></a>
<a class="sourceLine" id="cb96-18" title="18"><span class="op">}</span></a>
<a class="sourceLine" id="cb96-19" title="19"></a>
<a class="sourceLine" id="cb96-20" title="20"><span class="at">setupHelp</span>()<span class="op">;</span></a></code></pre></div>
<p>This example uses <code>let</code> instead of <code>var</code>, so every closure binds the block-scoped variable, meaning that no additional closures are required.</p>
<p>Another alternative could be to use <code>forEach()</code> to iterate over the <code>helpText</code> array and attach a listener to each <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input" title="The HTML &lt;input&gt; element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent."><code>&lt;input&gt;</code></a>, as shown:</p>
<div class="sourceCode" id="cb97"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb97-1" title="1"><span class="kw">function</span> <span class="at">showHelp</span>(help) <span class="op">{</span></a>
<a class="sourceLine" id="cb97-2" title="2">  <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;help&#39;</span>).<span class="at">innerHTML</span> <span class="op">=</span> help<span class="op">;</span></a>
<a class="sourceLine" id="cb97-3" title="3"><span class="op">}</span></a>
<a class="sourceLine" id="cb97-4" title="4"></a>
<a class="sourceLine" id="cb97-5" title="5"><span class="kw">function</span> <span class="at">setupHelp</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb97-6" title="6">  <span class="kw">var</span> helpText <span class="op">=</span> [</a>
<a class="sourceLine" id="cb97-7" title="7">      <span class="op">{</span><span class="st">&#39;id&#39;</span><span class="op">:</span> <span class="st">&#39;email&#39;</span><span class="op">,</span> <span class="st">&#39;help&#39;</span><span class="op">:</span> <span class="st">&#39;Your e-mail address&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb97-8" title="8">      <span class="op">{</span><span class="st">&#39;id&#39;</span><span class="op">:</span> <span class="st">&#39;name&#39;</span><span class="op">,</span> <span class="st">&#39;help&#39;</span><span class="op">:</span> <span class="st">&#39;Your full name&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb97-9" title="9">      <span class="op">{</span><span class="st">&#39;id&#39;</span><span class="op">:</span> <span class="st">&#39;age&#39;</span><span class="op">,</span> <span class="st">&#39;help&#39;</span><span class="op">:</span> <span class="st">&#39;Your age (you must be over 16)&#39;</span><span class="op">}</span></a>
<a class="sourceLine" id="cb97-10" title="10">    ]<span class="op">;</span></a>
<a class="sourceLine" id="cb97-11" title="11"></a>
<a class="sourceLine" id="cb97-12" title="12">  <span class="va">helpText</span>.<span class="at">forEach</span>(<span class="kw">function</span>(text) <span class="op">{</span></a>
<a class="sourceLine" id="cb97-13" title="13">    <span class="va">document</span>.<span class="at">getElementById</span>(<span class="va">text</span>.<span class="at">id</span>).<span class="at">onfocus</span> <span class="op">=</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb97-14" title="14">      <span class="at">showHelp</span>(<span class="va">text</span>.<span class="at">help</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb97-15" title="15">    <span class="op">}</span></a>
<a class="sourceLine" id="cb97-16" title="16">  <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb97-17" title="17"><span class="op">}</span></a>
<a class="sourceLine" id="cb97-18" title="18"></a>
<a class="sourceLine" id="cb97-19" title="19"><span class="at">setupHelp</span>()<span class="op">;</span></a></code></pre></div>
<h2 id="Performance_considerations">Performance considerations</h2>
<p>It is unwise to unnecessarily create functions within other functions if closures are not needed for a particular task, as it will negatively affect script performance both in terms of processing speed and memory consumption.</p>
<p>For instance, when creating a new object/class, methods should normally be associated to the object's prototype rather than defined into the object constructor. The reason is that whenever the constructor is called, the methods would get reassigned (that is, for every object creation).</p>
<p>Consider the following case:</p>
<div class="sourceCode" id="cb98"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb98-1" title="1"><span class="kw">function</span> <span class="at">MyObject</span>(name<span class="op">,</span> message) <span class="op">{</span></a>
<a class="sourceLine" id="cb98-2" title="2">  <span class="kw">this</span>.<span class="at">name</span> <span class="op">=</span> <span class="va">name</span>.<span class="at">toString</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb98-3" title="3">  <span class="kw">this</span>.<span class="at">message</span> <span class="op">=</span> <span class="va">message</span>.<span class="at">toString</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb98-4" title="4">  <span class="kw">this</span>.<span class="at">getName</span> <span class="op">=</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb98-5" title="5">    <span class="cf">return</span> <span class="kw">this</span>.<span class="at">name</span><span class="op">;</span></a>
<a class="sourceLine" id="cb98-6" title="6">  <span class="op">};</span></a>
<a class="sourceLine" id="cb98-7" title="7"></a>
<a class="sourceLine" id="cb98-8" title="8">  <span class="kw">this</span>.<span class="at">getMessage</span> <span class="op">=</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb98-9" title="9">    <span class="cf">return</span> <span class="kw">this</span>.<span class="at">message</span><span class="op">;</span></a>
<a class="sourceLine" id="cb98-10" title="10">  <span class="op">};</span></a>
<a class="sourceLine" id="cb98-11" title="11"><span class="op">}</span></a></code></pre></div>
<p>Because the previous code does not take advantage of the benefits of using closures in this particular instance, we could instead rewrite it to avoid using closure as follows:</p>
<div class="sourceCode" id="cb99"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb99-1" title="1"><span class="kw">function</span> <span class="at">MyObject</span>(name<span class="op">,</span> message) <span class="op">{</span></a>
<a class="sourceLine" id="cb99-2" title="2">  <span class="kw">this</span>.<span class="at">name</span> <span class="op">=</span> <span class="va">name</span>.<span class="at">toString</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb99-3" title="3">  <span class="kw">this</span>.<span class="at">message</span> <span class="op">=</span> <span class="va">message</span>.<span class="at">toString</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb99-4" title="4"><span class="op">}</span></a>
<a class="sourceLine" id="cb99-5" title="5"><span class="va">MyObject</span>.<span class="at">prototype</span> <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb99-6" title="6">  <span class="dt">getName</span><span class="op">:</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb99-7" title="7">    <span class="cf">return</span> <span class="kw">this</span>.<span class="at">name</span><span class="op">;</span></a>
<a class="sourceLine" id="cb99-8" title="8">  <span class="op">},</span></a>
<a class="sourceLine" id="cb99-9" title="9">  <span class="dt">getMessage</span><span class="op">:</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb99-10" title="10">    <span class="cf">return</span> <span class="kw">this</span>.<span class="at">message</span><span class="op">;</span></a>
<a class="sourceLine" id="cb99-11" title="11">  <span class="op">}</span></a>
<a class="sourceLine" id="cb99-12" title="12"><span class="op">};</span></a></code></pre></div>
<p>However, redefining the prototype is not recommended. The following example instead appends to the existing prototype:</p>
<div class="sourceCode" id="cb100"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb100-1" title="1"><span class="kw">function</span> <span class="at">MyObject</span>(name<span class="op">,</span> message) <span class="op">{</span></a>
<a class="sourceLine" id="cb100-2" title="2">  <span class="kw">this</span>.<span class="at">name</span> <span class="op">=</span> <span class="va">name</span>.<span class="at">toString</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb100-3" title="3">  <span class="kw">this</span>.<span class="at">message</span> <span class="op">=</span> <span class="va">message</span>.<span class="at">toString</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb100-4" title="4"><span class="op">}</span></a>
<a class="sourceLine" id="cb100-5" title="5"><span class="va">MyObject</span>.<span class="va">prototype</span>.<span class="at">getName</span> <span class="op">=</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb100-6" title="6">  <span class="cf">return</span> <span class="kw">this</span>.<span class="at">name</span><span class="op">;</span></a>
<a class="sourceLine" id="cb100-7" title="7"><span class="op">};</span></a>
<a class="sourceLine" id="cb100-8" title="8"><span class="va">MyObject</span>.<span class="va">prototype</span>.<span class="at">getMessage</span> <span class="op">=</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb100-9" title="9">  <span class="cf">return</span> <span class="kw">this</span>.<span class="at">message</span><span class="op">;</span></a>
<a class="sourceLine" id="cb100-10" title="10"><span class="op">};</span></a></code></pre></div>
<p>In the two previous examples, the inherited prototype can be shared by all objects and the method definitions need not occur at every object creation. See <a href="Guide/Details_of_the_Object_Model.html">Details of the Object Model</a> for more.</p>
<div class="metadata">
<section class="document-meta">
<h4 id="metadata-1">Metadata</h4>
<ul>
<li><strong>Last modified:</strong> Sep 20, 2020, <a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Closures$history">by MDN contributors</a></li>
</ul>
</section>
</div>
</div>
<div id="sidebar-quicklinks" class="sidebar">
<div class="quick-links">
<div class="quick-links-head sidebar-heading">
Related Topics
</div>
<div>
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong><em>JavaScript</em></strong></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong>Tutorials:</strong></a></li>
<li>Complete beginners
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics">JavaScript basics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps">JavaScript first steps</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks">JavaScript building blocks</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Introducing JavaScript objects</a></li>
</ol></li>
<li>JavaScript Guide
<ol>
<li><a href="Guide/Introduction.html">Introduction</a></li>
<li><a href="Guide/Grammar_and_Types.html">Grammar and types</a></li>
<li><a href="Guide/Control_flow_and_error_handling.html">Control flow and error handling</a></li>
<li><a href="Guide/Loops_and_iteration.html">Loops and iteration</a></li>
<li><a href="Guide/Functions.html">Functions</a></li>
<li><a href="Guide/Expressions_and_Operators.html">Expressions and operators</a></li>
<li><a href="Guide/Numbers_and_dates.html">Numbers and dates</a></li>
<li><a href="Guide/Text_formatting.html">Text formatting</a></li>
<li><a href="Guide/Regular_Expressions.html">Regular expressions</a></li>
<li><a href="Guide/Indexed_collections.html">Indexed collections</a></li>
<li><a href="Guide/Keyed_collections.html">Keyed collections</a></li>
<li><a href="Guide/Working_with_Objects.html">Working with objects</a></li>
<li><a href="Guide/Details_of_the_Object_Model.html">Details of the object model</a></li>
<li><a href="Guide/Using_promises.html">Using promises</a></li>
<li><a href="Guide/Iterators_and_generators.html">Iterators and generators</a></li>
<li><a href="Guide/Meta_programming.html">Meta programming</a></li>
<li><a href="Guide/Modules.html">JavaScript modules</a></li>
</ol></li>
<li>Intermediate
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks">Client-side JavaScript frameworks</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs">Client-side web APIs</a></li>
<li><a href="A_re-introduction_to_JavaScript.html">A re-introduction to JavaScript</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Equality_comparisons_and_sameness.html">Equality comparisons and sameness</a></li>
<li><a href="Closures.html">Closures</a></li>
</ol></li>
<li>Advanced
<ol>
<li><a href="Inheritance_and_the_prototype_chain.html">Inheritance and the prototype chain</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Typed_arrays.html">JavaScript typed arrays</a></li>
<li><a href="Memory_Management.html">Memory Management</a></li>
<li><a href="EventLoop.html">Concurrency model and Event Loop</a></li>
</ol></li>
<li><strong><a href="Reference.html">References:</a></strong></li>
<li>Built-in objects
<ol>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/AggregateError.html" title="The AggregateError object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by Promise.any(), when all promises passed to it reject.">AggregateError</a></li>
<li><a href="Reference/Global_Objects/Array.html" title="The JavaScript Array class is a global object that is used in the construction of arrays; which are high-level, list-like objects.">Array</a></li>
<li><a href="Reference/Global_Objects/ArrayBuffer.html" title="The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer.">ArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/AsyncFunction.html" title="The AsyncFunction constructor creates a new async function object. In JavaScript, every asynchronous function is actually an AsyncFunction object.">AsyncFunction</a></li>
<li><a href="Reference/Global_Objects/Atomics.html" title="The Atomics object provides atomic operations as static methods. They are used with SharedArrayBuffer and ArrayBuffer objects.">Atomics</a></li>
<li><a href="Reference/Global_Objects/BigInt.html" title="BigInt is a built-in object that provides a way to represent whole numbers larger than 253 - 1, which is the largest number JavaScript can reliably represent with the Number primitive and represented by the Number.MAX_SAFE_INTEGER constant. BigInt can be used for arbitrarily large integers.">BigInt</a></li>
<li><a href="Reference/Global_Objects/BigInt64Array.html" title="The BigInt64Array typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigInt64Array</a></li>
<li><a href="Reference/Global_Objects/BigUint64Array.html" title="The BigUint64Array typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigUint64Array</a></li>
<li><a href="Reference/Global_Objects/Boolean.html" title="The Boolean object is an object wrapper for a boolean value.">Boolean</a></li>
<li><a href="Reference/Global_Objects/DataView.html" title="The DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform&#39;s endianness.">DataView</a></li>
<li><a href="Reference/Global_Objects/Date.html" title="JavaScript Date objects represent a single moment in time in a platform-independent format.">Date</a></li>
<li><a href="Reference/Global_Objects/Error.html" title="Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.">Error</a></li>
<li><a href="Reference/Global_Objects/EvalError.html" title="The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.">EvalError</a></li>
<li><a href="Reference/Global_Objects/FinalizationRegistry.html" title="A FinalizationRegistry object lets you request a callback when an object is garbage-collected.">FinalizationRegistry</a></li>
<li><a href="Reference/Global_Objects/Float32Array.html" title="The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float32Array</a></li>
<li><a href="Reference/Global_Objects/Float64Array.html" title="The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float64Array</a></li>
<li><a href="Reference/Global_Objects/Function.html" title="Every JavaScript function is actually a Function object. This can be seen with the code (function(){}).constructor === Function, which returns true.">Function</a></li>
<li><a href="Reference/Global_Objects/Generator.html" title="The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.">Generator</a></li>
<li><a href="Reference/Global_Objects/GeneratorFunction.html" title="The GeneratorFunction constructor creates a new generator function object. In JavaScript, every generator function is actually a GeneratorFunction object.">GeneratorFunction</a></li>
<li><a href="Reference/Global_Objects/Infinity.html" title="The global property Infinity is a numeric value representing infinity.">Infinity</a></li>
<li><a href="Reference/Global_Objects/Int16Array.html" title="The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int16Array</a></li>
<li><a href="Reference/Global_Objects/Int32Array.html" title="The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int32Array</a></li>
<li><a href="Reference/Global_Objects/Int8Array.html" title="The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int8Array</a></li>
<li><a href="Reference/Global_Objects/InternalError.html" title="The InternalError object indicates an error that occurred internally in the JavaScript engine.">InternalError</a></li>
<li><a href="Reference/Global_Objects/Intl.html" title="The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The Intl object provides access to several constructors as well as functionality common to the internationalization constructors and other language sensitive functions.">Intl</a></li>
<li><a href="Reference/Global_Objects/JSON.html" title="The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can&#39;t be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.">JSON</a></li>
<li><a href="Reference/Global_Objects/Map.html" title="The Map object holds key-value pairs and remembers the original insertion order of the keys.">Map</a></li>
<li><a href="Reference/Global_Objects/Math.html" title="Math is a built-in object that has properties and methods for mathematical constants and functions. It’s not a function object.">Math</a></li>
<li><a href="Reference/Global_Objects/NaN.html" title="The global NaN property is a value representing Not-A-Number.">NaN</a></li>
<li><a href="Reference/Global_Objects/Number.html" title="The Number constructor contains constants and methods for working with numbers. Values of other types can be converted to numbers using the Number() function.">Number</a></li>
<li><a href="Reference/Global_Objects/Object.html" title="The Object class represents one of JavaScript&#39;s data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.">Object</a></li>
<li><a href="Reference/Global_Objects/Promise.html" title="The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.">Promise</a></li>
<li><a href="Reference/Global_Objects/Proxy.html" title="The Proxy object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.">Proxy</a></li>
<li><a href="Reference/Global_Objects/RangeError.html" title="The RangeError object indicates an error when a value is not in the set or range of allowed values.">RangeError</a></li>
<li><a href="Reference/Global_Objects/ReferenceError.html" title="The ReferenceError object represents an error when a non-existent variable is referenced.">ReferenceError</a></li>
<li><a href="Reference/Global_Objects/Reflect.html" title="Reflect is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of proxy handlers. Reflect is not a function object, so it&#39;s not constructible.">Reflect</a></li>
<li><a href="Reference/Global_Objects/RegExp.html" title="The RegExp object is used for matching text with a pattern.">RegExp</a></li>
<li><a href="Reference/Global_Objects/Set.html" title="The Set object lets you store unique values of any type, whether primitive values or object references.">Set</a></li>
<li><a href="Reference/Global_Objects/SharedArrayBuffer.html" title="The SharedArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. Unlike an ArrayBuffer, a SharedArrayBuffer cannot become detached.">SharedArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/String.html" title="The String object is used to represent and manipulate a sequence of characters.">String</a></li>
<li><a href="Reference/Global_Objects/Symbol.html" title="The data type symbol is a primitive data type. The Symbol() function returns a value of type symbol, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class, but is incomplete as a constructor because it does not support the syntax &quot;new Symbol()&quot;.">Symbol</a></li>
<li><a href="Reference/Global_Objects/SyntaxError.html" title="The SyntaxError object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.">SyntaxError</a></li>
<li><a href="Reference/Global_Objects/TypeError.html" title="The TypeError object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.">TypeError</a></li>
<li><a href="Reference/Global_Objects/TypedArray.html" title="A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.">TypedArray</a></li>
<li><a href="Reference/Global_Objects/URIError.html" title="The URIError object represents an error when a global URI handling function was used in a wrong way.">URIError</a></li>
<li><a href="Reference/Global_Objects/Uint16Array.html" title="The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint16Array</a></li>
<li><a href="Reference/Global_Objects/Uint32Array.html" title="The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint32Array</a></li>
<li><a href="Reference/Global_Objects/Uint8Array.html" title="The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8Array</a></li>
<li><a href="Reference/Global_Objects/Uint8ClampedArray.html" title="The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8ClampedArray</a></li>
<li><a href="Reference/Global_Objects/WeakMap.html" title="The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.">WeakMap</a></li>
<li><a href="Reference/Global_Objects/WeakRef.html" title="A WeakRef object lets you hold a weak reference to another object, without preventing that object from getting garbage-collected.">WeakRef</a></li>
<li><a href="Reference/Global_Objects/WeakSet.html" title="The WeakSet object lets you store weakly held objects in a collection.">WeakSet</a></li>
<li><a href="Reference/Global_Objects/WebAssembly.html" title="The WebAssembly JavaScript object acts as the namespace for all WebAssembly-related functionality.">WebAssembly</a></li>
<li><a href="Reference/Global_Objects/decodeURI.html" title="The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or by a similar routine.">decodeURI()</a></li>
<li><a href="Reference/Global_Objects/decodeURIComponent.html" title="The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.">decodeURIComponent()</a></li>
<li><a href="Reference/Global_Objects/encodeURI.html" title="The encodeURI() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURI()</a></li>
<li><a href="Reference/Global_Objects/encodeURIComponent.html" title="The encodeURIComponent() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURIComponent()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/escape.html" title="The escape() function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.">escape()</a></li>
<li><a href="Reference/Global_Objects/eval.html" title="The eval() function evaluates JavaScript code represented as a string.">eval()</a></li>
<li><a href="Reference/Global_Objects/globalThis.html" title="The global globalThis property contains the global this value, which is akin to the global object.">globalThis</a></li>
<li><a href="Reference/Global_Objects/isFinite.html" title="The global isFinite() function determines whether the passed value is a finite number. If  needed, the parameter is first converted to a number.">isFinite()</a></li>
<li><a href="Reference/Global_Objects/isNaN.html" title="The isNaN() function determines whether a value is NaN or not. Note, coercion inside the isNaN function has interesting rules; you may alternatively want to use Number.isNaN(), as defined in ECMAScript 2015.">isNaN()</a></li>
<li><a href="Reference/Global_Objects/null.html" title="The value null represents the intentional absence of any object value. It is one of JavaScript&#39;s primitive values and is treated as falsy for boolean operations.">null</a></li>
<li><a href="Reference/Global_Objects/parseFloat.html" title="The parseFloat() function parses an argument (converting it to a string first if needed) and returns a floating point number.">parseFloat()</a></li>
<li><a href="Reference/Global_Objects/parseInt.html" title="The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).">parseInt()</a></li>
<li><a href="Reference/Global_Objects/undefined.html" title="The global undefined property represents the primitive value undefined. It is one of JavaScript&#39;s primitive types.">undefined</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/unescape.html" title="The unescape() function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Usually, decodeURI or decodeURIComponent are preferred over unescape.">unescape()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><a href="Reference/Global_Objects/uneval.html" title="The uneval() function creates a string representation of the source code of an Object.">uneval()</a></li>
</ol></li>
<li>Expressions &amp; operators
<ol>
<li><a href="Reference/Operators/Addition.html" title="The addition operator (+) produces the sum of numeric operands or string concatenation.">Addition (+)</a></li>
<li><a href="Reference/Operators/Addition_assignment.html" title="The addition assignment operator (+=) adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible.">Addition assignment (+=)</a></li>
<li><a href="Reference/Operators/Assignment.html" title="The simple assignment operator (=) is used to assign a value to a variable. The assignment operation evaluates to the assigned value. Chaining the assignment operator is possible in order to assign a single value to multiple variables">Assignment (=)</a></li>
<li><a href="Reference/Operators/Bitwise_AND.html" title="The bitwise AND operator (&amp;) returns a 1 in each bit position for which the corresponding bits of both operands are 1s.">Bitwise AND (&amp;)</a></li>
<li><a href="Reference/Operators/Bitwise_AND_assignment.html" title="The bitwise AND assignment operator (&amp;=) uses the binary representation of both operands, does a bitwise AND operation on them and assigns the result to the variable.">Bitwise AND assignment (&amp;=)</a></li>
<li><a href="Reference/Operators/Bitwise_NOT.html" title="The bitwise NOT operator (~) inverts the bits of its operand.">Bitwise NOT (~)</a></li>
<li><a href="Reference/Operators/Bitwise_OR.html" title="The bitwise OR operator (|) returns a 1 in each bit position for which the corresponding bits of either or both operands are 1s.">Bitwise OR (|)</a></li>
<li><a href="Reference/Operators/Bitwise_OR_assignment.html" title="The bitwise OR assignment operator (|=) uses the binary representation of both operands, does a bitwise OR operation on them and assigns the result to the variable.">Bitwise OR assignment (|=)</a></li>
<li><a href="Reference/Operators/Bitwise_XOR.html" title="The bitwise XOR operator (^) returns a 1 in each bit position for which the corresponding bits of either but not both operands are 1s.">Bitwise XOR (^)</a></li>
<li><a href="Reference/Operators/Bitwise_XOR_assignment.html" title="The bitwise XOR assignment operator (^=) uses the binary representation of both operands, does a bitwise XOR operation on them and assigns the result to the variable.">Bitwise XOR assignment (^=)</a></li>
<li><a href="Reference/Operators/Comma_Operator.html" title="The comma operator (,) evaluates each of its operands (from left to right) and returns the value of the last operand. This lets you create a compound expression in which multiple expressions are evaluated, with the compound expression&#39;s final value being the value of the rightmost of its member expressions. This is commonly used to provide multiple parameters to a for loop.">Comma operator (,)</a></li>
<li><a href="Reference/Operators/Conditional_Operator.html" title="The conditional (ternary) operator is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy.">Conditional (ternary) operator</a></li>
<li><a href="Reference/Operators/Decrement.html" title="The decrement operator (--) decrements (subtracts one from) its operand and returns a value.">Decrement (--)</a></li>
<li><a href="Reference/Operators/Destructuring_assignment.html" title="The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.">Destructuring assignment</a></li>
<li><a href="Reference/Operators/Division.html" title="The division operator (/) produces the quotient of its operands where the left operand is the dividend and the right operand is the divisor.">Division (/)</a></li>
<li><a href="Reference/Operators/Division_assignment.html" title="The division assignment operator (/=) divides a variable by the value of the right operand and assigns the result to the variable.">Division assignment (/=)</a></li>
<li><a href="Reference/Operators/Equality.html" title="The equality operator (==) checks whether its two operands are equal, returning a Boolean result. Unlike the strict equality operator, it attempts to convert and compare operands that are of different types.">Equality (==)</a></li>
<li><a href="Reference/Operators/Exponentiation.html" title="The exponentiation operator (**) returns the result of raising the first operand to the power of the second operand. It is equivalent to Math.pow, except it also accepts BigInts as operands.">Exponentiation (**)</a></li>
<li><a href="Reference/Operators/Exponentiation_assignment.html" title="The exponentiation assignment operator (**=) raises the value of a variable to the power of the right operand.">Exponentiation assignment (**=)</a></li>
<li><a href="Reference/Operators/function.html" title="The function keyword can be used to define a function inside an expression.">Function expression</a></li>
<li><a href="Reference/Operators/Greater_than.html" title="The greater than operator (&gt;) returns true if the left operand is greater than the right operand, and false otherwise.">Greater than (&gt;)</a></li>
<li><a href="Reference/Operators/Greater_than_or_equal.html" title="The greater than or equal operator (&gt;=) returns true if the left operand is greater than or equal to the right operand, and false otherwise.">Greater than or equal (&gt;=)</a></li>
<li><a href="Reference/Operators/Grouping.html" title="The grouping operator ( ) controls the precedence of evaluation in expressions.">Grouping operator ( )</a></li>
<li><a href="Reference/Operators/Increment.html" title="The increment operator (++) increments (adds one to) its operand and returns a value.">Increment (++)</a></li>
<li><a href="Reference/Operators/Inequality.html" title="The inequality operator (!=) checks whether its two operands are not equal, returning a Boolean result. Unlike the strict inequality operator, it attempts to convert and compare operands that are of different types.">Inequality (!=)</a></li>
<li><a href="Reference/Operators/Left_shift.html" title="The left shift operator (&lt;&lt;) shifts the first operand the specified number of bits to the left. Excess bits shifted off to the left are discarded. Zero bits are shifted in from the right.">Left shift (&lt;&lt;)</a></li>
<li><a href="Reference/Operators/Left_shift_assignment.html" title="The left shift assignment operator (&lt;&lt;=) moves the specified amount of bits to the left and assigns the result to the variable.">Left shift assignment (&lt;&lt;=)</a></li>
<li><a href="Reference/Operators/Less_than.html" title="The less than operator (&lt;) returns true if the left operand is less than the right operand, and false otherwise.">Less than (&lt;)</a></li>
<li><a href="Reference/Operators/Less_than_or_equal.html" title="The less than or equal operator (&lt;=) returns true if the left operand is less than or equal to the right operand, and false otherwise.">Less than or equal (&lt;=)</a></li>
<li><a href="Reference/Operators/Logical_AND.html" title="The logical AND (&amp;&amp;) operator (logical conjunction) for a set of operands is true if and only if all of its operands are true. It is typically used with Boolean (logical) values. When it is, it returns a Boolean value. However, the &amp;&amp; operator actually returns the value of one of the specified operands, so if this operator is used with non-Boolean values, it will return a non-Boolean value.">Logical AND (&amp;&amp;)</a></li>
<li><a href="Reference/Operators/Logical_AND_assignment.html" title="The logical AND assignment (x &amp;&amp;= y) operator only assigns if x is truthy.">Logical AND assignment (&amp;&amp;=)</a></li>
<li><a href="Reference/Operators/Logical_NOT.html" title="The logical NOT (!) operator (logical complement, negation) takes truth to falsity and vice versa. It is typically used with Boolean (logical) values. When used with non-Boolean values, it returns false if its single operand can be converted to true; otherwise, returns true.">Logical NOT (!)</a></li>
<li><a href="Reference/Operators/Logical_OR.html" title="The logical OR (||) operator (logical disjunction) for a set of operands is true if and only if one or more of its operands is true. It is typically used with Boolean (logical) values. When it is, it returns a Boolean value. However, the || operator actually returns the value of one of the specified operands, so if this operator is used with non-Boolean values, it will return a non-Boolean value.">Logical OR (||)</a></li>
<li><a href="Reference/Operators/Logical_OR_assignment.html" title="The logical OR assignment (x ||= y) operator only assigns if x is falsy.">Logical OR assignment (||=)</a></li>
<li><a href="Reference/Operators/Logical_nullish_assignment.html" title="The logical nullish assignment (x ??= y) operator only assigns if x is nullish (null or undefined).">Logical nullish assignment (??=)</a></li>
<li><a href="Reference/Operators/Multiplication.html" title="The multiplication operator (*) produces the product of the operands.">Multiplication (*)</a></li>
<li><a href="Reference/Operators/Multiplication_assignment.html" title="The multiplication assignment operator (*=) multiplies a variable by the value of the right operand and assigns the result to the variable.">Multiplication assignment (*=)</a></li>
<li><a href="Reference/Operators/Nullish_coalescing_operator.html" title="The nullish coalescing operator (??) is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.">Nullish coalescing operator (??)</a></li>
<li><a href="Reference/Operators/Object_initializer.html" title="Objects can be initialized using new Object(), Object.create(), or using the literal notation (initializer notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).">Object initializer</a></li>
<li><a href="Reference/Operators/Operator_Precedence.html" title="Operator precedence determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.">Operator precedence</a></li>
<li><a href="Reference/Operators/Optional_chaining.html" title="The ?. operator functions similarly to the . chaining operator, except that instead of causing an error if a reference is nullish (null or undefined), the expression short-circuits with a return value of undefined.">Optional chaining (?.)</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Operators/Pipeline_operator.html" title="The experimental pipeline operator |&gt; (currently at stage 1) pipes the value of an expression into a function. This allows the creation of chained function calls in a readable manner. The result is syntactic sugar in which a function call with a single argument can be written like this:">Pipeline operator (|&gt;)</a></li>
<li><a href="Reference/Operators/Property_Accessors-2.html" title="Property accessors provide access to an object&#39;s properties by using the dot notation or the bracket notation.">Property accessors</a></li>
<li><a href="Reference/Operators/Remainder.html" title="The remainder operator (%) returns the remainder left over when one operand is divided by a second operand. It always takes the sign of the dividend.">Remainder (%)</a></li>
<li><a href="Reference/Operators/Remainder_assignment.html" title="The remainder assignment operator (%=) divides a variable by the value of the right operand and assigns the remainder to the variable.">Remainder assignment (%=)</a></li>
<li><a href="Reference/Operators/Right_shift.html" title="The right shift operator (&gt;&gt;) shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Copies of the leftmost bit are shifted in from the left. Since the new leftmost bit has the same value as the previous leftmost bit, the sign bit (the leftmost bit) does not change. Hence the name &quot;sign-propagating&quot;.">Right shift (&gt;&gt;)</a></li>
<li><a href="Reference/Operators/Right_shift_assignment.html" title="The right shift assignment operator (&gt;&gt;=) moves the specified amount of bits to the right and assigns the result to the variable.">Right shift assignment (&gt;&gt;=)</a></li>
<li><a href="Reference/Operators/Spread_syntax.html" title="Spread syntax (...) allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.">Spread syntax (...)</a></li>
<li><a href="Reference/Operators/Strict_equality.html" title="The strict equality operator (===) checks whether its two operands are equal, returning a Boolean result. Unlike the equality operator, the strict equality operator always considers operands of different types to be different.">Strict equality (===)</a></li>
<li><a href="Reference/Operators/Strict_inequality.html" title="The strict inequality operator (!==) checks whether its two operands are not equal, returning a Boolean result. Unlike the inequality operator, the strict inequality operator always considers operands of different types to be different.">Strict inequality (!==)</a></li>
<li><a href="Reference/Operators/Subtraction.html" title="The subtraction operator (-) subtracts the two operands, producing their difference.">Subtraction (-)</a></li>
<li><a href="Reference/Operators/Subtraction_assignment.html" title="The subtraction assignment operator (-=) subtracts the value of the right operand from a variable and assigns the result to the variable.">Subtraction assignment (-=)</a></li>
<li><a href="Reference/Operators/Unary_negation.html" title="The unary negation operator (-) precedes its operand and negates it.">Unary negation (-)</a></li>
<li><a href="Reference/Operators/Unary_plus.html" title="The unary plus operator (+) precedes its operand and evaluates to its operand but attempts to convert it into a number, if it isn&#39;t already.">Unary plus (+)</a></li>
<li><a href="Reference/Operators/Unsigned_right_shift.html" title="The unsigned right shift operator (&gt;&gt;&gt;) (zero-fill right shift) shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Zero bits are shifted in from the left. The sign bit becomes 0, so the result is always non-negative. Unlike the other bitwise operators, zero-fill right shift returns an unsigned 32-bit integer.">Unsigned right shift (&gt;&gt;&gt;)</a></li>
<li><a href="Reference/Operators/Unsigned_right_shift_assignment.html" title="The unsigned right shift assignment operator (&gt;&gt;&gt;=) moves the specified amount of bits to the right and assigns the result to the variable.">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li>
<li><a href="Reference/Operators/async_function.html" title="The async function keyword can be used to define async functions inside expressions.">async function expression</a></li>
<li><a href="Reference/Operators/await.html" title="The await operator is used to wait for a Promise. It can only be used inside an async function.">await</a></li>
<li><a href="Reference/Operators/class.html" title="The class expression is one way to define a class in ECMAScript 2015. Similar to function expressions, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. ">class expression</a></li>
<li><a href="Reference/Operators/delete.html" title="The JavaScript delete operator removes a property from an object; if no more references to the same property are held, it is eventually released automatically.">delete operator</a></li>
<li><a href="Reference/Operators/function_.html" title="The function* keyword can be used to define a generator function inside an expression.">function* expression</a></li>
<li><a href="Reference/Operators/in.html" title="The in operator returns true if the specified property is in the specified object or its prototype chain.">in operator</a></li>
<li><a href="Reference/Operators/instanceof.html" title="The instanceof operator tests to see if the prototype property of a constructor appears anywhere in the prototype chain of an object. The return value is a boolean value.">instanceof</a></li>
<li><a href="Reference/Operators/new.html" title="The new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.">new operator</a></li>
<li><a href="Reference/Operators/new-2.html" title="The new.target pseudo-property lets you detect whether a function or constructor was called using the new operator. In constructors and functions invoked using the new operator, new.target returns a reference to the constructor or function. In normal function calls, new.target is undefined.">new.target</a></li>
<li><a href="Reference/Operators/super.html" title="The super keyword is used to access and call functions on an object&#39;s parent.">super</a></li>
<li><a href="Reference/Operators/this.html" title="A function&#39;s this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode.">this</a></li>
<li><a href="Reference/Operators/typeof.html" title="The typeof operator returns a string indicating the type of the unevaluated operand.">typeof</a></li>
<li><a href="Reference/Operators/void.html" title="The void operator evaluates the given expression and then returns undefined.">void operator</a></li>
<li><a href="Reference/Operators/yield.html" title="The yield keyword is used to pause and resume a generator function (function* or legacy generator function).">yield</a></li>
<li><a href="Reference/Operators/yield_.html" title="The yield* expression is used to delegate to another generator or iterable object.">yield*</a></li>
</ol></li>
<li>Statements &amp; declarations
<ol>
<li><a href="Reference/Statements/async_function.html" title="An async function is a function declared with the async keyword. Async functions are instances of the AsyncFunction constructor, and the await keyword is permitted within them. The async and await keywords enable asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.">async function</a></li>
<li><a href="Reference/Statements/block.html" title="A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of braces (&quot;curly brackets&quot;) and may optionally be labelled:">block</a></li>
<li><a href="Reference/Statements/break.html" title="The break statement terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.">break</a></li>
<li><a href="Reference/Statements/class.html" title="The class declaration creates a new class with a given name using prototype-based inheritance.">class</a></li>
<li><a href="Reference/Statements/const.html" title="Constants are block-scoped, much like variables defined using the let keyword. The value of a constant can&#39;t be changed through reassignment, and it can&#39;t be redeclared.">const</a></li>
<li><a href="Reference/Statements/continue.html" title="The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.">continue</a></li>
<li><a href="Reference/Statements/debugger.html" title="The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.">debugger</a></li>
<li><a href="Reference/Statements/do...html" title="The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.">do...while</a></li>
<li><a href="Reference/Statements/Empty.html" title="An empty statement is used to provide no statement, although the JavaScript syntax would expect one.">empty</a></li>
<li><a href="Reference/Statements/export.html" title="The export statement is used when creating JavaScript modules to export live bindings to functions, objects, or primitive values from the module so they can be used by other programs with the import statement. Bindings that are exported can still be modified locally; when imported, although they can only be read by the importing module the value updates whenever it is updated by the exporting module.">export</a></li>
<li><a href="Reference/Statements/for.html" title="The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.">for</a></li>
<li><a href="Reference/Statements/for-await...html" title="The for await...of statement creates a loop iterating over async iterable objects as well as on sync iterables, including: built-in String, Array, Array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined async/sync iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object. Like the await operator, the statement can only be used inside an async function.">for await...of</a></li>
<li><a href="Reference/Statements/for...html" title="The for...in statement iterates over all enumerable properties of an object that are keyed by strings (ignoring ones keyed by Symbols), including inherited enumerable properties.">for...in</a></li>
<li><a href="Reference/Statements/for..-2.html" title="The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.">for...of</a></li>
<li><a href="Reference/Statements/function.html" title="The function declaration (function statement) defines a function with the specified parameters.">function declaration</a></li>
<li><a href="Reference/Statements/function_.html" title="The function* declaration (function keyword followed by an asterisk) defines a generator function, which returns a Generator object.">function*</a></li>
<li><a href="Reference/Statements/if...html" title="The if statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement can be executed.">if...else</a></li>
<li><a href="Reference/Statements/import.html" title="The static import statement is used to import read only live bindings which are exported by another module. ">import</a></li>
<li><a href="Reference/Statements/import-2.html" title="The import.meta object exposes context-specific metadata to a JavaScript module. It contains information about the module, like the module&#39;s URL.">import.meta</a></li>
<li><a href="Reference/Statements/label.html" title="The labeled statement can be used with break or continue statements. It is prefixing a statement with an identifier which you can refer to.">label</a></li>
<li><a href="Reference/Statements/let.html" title="The let statement declares a block-scoped local variable, optionally initializing it to a value.">let</a></li>
<li><a href="Reference/Statements/return.html" title="The return statement ends function execution and specifies a value to be returned to the function caller.">return</a></li>
<li><a href="Reference/Statements/switch.html" title="The switch statement evaluates an expression, matching the expression&#39;s value to a case clause, and executes statements associated with that case, as well as statements in cases that follow the matching case.">switch</a></li>
<li><a href="Reference/Statements/throw.html" title="The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won&#39;t be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.">throw</a></li>
<li><a href="Reference/Statements/try...html" title="The try...catch statement marks a block of statements to try and specifies a response should an exception be thrown.">try...catch</a></li>
<li><a href="Reference/Statements/var.html" title="The var statement declares a function-scoped or globally-scoped variable, optionally initializing it to a value.">var</a></li>
<li><a href="Reference/Statements/while.html" title="The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.">while</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Statements/with.html" title="The with statement extends the scope chain for a statement.">with</a></li>
</ol></li>
<li>Functions
<ol>
<li><a href="Reference/Functions/Arrow_functions.html" title="An arrow function expression is a compact alternative to a traditional function expression, but is limited and can&#39;t be used in all situations.">Arrow function expressions</a></li>
<li><a href="Reference/Functions/Default_parameters.html" title="Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.">Default parameters</a></li>
<li><a href="Reference/Functions/Method_definitions.html" title="Starting with ECMAScript 2015, a shorter syntax for method definitions on objects initializers is introduced. It is a shorthand for a function assigned to the method&#39;s name.">Method definitions</a></li>
<li><a href="Reference/Functions/rest_parameters.html" title="The rest parameter syntax allows us to represent an indefinite number of arguments as an array.">Rest parameters</a></li>
<li><a href="Reference/Functions/arguments.html" title="arguments is an Array-like object accessible inside functions that contains the values of the arguments passed to that function.">The arguments object</a></li>
<li><a href="Reference/Functions/get.html" title="The get syntax binds an object property to a function that will be called when that property is looked up.">getter</a></li>
<li><a href="Reference/Functions/set.html" title="The set syntax binds an object property to a function to be called when there is an attempt to set that property.">setter</a></li>
</ol></li>
<li>Classes
<ol>
<li><a href="Reference/Classes/Private_class_fields.html" title="Class properties are public by default and can be examined or modified outside the class. There is however an experimental proposal to allow defining private class fields using a hash # prefix is added.">Private class fields</a></li>
<li><a href="Reference/Classes/Public_class_fields.html" title="Both static and instance public fields are writable, enumerable, and configurable properties. As such, unlike their private counterparts, they participate in prototype inheritance.">Public class fields</a></li>
<li><a href="Reference/Classes/constructor.html" title="The constructor method is a special method of a class for creating and initializing an object of that class.">constructor</a></li>
<li><a href="Reference/Classes/extends.html" title="The extends keyword is used in class declarations or class expressions to create a class that is a child of another class.">extends</a></li>
<li><a href="Reference/Classes/static.html" title="The static keyword defines a static method for a class. Static methods aren&#39;t called on instances of the class. Instead, they&#39;re called on the class itself.">static</a></li>
</ol></li>
<li>Errors
<ol>
<li><a href="Reference/Errors/Property_access_denied.html" title="The JavaScript exception &quot;Permission denied to access property&quot; occurs when there was an attempt to access an object for which you have no permission.">Error: Permission denied to access property "x"</a></li>
<li><a href="Reference/Errors/Too_much_recursion.html" title="The JavaScript exception &quot;too much recursion&quot; or &quot;Maximum call stack size exceeded&quot; occurs when there are too many function calls, or a function is missing a base case.">InternalError: too much recursion</a></li>
<li><a href="Reference/Errors/Not_a_codepoint.html" title="The JavaScript exception &quot;Invalid code point&quot; occurs when NaN values, negative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF (1114111) are used with String.fromCodePoint().">RangeError: argument is not a valid code point</a></li>
<li><a href="Reference/Errors/Invalid_array_length.html" title="The JavaScript exception &quot;Invalid array length&quot; occurs when creating an Array or an ArrayBuffer which has a length which is either negative or larger or equal to 232, or when setting the Array.length property to a value which is either negative or larger or equal to 232.">RangeError: invalid array length</a></li>
<li><a href="Reference/Errors/Invalid_date.html" title="The JavaScript exception &quot;invalid date&quot; occurs when a string leading to an invalid date has been provided to Date or Date.parse().">RangeError: invalid date</a></li>
<li><a href="Reference/Errors/Precision_range.html" title="The JavaScript exception &quot;precision is out of range&quot; occurs when a number that&#39;s outside of the range of 0 and 20 (or 21) was passed into toFixed or toPrecision.">RangeError: precision is out of range</a></li>
<li><a href="Reference/Errors/Bad_radix.html" title="The JavaScript exception &quot;radix must be an integer at least 2 and no greater than 36&quot; occurs when the optional radix parameter of the Number.prototype.toString() or the BigInt.prototype.toString() method was specified and is not between 2 and 36.">RangeError: radix must be an integer</a></li>
<li><a href="Reference/Errors/Resulting_string_too_large.html" title="The JavaScript exception &quot;repeat count must be less than infinity&quot; occurs when the String.prototype.repeat() method is used with a count argument that is infinity.">RangeError: repeat count must be less than infinity</a></li>
<li><a href="Reference/Errors/Negative_repetition_count.html" title="The JavaScript exception &quot;repeat count must be non-negative&quot; occurs when the String.prototype.repeat() method is used with a count argument that is a negative number.">RangeError: repeat count must be non-negative</a></li>
<li><a href="Reference/Errors/Not_defined.html" title="The JavaScript exception &quot;variable is not defined&quot; occurs when there is a non-existent variable referenced somewhere.">ReferenceError: "x" is not defined</a></li>
<li><a href="Reference/Errors/Undeclared_var.html" title="The JavaScript strict mode-only exception &quot;Assignment to undeclated variable&quot; occurs when the value has been assigned to an undeclared variable.">ReferenceError: assignment to undeclared variable "x"</a></li>
<li><a href="Reference/Errors/Cant_access_lexical_declaration_before_init.html" title="The JavaScript exception &quot;can&#39;t access lexical declaration `variable&#39; before initialization&quot; occurs when a lexical variable was accessed before it was initialized. This happens within any block statement, when let or const declarations are accessed before they are defined.">ReferenceError: can't access lexical declaration`X' before initialization</a></li>
<li><a href="Reference/Errors/Deprecated_caller_or_arguments_usage.html" title="The JavaScript strict mode-only exception &quot;deprecated caller or arguments usage&quot; occurs when the deprecated Function.caller or Function.arguments properties are used.">ReferenceError: deprecated caller or arguments usage</a></li>
<li><a href="Reference/Errors/Invalid_assignment_left-hand_side.html" title="The JavaScript exception &quot;invalid assignment left-hand side&quot; occurs when there was an unexpected assignment somewhere. For example, a single &quot;=&quot; sign was used instead of &quot;==&quot; or &quot;===&quot;.">ReferenceError: invalid assignment left-hand side</a></li>
<li><a href="Reference/Errors/Undefined_prop.html" title="The JavaScript warning &quot;reference to undefined property&quot; occurs when a script attempted to access an object property which doesn&#39;t exist.">ReferenceError: reference to undefined property "x"</a></li>
<li><a href="Reference/Errors/Deprecated_octal.html" title="The JavaScript strict mode-only exception &quot;0-prefixed octal literals and octal escape sequences are deprecated; for octal literals use the &quot;0o&quot; prefix instead&quot; occurs when deprecated octal literals and octal escape sequences are used.">SyntaxError: "0"-prefixed octal literals and octal escape seq. are deprecated</a></li>
<li><a href="Reference/Errors/Strict_Non_Simple_Params.html" title="The JavaScript exception &quot;&#39;use strict&#39; not allowed in function&quot; occurs when a &quot;use strict&quot; directive is used at the top of a function with default parameters, rest parameters, or destructuring parameters.">SyntaxError: "use strict" not allowed in function with non-simple parameters</a></li>
<li><a href="Reference/Errors/Reserved_identifier.html" title="The JavaScript exception &quot;variable is a reserved identifier&quot; occurs when reserved keywords are used as identifiers.">SyntaxError: "x" is a reserved identifier</a></li>
<li><a href="Reference/Errors/JSON_bad_parse.html" title="The JavaScript exceptions thrown by JSON.parse() occur when string failed to be parsed as JSON.">SyntaxError: JSON.parse: bad parsing</a></li>
<li><a href="Reference/Errors/Malformed_formal_parameter.html" title="The JavaScript exception &quot;malformed formal parameter&quot; occurs when the argument list of a Function() constructor call is invalid somehow.">SyntaxError: Malformed formal parameter</a></li>
<li><a href="Reference/Errors/Unexpected_token.html" title="The JavaScript exceptions &quot;unexpected token&quot; occur when a specific language construct was expected, but something else was provided. This might be a simple typo.">SyntaxError: Unexpected token</a></li>
<li><a href="Reference/Errors/Deprecated_source_map_pragma.html" title="The JavaScript warning &quot;Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead&quot; occurs when there is a deprecated source map syntax in a JavaScript source.">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li>
<li><a href="Reference/Errors/Invalid_for-of_initializer.html" title="The JavaScript exception &quot;a declaration in the head of a for-of loop can&#39;t have an initializer&quot; occurs when the head of a for...of loop contains an initializer expression such as |for (var i = 0 of iterable)|. This is not allowed in for-of loops.">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li>
<li><a href="Reference/Errors/Delete_in_strict_mode.html" title="The JavaScript strict mode-only exception &quot;applying the &#39;delete&#39; operator to an unqualified name is deprecated&quot; occurs when variables are attempted to be deleted using the delete operator.">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li>
<li><a href="Reference/Errors/Invalid_for-in_initializer.html" title="The JavaScript strict mode-only exception &quot;for-in loop head declarations may not have initializers&quot; occurs when the head of a for...in contains an initializer expression, such as |for (var i = 0 in obj)|. This is not allowed in for-of loops in strict mode.">SyntaxError: for-in loop head declarations may not have initializers</a></li>
<li><a href="Reference/Errors/Unnamed_function_statement.html" title="The JavaScript exception &quot;function statement requires a name&quot; occurs when there is a function statement in the code that requires a name.">SyntaxError: function statement requires a name</a></li>
<li><a href="Reference/Errors/Identifier_after_number.html" title="The JavaScript exception &quot;identifier starts immediately after numeric literal&quot; occurs when an identifier started with a digit. Identifiers can only start with a letter, underscore (_), or dollar sign ($).">SyntaxError: identifier starts immediately after numeric literal</a></li>
<li><a href="Reference/Errors/Illegal_character.html" title="The JavaScript exception &quot;illegal character&quot; occurs when there is an invalid or unexpected token that doesn&#39;t belong at this position in the code.">SyntaxError: illegal character</a></li>
<li><a href="Reference/Errors/Bad_regexp_flag.html" title="The JavaScript exception &quot;invalid regular expression flag&quot; occurs when the flags, defined after the second slash in regular expression literal, are not one of g, i, m, s, u, or y.">SyntaxError: invalid regular expression flag "x"</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_argument_list.html" title="The JavaScript exception &quot;missing ) after argument list&quot; occurs when there is an error with how a function is called. This might be a typo, a missing operator, or an unescaped string.">SyntaxError: missing ) after argument list</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_condition.html" title="The JavaScript exception &quot;missing ) after condition&quot; occurs when there is an error with how an if condition is written. It must appear in parenthesis after the if keyword.">SyntaxError: missing ) after condition</a></li>
<li><a href="Reference/Errors/Missing_colon_after_property_id.html" title="The JavaScript exception &quot;missing : after property id&quot; occurs when objects are created using the object initializer syntax. A colon (:) separates keys and values for the object&#39;s properties. Somehow, this colon is missing or misplaced.">SyntaxError: missing : after property id</a></li>
<li><a href="Reference/Errors/Missing_semicolon_before_statement.html" title="The JavaScript exception &quot;missing ; before statement&quot; occurs when there is a semicolon (;) missing somewhere and can&#39;t be added by automatic semicolon insertion (ASI). You need to provide a semicolon, so that JavaScript can parse the source code correctly.">SyntaxError: missing ; before statement</a></li>
<li><a href="Reference/Errors/Missing_initializer_in_const.html" title="The JavaScript exception &quot;missing = in const declaration&quot; occurs when a const declaration was not given a value in the same statement (like const RED_FLAG;). You need to provide one (const RED_FLAG = &#39;#ff0&#39;).">SyntaxError: missing = in const declaration</a></li>
<li><a href="Reference/Errors/Missing_bracket_after_list.html" title="The JavaScript exception &quot;missing ] after element list&quot; occurs when there is an error with the array initializer syntax somewhere. Likely there is a closing bracket (&quot;]&quot;) or a comma (&quot;,&quot;) missing.">SyntaxError: missing ] after element list</a></li>
<li><a href="Reference/Errors/Missing_formal_parameter.html" title="The JavaScript exception &quot;missing formal parameter&quot; occurs when your function declaration is missing valid parameters.">SyntaxError: missing formal parameter</a></li>
<li><a href="Reference/Errors/Missing_name_after_dot_operator.html" title="The JavaScript exception &quot;missing name after . operator&quot; occurs when there is a problem with how the dot operator (.) is used for property access.">SyntaxError: missing name after . operator</a></li>
<li><a href="Reference/Errors/No_variable_name.html" title="The JavaScript exception &quot;missing variable name&quot; occurs way too often as naming things is so hard. Or maybe a comma is wrong. Check for typos!">SyntaxError: missing variable name</a></li>
<li><a href="Reference/Errors/Missing_curly_after_function_body.html" title="The JavaScript exception &quot;missing } after function body&quot; occurs when there is a syntax mistake when creating a function somewhere. Check if any closing curly brackets or parenthesis are in the correct order.">SyntaxError: missing } after function body</a></li>
<li><a href="Reference/Errors/Missing_curly_after_property_list.html" title="The JavaScript exception &quot;missing } after property list&quot; occurs when there is a mistake in the object initializer syntax somewhere. Might be in fact a missing curly bracket, but could also be a missing comma.">SyntaxError: missing } after property list</a></li>
<li><a href="Reference/Errors/Redeclared_parameter.html" title="The JavaScript exception &quot;redeclaration of formal parameter&quot; occurs when the same variable name occurs as a function parameter and is then redeclared using a let assignment in a function body again.">SyntaxError: redeclaration of formal parameter "x"</a></li>
<li><a href="Reference/Errors/Bad_return_or_yield.html" title="The JavaScript exception &quot;return (or yield) not in function&quot; occurs when a return or yield statement is called outside of a function.">SyntaxError: return not in function</a></li>
<li><a href="Reference/Errors/Equal_as_assign.html" title="The JavaScript warning &quot;test for equality (==) mistyped as assignment (=)?&quot; occurs when there was an assignment (=) when you would normally expect a test for equality (==).">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li>
<li><a href="Reference/Errors/Unterminated_string_literal.html" title="The JavaScript error &quot;unterminated string literal&quot; occurs when there is an unterminated String somewhere. String literals must be enclosed by single (&#39;) or double (&quot;) quotes.">SyntaxError: unterminated string literal</a></li>
<li><a href="Reference/Errors/No_properties.html" title="The JavaScript exception &quot;null (or undefined) has no properties&quot; occurs when you attempt to access properties of null and undefined. They don&#39;t have any.">TypeError: "x" has no properties</a></li>
<li><a href="Reference/Errors/Unexpected_type.html" title="The JavaScript exception &quot;x is (not) y&quot; occurs when there was an unexpected type. Oftentimes, unexpected undefined or null values.">TypeError: "x" is (not) "y"</a></li>
<li><a href="Reference/Errors/Not_a_constructor.html" title="The JavaScript exception &quot;is not a constructor&quot; occurs when there was an attempt to use an object or a variable as a constructor, but that object or variable is not a constructor.">TypeError: "x" is not a constructor</a></li>
<li><a href="Reference/Errors/Not_a_function.html" title="The JavaScript exception &quot;is not a function&quot; occurs when there was an attempt to call a value from a function, but the value is not actually a function.">TypeError: "x" is not a function</a></li>
<li><a href="Reference/Errors/No_non-null_object.html" title="The JavaScript exception &quot;is not a non-null object&quot; occurs when an object is expected somewhere and wasn&#39;t provided. null is not an object and won&#39;t work.">TypeError: "x" is not a non-null object</a></li>
<li><a href="Reference/Errors/Read-only.html" title="The JavaScript strict mode-only exception &quot;is read-only&quot; occurs when a global variable or object property that was assigned to is a read-only property.">TypeError: "x" is read-only</a></li>
<li><a href="Reference/Errors/is_not_iterable.html" title="The JavaScript exception &quot;is not iterable&quot; occurs when the value which is given as the right hand-side of for…of or as argument of a function such as Promise.all or TypedArray.from, is not an iterable object.">TypeError: 'x' is not iterable</a></li>
<li><a href="Reference/Errors/More_arguments_needed.html" title="The JavaScript exception &quot;more arguments needed&quot; occurs when there is an error with how a function is called. More arguments need to be provided.">TypeError: More arguments needed</a></li>
<li><a href="Reference/Errors/Reduce_of_empty_array_with_no_initial_value.html" title="The JavaScript exception &quot;reduce of empty array with no initial value&quot; occurs when a reduce function is used.">TypeError: Reduce of empty array with no initial value</a></li>
<li><a href="Reference/Errors/Called_on_incompatible_type.html" title="The JavaScript exception &quot;called on incompatible target (or object)&quot; occurs when a function (on a given object), is called with a this not corresponding to the type expected by the function.">TypeError: X.prototype.y called on incompatible type</a></li>
<li><a href="Reference/Errors/Dead_object.html" title="The JavaScript exception &quot;can&#39;t access dead object&quot; occurs when Firefox disallows add-ons to keep strong references to DOM objects after their parent document has been destroyed to improve in memory usage and to prevent memory leaks.">TypeError: can't access dead object</a></li>
<li><a href="Reference/Errors/Cant_access_property.html" title="The JavaScript exception &quot;can&#39;t access property&quot; occurs when property access was operated on undefined or null values.">TypeError: can't access property "x" of "y"</a></li>
<li><a href="Reference/Errors/Cant_assign_to_property.html" title="The JavaScript strict mode exception &quot;can&#39;t assign to property&quot; occurs when attempting to create a property on primitive value such as a symbol, a string, a number or a boolean. Primitive values cannot hold any property.">TypeError: can't assign to property "x" on "y": not an object</a></li>
<li><a href="Reference/Errors/Cant_define_property_object_not_extensible.html" title="The JavaScript exception &quot;can&#39;t define property &quot;x&quot;: &quot;obj&quot; is not extensible&quot; occurs when Object.preventExtensions() marked an object as no longer extensible, so that it will never have properties beyond the ones it had at the time it was marked as non-extensible.">TypeError: can't define property "x": "obj" is not extensible</a></li>
<li><a href="Reference/Errors/Non_configurable_array_element.html" title="The JavaScript exception &quot;can&#39;t delete non-configurable array element&quot; occurs when it was attempted to shorten the length of an array, but one of the array&#39;s elements is non-configurable.">TypeError: can't delete non-configurable array element</a></li>
<li><a href="Reference/Errors/Cant_redefine_property.html" title="The JavaScript exception &quot;can&#39;t redefine non-configurable property&quot; occurs when it was attempted to redefine a property, but that property is non-configurable.">TypeError: can't redefine non-configurable property "x"</a></li>
<li><a href="Reference/Errors/in_operator_no_object.html" title="The JavaScript exception &quot;right-hand side of &#39;in&#39; should be an object&quot; occurs when the in operator was used to search in strings, or in numbers, or other primitive types. It can only be used to check if a property is in an object.">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li>
<li><a href="Reference/Errors/Cyclic_object_value.html" title="The JavaScript exception &quot;cyclic object value&quot; occurs when object references were found in JSON. JSON.stringify() doesn&#39;t try to solve them and fails accordingly.">TypeError: cyclic object value</a></li>
<li><a href="Reference/Errors/invalid_right_hand_side_instanceof_operand.html" title="The JavaScript exception &quot;invalid &#39;instanceof&#39; operand&quot; occurs when the right hand side operands of the instanceof operator isn&#39;t used with a constructor object, i.e. an object which has a prototype property and is callable.">TypeError: invalid 'instanceof' operand 'x'</a></li>
<li><a href="Reference/Errors/Array_sort_argument.html" title="The JavaScript exception &quot;invalid Array.prototype.sort argument&quot; occurs when the argument of Array.prototype.sort() isn&#39;t either undefined or a function which compares its operands.">TypeError: invalid Array.prototype.sort argument</a></li>
<li><a href="Reference/Errors/Typed_array_invalid_arguments.html" title="The JavaScript exception &quot;invalid arguments&quot; occurs when typed array constructors are provided with a wrong argument.">TypeError: invalid arguments</a></li>
<li><a href="Reference/Errors/Invalid_const_assignment.html" title="The JavaScript exception &quot;invalid assignment to const&quot; occurs when it was attempted to alter a constant value. JavaScript const declarations can&#39;t be re-assigned or redeclared.">TypeError: invalid assignment to const "x"</a></li>
<li><a href="Reference/Errors/Cant_delete.html" title="The JavaScript exception &quot;property is non-configurable and can&#39;t be deleted&quot; occurs when it was attempted to delete a property, but that property is non-configurable.">TypeError: property "x" is non-configurable and can't be deleted</a></li>
<li><a href="Reference/Errors/Getter_only.html" title="The JavaScript strict mode-only exception &quot;setting getter-only property&quot; occurs when there is an attempt to set a new value to a property for which only a getter is specified.">TypeError: setting getter-only property "x"</a></li>
<li><a href="Reference/Errors/Var_hides_argument.html" title="The JavaScript strict mode-only exception &quot;variable redeclares argument&quot; occurs when the same variable name occurs as a function parameter and is then redeclared using a var assignment in a function body again.">TypeError: variable "x" redeclares argument</a></li>
<li><a href="Reference/Errors/Malformed_URI.html" title="The JavaScript exception &quot;malformed URI sequence&quot; occurs when URI encoding or decoding wasn&#39;t successful.">URIError: malformed URI sequence</a></li>
<li><a href="Reference/Errors/Already_has_pragma.html" title="The JavaScript warning &quot;-file- is being assigned a //# sourceMappingURL, but already has one.&quot; occurs when a source map has been specified more than once for a given JavaScript source.">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li>
<li><a href="Reference/Errors/Bad_octal.html" title="The JavaScript warning &quot;08 (or 09) is not a legal ECMA-262 octal constant&quot; occurs when 08 or 09 number literals are used. They can&#39;t be interpreted as an octal number.">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li>
<li><a href="Reference/Errors/Deprecated_toLocaleFormat.html" title="The JavaScript warning &quot;Date.prototype.toLocaleFormat is deprecated; consider using Intl.DateTimeFormat instead&quot; occurs when the non-standard Date.prototype.toLocaleFormat method is used.">Warning: Date.prototype.toLocaleFormat is deprecated</a></li>
<li><a href="Reference/Errors/For-each-in_loops_are_deprecated.html" title="The JavaScript warning &quot;JavaScript 1.6&#39;s for-each-in loops are deprecated; consider using ES6 for-of instead&quot; occurs when a for each (variable in obj) statement is used.">Warning: JavaScript 1.6's for-each-in loops are deprecated</a></li>
<li><a href="Reference/Errors/Deprecated_String_generics.html" title="The JavaScript warning about string generics occurs in Firefox versions prior to 68. String generics have been removed starting with Firefox 68.">Warning: String.x is deprecated; use String.prototype.x instead</a></li>
<li><a href="Reference/Errors/Deprecated_expression_closures.html" title="The JavaScript warning &quot;expression closures are deprecated&quot; occurs when the non-standard expression closure syntax (shorthand function syntax) is used.">Warning: expression closures are deprecated</a></li>
<li><a href="Reference/Errors/Stmt_after_return.html" title="The JavaScript warning &quot;unreachable code after return statement&quot; occurs when using an expression after a return statement, or when using a semicolon-less return statement but including an expression directly after.">Warning: unreachable code after return statement</a></li>
</ol></li>
<li>Misc
<ol>
<li><a href="JavaScript_technologies_overview.html">JavaScript technologies overview</a></li>
<li><a href="Reference/Lexical_grammar.html">Lexical grammar</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Enumerability_and_ownership_of_properties.html">Enumerability and ownership of properties</a></li>
<li><a href="Reference/Iteration_protocols.html">Iteration protocols</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Reference/Strict_mode/Transitioning_to_strict_mode.html">Transitioning to strict mode</a></li>
<li><a href="Reference/Template_literals.html">Template literals</a></li>
<li><a href="Reference/Deprecated_and_obsolete_features.html">Deprecated features</a></li>
</ol></li>
</ol>
</div>
</div>
</div>
</div>
</div>
<section class="newsletter-container">
<div id="newsletter-form-container" class="newsletter">
<section class="newsletter-head">
<h2 id="learn-the-best-of-web-development-1" class="newsletter-teaser">Learn the best of web development</h2>
<p>Get the latest and greatest from MDN delivered straight to your inbox.</p>
<p>The newsletter is offered in English only at the moment.</p>
</section>
<div class="form-group newsletter-group-email">
E-mail
</div>
<div id="newsletter-privacy" class="form-group form-group-agree newsletter-group-privacy" data-aria-hidden="false">
I’m okay with Mozilla handling my info as explained in this <a href="../../../../../external.html?link=https://www.mozilla.org/privacy/">Privacy Policy</a>.
</div>
<div class="newsletter-group-submit">
Sign up now
</div>
<span>Hide Newsletter Sign-up</span>
</div>
</section>
<div class="content-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/" class="nav-footer-logo">MDN Web Docs</a>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Web Technologies</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn Web Development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/About">About MDN</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Feedback</a></li>
</ul>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/">About</a></li>
<li><a href="../../../../../external.html?link=https://shop.spreadshirt.com/mdn-store/">MDN Web Docs Store</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/contact/">Contact Us</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/firefox/?utm_source=developer.mozilla.org&amp;utm_campaign=footer&amp;utm_medium=referral">Firefox</a></li>
</ul>
<div class="social social-mdn">
<h4 id="mdn-1">MDN</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<div class="social social-moz">
<h4 id="mozilla-1">Mozilla</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<p>© 2005-2020 Mozilla and individual contributors. Content is available under <a href="../../../../../external.html?link=https://developer.mozilla.org/docs/MDN/About#Copyrights_and_licenses">these licenses</a>.</p>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/legal/terms/mozilla">Terms</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/">Privacy</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/#cookies">Cookies</a></li>
</ul>
</div>
</div>
<div id="auth-modal" class="modal hidden">
<section class="auth-providers" tabindex="-1" data-role="dialog" data-aria-modal="true" data-aria-labelledby="modal-main-heading">
<h2 id="modal-main-heading">Sign In</h2>
<p>Sign in to enjoy the benefits of an MDN account. If you haven’t already created an account, you will be prompted to do so after signing in.</p>
<div class="auth-button-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/users/github/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FClosures" class="github-auth">Sign in with Github</a> <a href="../../../../../external.html?link=https://developer.mozilla.org/users/google/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FClosures" class="google-auth">Sign in with Google</a>
</div>
<span>Close modal</span>
</section>
</div>
<div id="react-container" data-component-name="SPA">
<div class="loading-bar">

</div>
<ul>
<li><a href="#content" id="skip-main">Skip to main content</a></li>
<li><a href="#language" id="skip-language">Select language</a></li>
<li><a href="#main-q" id="skip-search">Skip to search</a></li>
</ul>
<ul>
<li>Technologies
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Technologies Overview</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide/Graphics">Graphics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API">APIs / DOM</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions">Browser Extensions</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/MathML">MathML</a></li>
</ul></li>
<li>References &amp; Guides
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn web development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Tutorials">Tutorials</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Reference">References</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide">Developer Guides</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Accessibility">Accessibility</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Games">Game development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">...more docs</a></li>
</ul></li>
<li>Feedback
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Send Feedback</a></li>
<li><a href="../../../../../external.html?link=https://support.mozilla.org/">Get Firefox help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://stackoverflow.com/">Get web development help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Community">Join the MDN community</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/sprints/issues/new?template=issue-template.md&amp;projects=mdn/sprints/2&amp;labels=user-report&amp;title=/en-US/docs/Web/JavaScript/Data_structures">Report a content problem 🌐</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/kuma/issues/new/choose">Report an issue 🌐</a></li>
</ul></li>
</ul>
<div class="header-search">
Search MDN
<span>Open search</span>
</div>
<div data-role="main">
<div class="titlebar-container">
<div class="titlebar">

</div>
</div>
<div class="full-width-row-container">
<div class="max-content-width-container">
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web" class="breadcrumb-chevron"><span class="pre-text">See </span><span data-property="name">Web technology for developers</span></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript" class="breadcrumb-previous"><span class="pre-text">See </span><span data-property="name">JavaScript</span></a></li>
<li><a href="Data_structures.html" class="crumb-current-page"><span data-property="name" data-aria-current="page">JavaScript data types and data structures</span></a></li>
</ol>
<div class="dropdown-container language-menu">
English<span class="dropdown-arrow-down" data-aria-hidden="true">▼</span>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/bn/docs/Web/JavaScript/Data_structures" title="Bengali">বাংলা</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ca/docs/Web/JavaScript/Data_structures" title="Catalan">Català</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/de/docs/Web/JavaScript/Datenstrukturen" title="German">Deutsch</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/es/docs/Web/JavaScript/Data_structures" title="Spanish">Español</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/fr/docs/Web/JavaScript/Structures_de_données" title="French">Français</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/id/docs/Web/JavaScript/Data_structures" title="Indonesian">Bahasa Indonesia</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/it/docs/Web/JavaScript/Data_structures" title="Italian">Italiano</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ja/docs/Web/JavaScript/Data_structures" title="Japanese">日本語</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ko/docs/Web/JavaScript/Data_structures" title="Korean">한국어</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pl/docs/Web/JavaScript/typy_oraz_struktury_danych" title="Polish">Polski</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Data_structures" title="Portuguese (Brazilian)">Português (do Brasil)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pt-PT/docs/Web/JavaScript/Estruturas_de_dados" title="Portuguese (Portugal)">Português (Europeu)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ru/docs/Web/JavaScript/Data_structures" title="Russian">Русский</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/tr/docs/Web/JavaScript/Veri_Yapısı" title="Turkish">Türkçe</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/uk/docs/Web/JavaScript/Data_structures" title="Ukrainian">Українська</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/vi/docs/Web/JavaScript/Data_structures" title="Vietnamese">Tiếng Việt</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures" title="Chinese (Simplified)">中文 (简体)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Data_structures" title="Chinese (Traditional)">正體中文 (繁體)</a></li>
<li><a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures$locales" id="translations-add">Add a translation</a></li>
</ul>
</div>
</div>
</div>
<div class="wiki-left-present content-layout">
<div id="content" class="article text-content">
<div>

</div>
<p>Programming languages all have built-in data structures, but these often differ from one language to another. This article attempts to list the built-in data structures available in JavaScript and what properties they have. These can be used to build other data structures. Wherever possible, comparisons with other languages are drawn.</p>
<h2 id="Dynamic_typing">Dynamic typing</h2>
<p>JavaScript is a <em>loosely typed</em> and <em>dynamic</em> language. Variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned (and re-assigned) values of all types:</p>
<div class="sourceCode" id="cb101"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb101-1" title="1"><span class="kw">let</span> foo <span class="op">=</span> <span class="dv">42</span><span class="op">;</span>    <span class="co">// foo is now a number</span></a>
<a class="sourceLine" id="cb101-2" title="2">foo     <span class="op">=</span> <span class="st">&#39;bar&#39;</span><span class="op">;</span> <span class="co">// foo is now a string</span></a>
<a class="sourceLine" id="cb101-3" title="3">foo     <span class="op">=</span> <span class="kw">true</span><span class="op">;</span>  <span class="co">// foo is now a boolean</span></a></code></pre></div>
<h2 id="Data_and_Structure_types">Data and Structure types</h2>
<p>The latest ECMAScript standard defines nine types:</p>
<ul>
<li>Six <strong>Data Types</strong> that are <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/Primitive">primitives</a>, checked by <a href="Reference/Operators/typeof.html">typeof</a> operator:
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/Undefined">undefined</a> : <code>typeof instance === "undefined"</code></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/Boolean">Boolean</a> : <code>typeof instance === "boolean"</code></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/Number">Number</a> : <code>typeof instance === "number"</code></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/String">String</a> : <code>typeof instance === "string"</code></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/BigInt">BigInt</a><span> : </span><code>typeof instance === "bigint"</code></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/Symbol">Symbol</a><span> : </span><code>typeof instance === "symbol"</code></li>
</ul></li>
<li><strong>Structural</strong> <strong>Types</strong>:
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/Object">Object</a><span> : </span><code>typeof instance === "object"</code>. Special non-data but <strong>Structural</strong> <strong>type</strong> for any <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects#The_Constructor">constructed</a> object instance also used as data structures: new <a href="Reference/Global_Objects/Object.html"><code>Object</code></a>, new <a href="Reference/Global_Objects/Array.html"><code>Array</code></a>, new <a href="Reference/Global_Objects/Map.html"><code>Map</code></a>, new <a href="Reference/Global_Objects/Set.html"><code>Set</code></a>, new <a href="Reference/Global_Objects/WeakMap.html"><code>WeakMap</code></a>, new <a href="Reference/Global_Objects/WeakSet.html"><code>WeakSet</code></a>, new <a href="Reference/Global_Objects/Date.html"><code>Date</code></a> and almost everything made with <a href="Reference/Operators/new.html">new keyword</a>;</li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/Function">Function</a><span> : a non-data structure, though it also answers for <code>typeof</code> operator: </span><code>typeof instance === "function"</code>. This is merely a special shorthand for Functions, though every Function constructor is derived from Object constructor.</li>
</ul></li>
<li><strong>Structural Root</strong> Primitive:
<ul>
<li><strong><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/Null">null</a></strong><span> : </span><code>typeof instance === "object"</code>. Special <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/Primitive">primitive</a> type having additional usage for its value: if object is not inherited, then <code>null</code> is shown;</li>
</ul></li>
</ul>
<p>Keep in mind the only valuable purpose of <code>typeof</code> operator usage is checking the Data Type. If we wish to check any Structural Type derived from Object it is pointless to use <code>typeof</code> for that, as we will always receive <code>"object"</code>. The indeed proper way to check what sort of Object we are using is <a href="Reference/Operators/instanceof.html"><code>instanceof</code></a> keyword. But even in that case there might be misconceptions.</p>
<p>As we can see the meaning of every primitive type is obvious except of undefined and null which are almost the same. This happens as the concept of Time is strictly connected with the purpose of algorithms. We can purport something that does not yet exists or does not exists anymore: <strong>undefined</strong>. But when we wish to be able to represent something that exist being empty, we have to invent another keyword. And that is what <strong>null</strong> stands for: the beginning of structural meaning.</p>
<h2 id="Primitive_values">Primitive values</h2>
<p>All types except objects define immutable values (that is, values which can't be changed). For example (and unlike in C), Strings are immutable. We refer to values of these types as "<em>primitive values</em>".</p>
<h3 id="Boolean_type">Boolean type</h3>
<p>Boolean represents a logical entity and can have two values: <code>true</code> and <code>false</code>. See <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/Boolean">Boolean</a> and <a href="Reference/Global_Objects/Boolean.html"><code>Boolean</code></a> for more details.</p>
<h3 id="Null_type">Null type</h3>
<p>The Null type has exactly one value: <code>null</code>. See <a href="Reference/Global_Objects/null.html"><code>null</code></a> and <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/Null">Null</a> for more details.</p>
<h3 id="Undefined_type">Undefined type</h3>
<p>A variable that has not been assigned a value has the value <code>undefined</code>. See <a href="Reference/Global_Objects/undefined.html"><code>undefined</code></a> and <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/Undefined">Undefined</a> for more details.</p>
<h3 id="Number_type">Number type</h3>
<p>ECMAScript has two built-in numeric types: <strong>Number</strong> and <strong>BigInt</strong> (see below).</p>
<p>The Number type is a <a href="../../../../../external.html?link=http://en.wikipedia.org/wiki/Double_precision_floating-point_format" class="external">double-precision 64-bit binary format IEEE 754 value</a> (numbers between -(2<sup>53</sup> − 1) and 2<sup>53</sup> − 1). In addition to representing floating-point numbers, the number type has three symbolic values: <code>+Infinity</code>, <code>-Infinity</code>, and <a href="Reference/Global_Objects/NaN.html"><code>NaN</code></a> ("<strong>N</strong>ot a <strong>N</strong>umber").</p>
<p>To check for the largest available value or smallest available value within <a href="Reference/Global_Objects/Infinity.html"><code>±Infinity</code></a>, you can use the constants <a href="Reference/Global_Objects/Number/MAX_VALUE.html"><code>Number.MAX_VALUE</code></a> or <a href="Reference/Global_Objects/Number/MIN_VALUE.html"><code>Number.MIN_VALUE</code></a>.</p>
<div class="blockIndicator note">
<p><strong>Starting with ECMAScript 2015,</strong> you are also able to check if a number is in the double-precision floating-point number range using <a href="Reference/Global_Objects/Number/isSafeInteger.html"><code>Number.isSafeInteger()</code></a> as well as <a href="Reference/Global_Objects/Number/MAX_SAFE_INTEGER.html"><code>Number.MAX_SAFE_INTEGER</code></a> and <a href="Reference/Global_Objects/Number/MIN_SAFE_INTEGER.html"><code>Number.MIN_SAFE_INTEGER</code></a>.</p>
<p>Beyond this range, integers in JavaScript are not safe anymore and will be a double-precision floating point approximation of the value.</p>
</div>
<p>The number type has only one integer with two representations: <code>0</code> is represented as both <code>-0</code> and <code>+0</code>. (<code>0</code> is an alias for <code>+0</code>.) </p>
<p>In the praxis, this has almost no impact. For example, <code>+0 === -0</code> is <code>true</code>. However, you are able to notice this when you divide by zero:</p>
<div class="sourceCode" id="cb102"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb102-1" title="1"><span class="op">&gt;</span> <span class="dv">42</span> / <span class="op">+</span><span class="dv">0</span></a>
<a class="sourceLine" id="cb102-2" title="2"><span class="kw">Infinity</span></a>
<a class="sourceLine" id="cb102-3" title="3"><span class="op">&gt;</span> <span class="dv">42</span> / <span class="dv">-0</span></a>
<a class="sourceLine" id="cb102-4" title="4"><span class="op">-</span><span class="kw">Infinity</span></a></code></pre></div>
<p>Although a number often represents only its value, JavaScript provides <a href="Reference/Operators.html"><code>binary (bitwise) operators</code></a>.</p>
<div class="blockIndicator note">
<p><strong>Caution:</strong> Although bitwise operators <em>can</em> be used to represent several Boolean values within a single number using <a href="../../../../../external.html?link=http://en.wikipedia.org/wiki/Mask_(computing)" class="external">bit masking</a>, this is usually considered a bad practice. JavaScript offers other means to represent a set of Booleans (like an array of Booleans, or an object with Boolean values assigned to named properties). Bit masking also tends to make the code more difficult to read, understand, and maintain.</p>
</div>
<p>It may be necessary to use such techniques in very constrained environments, like when trying to cope with the limitations of local storage, or in extreme cases (such as when each bit over the network counts). This technique should only be considered when it is the last measure that can be taken to optimize size.</p>
<h3 id="BigInt_type">BigInt type</h3>
<p>The <a href="Reference/Global_Objects/BigInt.html"><code>BigInt</code></a> type is a numeric primitive in JavaScript that can represent integers with arbitrary precision. With <code>BigInt</code>s, you can safely store and operate on large integers even beyond the safe integer limit for <code>Number</code>s.</p>
<p>A <code>BigInt</code> is created by appending <code>n</code> to the end of an integer or by calling the constructor.</p>
<p>You can obtain the safest value that can be incremented with <code>Number</code>s by using the constant <a href="Reference/Global_Objects/Number/MAX_SAFE_INTEGER.html"><code>Number.MAX_SAFE_INTEGER</code></a>. With the introduction of <code>BigInt</code>s, you can operate with numbers beyond the <a href="Reference/Global_Objects/Number/MAX_SAFE_INTEGER.html"><code>Number.MAX_SAFE_INTEGER</code></a>.</p>
<p>This example demonstrates, where incrementing the <a href="Reference/Global_Objects/Number/MAX_SAFE_INTEGER.html"><code>Number.MAX_SAFE_INTEGER</code></a> returns the expected result:</p>
<div class="sourceCode" id="cb103"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb103-1" title="1"><span class="op">&gt;</span> <span class="kw">const</span> x <span class="op">=</span> 2n <span class="op">**</span> 53n<span class="op">;</span></a>
<a class="sourceLine" id="cb103-2" title="2">9007199254740992n</a>
<a class="sourceLine" id="cb103-3" title="3"><span class="op">&gt;</span> <span class="kw">const</span> y <span class="op">=</span> x <span class="op">+</span> 1n<span class="op">;</span> </a>
<a class="sourceLine" id="cb103-4" title="4">9007199254740993n</a></code></pre></div>
<p>You can use the operators <code>+</code>, <code>*</code>, <code>-</code>, <code>**</code>, and <code>%</code> with <code>BigInt</code>s—just like with <code>Number</code>s. A <code>BigInt</code> is not strictly equal to a <code>Number</code>, but it is loosely so.</p>
<p>A <code>BigInt</code> behaves like a <code>Number</code> in cases where it is converted to <code>Boolean</code>: <code>if</code>, <code>||</code>, <code>&amp;&amp;</code>, <code>Boolean</code>, <code>!</code>.</p>
<p><code>BigInt</code>s cannot be operated on interchangeably with <code>Number</code>s. Instead a <a href="Reference/Global_Objects/TypeError.html"><code>TypeError</code></a> will be thrown.</p>
<h3 id="String_type">String type</h3>
<p>JavaScript's <a href="Reference/Global_Objects/String.html"><code>String</code></a> type is used to represent textual data. It is a set of "elements" of 16-bit unsigned integer values. Each element in the String occupies a position in the String. The first element is at index <code>0</code>, the next at index <code>1</code>, and so on. The length of a String is the number of elements in it.</p>
<p>Unlike some programming languages (such as C), JavaScript strings are immutable. This means that once a string is created, it is not possible to modify it.</p>
<p>However, it is still possible to create another string based on an operation on the original string. For example:</p>
<ul>
<li>A substring of the original by picking individual letters or using <a href="Reference/Global_Objects/String/substr.html"><code>String.substr()</code></a>.</li>
<li>A concatenation of two strings using the concatenation operator (<code>+</code>) or <a href="Reference/Global_Objects/String/concat.html"><code>String.concat()</code></a>.</li>
</ul>
<h4 id="Beware_of_stringly-typing_your_code!">Beware of "stringly-typing" your code!</h4>
<p>It can be tempting to use strings to represent complex data. Doing this comes with short-term benefits:</p>
<ul>
<li>It is easy to build complex strings with concatenation.</li>
<li>Strings are easy to debug (what you see printed is always what is in the string).</li>
<li>Strings are the common denominator of a lot of APIs (<a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement" title="HTMLInputElement">input fields</a>, <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Storage" title="Storage">local storage</a> values, <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" title="Use XMLHttpRequest (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing."><code>XMLHttpRequest</code></a> responses when using <code>responseText</code>, etc.) and it can be tempting to only work with strings.</li>
</ul>
<p>With conventions, it is possible to represent any data structure in a string. This does not make it a good idea. For instance, with a separator, one could emulate a list (while a JavaScript array would be more suitable). Unfortunately, when the separator is used in one of the "list" elements, then, the list is broken. An escape character can be chosen, etc. All of this requires conventions and creates an unnecessary maintenance burden.</p>
<p>Use strings for textual data. When representing complex data, <em>parse</em> strings, and use the appropriate abstraction.</p>
<h3 id="Symbol_type">Symbol type</h3>
<p>A Symbol is a <strong>unique</strong> and <strong>immutable</strong> primitive value and may be used as the key of an Object property (see below). In some programming languages, Symbols are called "atoms".</p>
<p>For more details see <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/Symbol">Symbol</a> and the <a href="Reference/Global_Objects/Symbol.html"><code>Symbol</code></a> object wrapper in JavaScript.</p>
<h2 id="Objects">Objects</h2>
<p>In computer science, an object is a value in memory which is possibly referenced by an <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/Identifier">identifier</a>.</p>
<h3 id="Properties">Properties</h3>
<p>In JavaScript, objects can be seen as a collection of properties. With the <a href="Guide/Grammar_and_types-2.html#Object_literals">object literal syntax</a>, a limited set of properties are initialized; then properties can be added and removed. Property values can be values of any type, including other objects, which enables building complex data structures. Properties are identified using <em>key</em> values. A <em>key</em> value is either a String or a Symbol value.</p>
<p>There are two types of object properties which have certain attributes: The <em>data</em> property and the <em>accessor</em> property.</p>
<div class="blockIndicator note">
<p><strong>Note:</strong> Each property has corresponding <em>attributes. </em>Attributes are used internally by the JavaScript engine, so you cannot directly access them. That's why attributes are listed in double square brackets, rather than single.</p>
<p>See <a href="Reference/Global_Objects/Object/defineProperty.html"><code>Object.defineProperty()</code></a> to learn more.</p>
</div>
<h4 id="Data_property">Data property</h4>
<p>Associates a key with a value, and has the following attributes:</p>
<table>
<caption>Attributes of a data property</caption>
<colgroup>
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
</colgroup>
<thead>
<tr class="header">
<th>Attribute</th>
<th>Type</th>
<th>Description</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>[[Value]]</td>
<td>Any JavaScript type</td>
<td>The value retrieved by a get access of the property.</td>
<td><code>undefined</code></td>
</tr>
<tr class="even">
<td>[[Writable]]</td>
<td>Boolean</td>
<td>If <code>false</code>, the property's [[Value]] cannot be changed.</td>
<td><code>false</code></td>
</tr>
<tr class="odd">
<td>[[Enumerable]]</td>
<td>Boolean</td>
<td><p>If <code>true</code>, the property will be enumerated in <a href="Reference/Statements/for...html">for...in</a> loops.<br />
See also <a href="Enumerability_and_ownership_of_properties.html">Enumerability and ownership of properties</a>.</p></td>
<td><code>false</code></td>
</tr>
<tr class="even">
<td>[[Configurable]]</td>
<td>Boolean</td>
<td>If <code>false</code>, the property cannot be deleted, cannot be changed to an accessor property, and attributes other than [[Value]] and [[Writable]] cannot be changed.</td>
<td><code>false</code></td>
</tr>
</tbody>
</table>
<table>
<caption>Obsolete attributes (as of ECMAScript 3, renamed in ECMAScript 5)</caption>
<thead>
<tr class="header">
<th>Attribute</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Read-only</td>
<td>Boolean</td>
<td>Reversed state of the ES5 [[Writable]] attribute.</td>
</tr>
<tr class="even">
<td>DontEnum</td>
<td>Boolean</td>
<td>Reversed state of the ES5 [[Enumerable]] attribute.</td>
</tr>
<tr class="odd">
<td>DontDelete</td>
<td>Boolean</td>
<td>Reversed state of the ES5 [[Configurable]] attribute.</td>
</tr>
</tbody>
</table>
<h4 id="Accessor_property">Accessor property</h4>
<p>Associates a key with one of two accessor functions (<code>get</code> and <code>set</code>) to retrieve or store a value, and has the following attributes:</p>
<table>
<caption>Attributes of an accessor property</caption>
<thead>
<tr class="header">
<th>Attribute</th>
<th>Type</th>
<th>Description</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>[[Get]]</td>
<td>Function object or <code>undefined</code></td>
<td>The function is called with an empty argument list and retrieves the property value whenever a get access to the value is performed.<br />
See also <a href="Reference/Functions/get.html"><code>get</code></a>.</td>
<td><code>undefined</code></td>
</tr>
<tr class="even">
<td>[[Set]]</td>
<td>Function object or <code>undefined</code></td>
<td>The function is called with an argument that contains the assigned value and is executed whenever a specified property is attempted to be changed.<br />
See also <a href="Reference/Functions/set.html"><code>set</code></a>.</td>
<td><code>undefined</code></td>
</tr>
<tr class="odd">
<td>[[Enumerable]]</td>
<td>Boolean</td>
<td>If <code>true</code>, the property will be enumerated in <a href="Reference/Statements/for...html">for...in</a> loops.</td>
<td><code>false</code></td>
</tr>
<tr class="even">
<td>[[Configurable]]</td>
<td>Boolean</td>
<td>If <code>false</code>, the property can't be deleted and can't be changed to a data property.</td>
<td><code>false</code></td>
</tr>
</tbody>
</table>
<h3 id="Normal_objects_and_functions">"Normal" objects, and functions</h3>
<p>A JavaScript object is a mapping between <em>keys</em> and <em>values</em>. Keys are strings (or <a href="Reference/Global_Objects/Symbol.html"><code>Symbol</code></a>s), and <em>values</em> can be anything. This makes objects a natural fit for <a href="../../../../../external.html?link=http://en.wikipedia.org/wiki/Hash_table" class="external">hashmaps</a>.</p>
<p>Functions are regular objects with the additional capability of being <em>callable</em>.</p>
<h3 id="Dates">Dates</h3>
<p>When representing dates, the best choice is to use the built-in <a href="Reference/Global_Objects/Date.html"><code>Date</code> utility</a> in JavaScript.</p>
<h3 id="Indexed_collections_Arrays_and_typed_Arrays">Indexed collections: Arrays and typed Arrays</h3>
<p><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array" title="Array">Arrays</a> are regular objects for which there is a particular relationship between integer-key-ed properties and the <code>length</code> property.</p>
<p>Additionally, arrays inherit from <code>Array.prototype</code>, which provides to them a handful of convenient methods to manipulate arrays. For example, <code>indexOf</code> (searching a value in the array) or <code>push</code> (adding an element to the array), and so on. This makes Arrays a perfect candidate to represent lists or sets.</p>
<p><a href="Typed_arrays.html">Typed Arrays</a> are new to JavaScript with ECMAScript 2015, and present an array-like view of an underlying binary data buffer. The following table helps determine the equivalent C data types:</p>
<table>
<thead>
<tr class="header">
<th>Type</th>
<th>Value Range</th>
<th>Size in bytes</th>
<th>Description</th>
<th>Web IDL type</th>
<th>Equivalent C type</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="Reference/Global_Objects/Int8Array.html"><code>Int8Array</code></a></td>
<td><code>-128</code> to <code>127</code></td>
<td>1</td>
<td>8-bit two's complement signed integer</td>
<td><code>byte</code></td>
<td><code>int8_t</code></td>
</tr>
<tr class="even">
<td><a href="Reference/Global_Objects/Uint8Array.html"><code>Uint8Array</code></a></td>
<td><code>0</code> to <code>255</code></td>
<td>1</td>
<td>8-bit unsigned integer</td>
<td><code>octet</code></td>
<td><code>uint8_t</code></td>
</tr>
<tr class="odd">
<td><a href="Reference/Global_Objects/Uint8ClampedArray.html"><code>Uint8ClampedArray</code></a></td>
<td><code>0</code> to <code>255</code></td>
<td>1</td>
<td>8-bit unsigned integer (clamped)</td>
<td><code>octet</code></td>
<td><code>uint8_t</code></td>
</tr>
<tr class="even">
<td><a href="Reference/Global_Objects/Int16Array.html"><code>Int16Array</code></a></td>
<td><code>-32768</code> to <code>32767</code></td>
<td>2</td>
<td>16-bit two's complement signed integer</td>
<td><code>short</code></td>
<td><code>int16_t</code></td>
</tr>
<tr class="odd">
<td><a href="Reference/Global_Objects/Uint16Array.html"><code>Uint16Array</code></a></td>
<td><code>0</code> to <code>65535</code></td>
<td>2</td>
<td>16-bit unsigned integer</td>
<td><code>unsigned short</code></td>
<td><code>uint16_t</code></td>
</tr>
<tr class="even">
<td><a href="Reference/Global_Objects/Int32Array.html"><code>Int32Array</code></a></td>
<td><code>-2147483648</code> to <code>2147483647</code></td>
<td>4</td>
<td>32-bit two's complement signed integer</td>
<td><code>long</code></td>
<td><code>int32_t</code></td>
</tr>
<tr class="odd">
<td><a href="Reference/Global_Objects/Uint32Array.html"><code>Uint32Array</code></a></td>
<td><code>0</code> to <code>4294967295</code></td>
<td>4</td>
<td>32-bit unsigned integer</td>
<td><code>unsigned long</code></td>
<td><code>uint32_t</code></td>
</tr>
<tr class="even">
<td><a href="Reference/Global_Objects/Float32Array.html"><code>Float32Array</code></a></td>
<td><code>1.2</code><span>×</span><code>10-38</code> to <code>3.4</code><span>×</span><code>1038</code></td>
<td>4</td>
<td>32-bit IEEE floating point number (7 significant digits e.g., <code>1.1234567</code>)</td>
<td><code>unrestricted float</code></td>
<td><code>float</code></td>
</tr>
<tr class="odd">
<td><a href="Reference/Global_Objects/Float64Array.html"><code>Float64Array</code></a></td>
<td><code>5.0</code><span>×</span><code>10-324</code> to <code>1.8</code><span>×</span><code>10308</code></td>
<td>8</td>
<td>64-bit IEEE floating point number (16 significant digits e.g., <code>1.123...15</code>)</td>
<td><code>unrestricted double</code></td>
<td><code>double</code></td>
</tr>
<tr class="even">
<td><a href="Reference/Global_Objects/BigInt64Array.html"><code>BigInt64Array</code></a></td>
<td><code>-263</code> to <code>263-1</code></td>
<td>8</td>
<td>64-bit two's complement signed integer</td>
<td><code>bigint</code></td>
<td><code>int64_t (signed long long)</code></td>
</tr>
<tr class="odd">
<td><a href="Reference/Global_Objects/BigUint64Array.html"><code>BigUint64Array</code></a></td>
<td><code>0</code> to <code>264-1</code></td>
<td>8</td>
<td>64-bit unsigned integer</td>
<td><code>bigint</code></td>
<td><code>uint64_t (unsigned long long)</code></td>
</tr>
</tbody>
</table>
<h3 id="Keyed_collections_Maps_Sets_WeakMaps_WeakSets">Keyed collections: Maps, Sets, WeakMaps, WeakSets</h3>
<p>These data structures, introduced in ECMAScript Edition 6, take object references as keys. <a href="Reference/Global_Objects/Set.html"><code>Set</code></a> and <a href="Reference/Global_Objects/WeakSet.html"><code>WeakSet</code></a> represent a set of objects, while <a href="Reference/Global_Objects/Map.html"><code>Map</code></a> and <a href="Reference/Global_Objects/WeakMap.html"><code>WeakMap</code></a> associate a value to an object.</p>
<p>The difference between <code>Map</code>s and <code>WeakMap</code>s is that in the former, object keys can be enumerated over. This allows garbage collection optimizations in the latter case.</p>
<p>One could implement <code>Map</code>s and <code>Set</code>s in pure ECMAScript 5. However, since objects cannot be compared (in the sense of <code>&lt;</code> "less than", for instance), look-up performance would necessarily be linear. Native implementations of them (including <code>WeakMap</code>s) can have look-up performance that is approximately logarithmic to constant time.</p>
<p>Usually, to bind data to a DOM node, one could set properties directly on the object, or use <code>data-*</code> attributes. This has the downside that the data is available to any script running in the same context. <code>Map</code>s and <code>WeakMap</code>s make it easy to <em>privately</em> bind data to an object.</p>
<h3 id="Structured_data_JSON">Structured data: JSON</h3>
<p>JSON (<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation) is a lightweight data-interchange format, derived from JavaScript, but used by many programming languages. JSON builds universal data structures.</p>
<p>See <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/JSON">JSON</a> and <a href="Reference/Global_Objects/JSON.html"><code>JSON</code></a> for more details.</p>
<h3 id="More_objects_in_the_standard_library">More objects in the standard library</h3>
<p>JavaScript has a standard library of built-in objects.</p>
<p>Please have a look at the <a href="Reference/Global_Objects.html">reference</a> to find out about more objects.</p>
<h2 id="Determining_types_using_the_typeof_operator">Determining types using the <code>typeof</code> operator</h2>
<p>The <code>typeof</code> operator can help you to find the type of your variable.</p>
<p>Please read the <a href="Reference/Operators/typeof.html">reference page</a> for more details and edge cases.</p>
<h2 id="Specifications">Specifications</h2>
<table>
<thead>
<tr class="header">
<th>Specification</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="../../../../../external.html?link=https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values" class="external">ECMAScript (ECMA-262)<br />
<span class="small">The definition of 'ECMAScript Data Types and Values' in that specification.</span></a></td>
</tr>
</tbody>
</table>
<h2 id="See_also">See also</h2>
<ul>
<li><a href="../../../../../external.html?link=https://github.com/nzakas/computer-science-in-javascript/" class="external link-https">Nicholas Zakas collection of common data structure and common algorithms in JavaScript.</a></li>
<li><a href="../../../../../external.html?link=https://github.com/monmohan/DataStructures_In_Javascript" class="external" title="https://github.com/monmohan/DataStructures_In_Javascript">Search Tre(i)es implemented in JavaScript</a></li>
</ul>
<div class="metadata">
<section class="document-meta">
<h4 id="metadata-2">Metadata</h4>
<ul>
<li><strong>Last modified:</strong> Sep 22, 2020, <a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures$history">by MDN contributors</a></li>
</ul>
</section>
</div>
</div>
<div id="sidebar-quicklinks" class="sidebar">
<div class="quick-links">
<div class="quick-links-head sidebar-heading">
Related Topics
</div>
<div>
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong><em>JavaScript</em></strong></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong>Tutorials:</strong></a></li>
<li>Complete beginners
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics">JavaScript basics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps">JavaScript first steps</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks">JavaScript building blocks</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Introducing JavaScript objects</a></li>
</ol></li>
<li>JavaScript Guide
<ol>
<li><a href="Guide/Introduction.html">Introduction</a></li>
<li><a href="Guide/Grammar_and_Types.html">Grammar and types</a></li>
<li><a href="Guide/Control_flow_and_error_handling.html">Control flow and error handling</a></li>
<li><a href="Guide/Loops_and_iteration.html">Loops and iteration</a></li>
<li><a href="Guide/Functions.html">Functions</a></li>
<li><a href="Guide/Expressions_and_Operators.html">Expressions and operators</a></li>
<li><a href="Guide/Numbers_and_dates.html">Numbers and dates</a></li>
<li><a href="Guide/Text_formatting.html">Text formatting</a></li>
<li><a href="Guide/Regular_Expressions.html">Regular expressions</a></li>
<li><a href="Guide/Indexed_collections.html">Indexed collections</a></li>
<li><a href="Guide/Keyed_collections.html">Keyed collections</a></li>
<li><a href="Guide/Working_with_Objects.html">Working with objects</a></li>
<li><a href="Guide/Details_of_the_Object_Model.html">Details of the object model</a></li>
<li><a href="Guide/Using_promises.html">Using promises</a></li>
<li><a href="Guide/Iterators_and_generators.html">Iterators and generators</a></li>
<li><a href="Guide/Meta_programming.html">Meta programming</a></li>
<li><a href="Guide/Modules.html">JavaScript modules</a></li>
</ol></li>
<li>Intermediate
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks">Client-side JavaScript frameworks</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs">Client-side web APIs</a></li>
<li><a href="A_re-introduction_to_JavaScript.html">A re-introduction to JavaScript</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Equality_comparisons_and_sameness.html">Equality comparisons and sameness</a></li>
<li><a href="Closures.html">Closures</a></li>
</ol></li>
<li>Advanced
<ol>
<li><a href="Inheritance_and_the_prototype_chain.html">Inheritance and the prototype chain</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Typed_arrays.html">JavaScript typed arrays</a></li>
<li><a href="Memory_Management.html">Memory Management</a></li>
<li><a href="EventLoop.html">Concurrency model and Event Loop</a></li>
</ol></li>
<li><strong><a href="Reference.html">References:</a></strong></li>
<li>Built-in objects
<ol>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/AggregateError.html" title="The AggregateError object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by Promise.any(), when all promises passed to it reject.">AggregateError</a></li>
<li><a href="Reference/Global_Objects/Array.html" title="The JavaScript Array class is a global object that is used in the construction of arrays; which are high-level, list-like objects.">Array</a></li>
<li><a href="Reference/Global_Objects/ArrayBuffer.html" title="The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer.">ArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/AsyncFunction.html" title="The AsyncFunction constructor creates a new async function object. In JavaScript, every asynchronous function is actually an AsyncFunction object.">AsyncFunction</a></li>
<li><a href="Reference/Global_Objects/Atomics.html" title="The Atomics object provides atomic operations as static methods. They are used with SharedArrayBuffer and ArrayBuffer objects.">Atomics</a></li>
<li><a href="Reference/Global_Objects/BigInt.html" title="BigInt is a built-in object that provides a way to represent whole numbers larger than 253 - 1, which is the largest number JavaScript can reliably represent with the Number primitive and represented by the Number.MAX_SAFE_INTEGER constant. BigInt can be used for arbitrarily large integers.">BigInt</a></li>
<li><a href="Reference/Global_Objects/BigInt64Array.html" title="The BigInt64Array typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigInt64Array</a></li>
<li><a href="Reference/Global_Objects/BigUint64Array.html" title="The BigUint64Array typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigUint64Array</a></li>
<li><a href="Reference/Global_Objects/Boolean.html" title="The Boolean object is an object wrapper for a boolean value.">Boolean</a></li>
<li><a href="Reference/Global_Objects/DataView.html" title="The DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform&#39;s endianness.">DataView</a></li>
<li><a href="Reference/Global_Objects/Date.html" title="JavaScript Date objects represent a single moment in time in a platform-independent format.">Date</a></li>
<li><a href="Reference/Global_Objects/Error.html" title="Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.">Error</a></li>
<li><a href="Reference/Global_Objects/EvalError.html" title="The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.">EvalError</a></li>
<li><a href="Reference/Global_Objects/FinalizationRegistry.html" title="A FinalizationRegistry object lets you request a callback when an object is garbage-collected.">FinalizationRegistry</a></li>
<li><a href="Reference/Global_Objects/Float32Array.html" title="The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float32Array</a></li>
<li><a href="Reference/Global_Objects/Float64Array.html" title="The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float64Array</a></li>
<li><a href="Reference/Global_Objects/Function.html" title="Every JavaScript function is actually a Function object. This can be seen with the code (function(){}).constructor === Function, which returns true.">Function</a></li>
<li><a href="Reference/Global_Objects/Generator.html" title="The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.">Generator</a></li>
<li><a href="Reference/Global_Objects/GeneratorFunction.html" title="The GeneratorFunction constructor creates a new generator function object. In JavaScript, every generator function is actually a GeneratorFunction object.">GeneratorFunction</a></li>
<li><a href="Reference/Global_Objects/Infinity.html" title="The global property Infinity is a numeric value representing infinity.">Infinity</a></li>
<li><a href="Reference/Global_Objects/Int16Array.html" title="The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int16Array</a></li>
<li><a href="Reference/Global_Objects/Int32Array.html" title="The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int32Array</a></li>
<li><a href="Reference/Global_Objects/Int8Array.html" title="The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int8Array</a></li>
<li><a href="Reference/Global_Objects/InternalError.html" title="The InternalError object indicates an error that occurred internally in the JavaScript engine.">InternalError</a></li>
<li><a href="Reference/Global_Objects/Intl.html" title="The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The Intl object provides access to several constructors as well as functionality common to the internationalization constructors and other language sensitive functions.">Intl</a></li>
<li><a href="Reference/Global_Objects/JSON.html" title="The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can&#39;t be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.">JSON</a></li>
<li><a href="Reference/Global_Objects/Map.html" title="The Map object holds key-value pairs and remembers the original insertion order of the keys.">Map</a></li>
<li><a href="Reference/Global_Objects/Math.html" title="Math is a built-in object that has properties and methods for mathematical constants and functions. It’s not a function object.">Math</a></li>
<li><a href="Reference/Global_Objects/NaN.html" title="The global NaN property is a value representing Not-A-Number.">NaN</a></li>
<li><a href="Reference/Global_Objects/Number.html" title="The Number constructor contains constants and methods for working with numbers. Values of other types can be converted to numbers using the Number() function.">Number</a></li>
<li><a href="Reference/Global_Objects/Object.html" title="The Object class represents one of JavaScript&#39;s data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.">Object</a></li>
<li><a href="Reference/Global_Objects/Promise.html" title="The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.">Promise</a></li>
<li><a href="Reference/Global_Objects/Proxy.html" title="The Proxy object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.">Proxy</a></li>
<li><a href="Reference/Global_Objects/RangeError.html" title="The RangeError object indicates an error when a value is not in the set or range of allowed values.">RangeError</a></li>
<li><a href="Reference/Global_Objects/ReferenceError.html" title="The ReferenceError object represents an error when a non-existent variable is referenced.">ReferenceError</a></li>
<li><a href="Reference/Global_Objects/Reflect.html" title="Reflect is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of proxy handlers. Reflect is not a function object, so it&#39;s not constructible.">Reflect</a></li>
<li><a href="Reference/Global_Objects/RegExp.html" title="The RegExp object is used for matching text with a pattern.">RegExp</a></li>
<li><a href="Reference/Global_Objects/Set.html" title="The Set object lets you store unique values of any type, whether primitive values or object references.">Set</a></li>
<li><a href="Reference/Global_Objects/SharedArrayBuffer.html" title="The SharedArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. Unlike an ArrayBuffer, a SharedArrayBuffer cannot become detached.">SharedArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/String.html" title="The String object is used to represent and manipulate a sequence of characters.">String</a></li>
<li><a href="Reference/Global_Objects/Symbol.html" title="The data type symbol is a primitive data type. The Symbol() function returns a value of type symbol, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class, but is incomplete as a constructor because it does not support the syntax &quot;new Symbol()&quot;.">Symbol</a></li>
<li><a href="Reference/Global_Objects/SyntaxError.html" title="The SyntaxError object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.">SyntaxError</a></li>
<li><a href="Reference/Global_Objects/TypeError.html" title="The TypeError object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.">TypeError</a></li>
<li><a href="Reference/Global_Objects/TypedArray.html" title="A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.">TypedArray</a></li>
<li><a href="Reference/Global_Objects/URIError.html" title="The URIError object represents an error when a global URI handling function was used in a wrong way.">URIError</a></li>
<li><a href="Reference/Global_Objects/Uint16Array.html" title="The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint16Array</a></li>
<li><a href="Reference/Global_Objects/Uint32Array.html" title="The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint32Array</a></li>
<li><a href="Reference/Global_Objects/Uint8Array.html" title="The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8Array</a></li>
<li><a href="Reference/Global_Objects/Uint8ClampedArray.html" title="The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8ClampedArray</a></li>
<li><a href="Reference/Global_Objects/WeakMap.html" title="The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.">WeakMap</a></li>
<li><a href="Reference/Global_Objects/WeakRef.html" title="A WeakRef object lets you hold a weak reference to another object, without preventing that object from getting garbage-collected.">WeakRef</a></li>
<li><a href="Reference/Global_Objects/WeakSet.html" title="The WeakSet object lets you store weakly held objects in a collection.">WeakSet</a></li>
<li><a href="Reference/Global_Objects/WebAssembly.html" title="The WebAssembly JavaScript object acts as the namespace for all WebAssembly-related functionality.">WebAssembly</a></li>
<li><a href="Reference/Global_Objects/decodeURI.html" title="The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or by a similar routine.">decodeURI()</a></li>
<li><a href="Reference/Global_Objects/decodeURIComponent.html" title="The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.">decodeURIComponent()</a></li>
<li><a href="Reference/Global_Objects/encodeURI.html" title="The encodeURI() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURI()</a></li>
<li><a href="Reference/Global_Objects/encodeURIComponent.html" title="The encodeURIComponent() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURIComponent()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/escape.html" title="The escape() function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.">escape()</a></li>
<li><a href="Reference/Global_Objects/eval.html" title="The eval() function evaluates JavaScript code represented as a string.">eval()</a></li>
<li><a href="Reference/Global_Objects/globalThis.html" title="The global globalThis property contains the global this value, which is akin to the global object.">globalThis</a></li>
<li><a href="Reference/Global_Objects/isFinite.html" title="The global isFinite() function determines whether the passed value is a finite number. If  needed, the parameter is first converted to a number.">isFinite()</a></li>
<li><a href="Reference/Global_Objects/isNaN.html" title="The isNaN() function determines whether a value is NaN or not. Note, coercion inside the isNaN function has interesting rules; you may alternatively want to use Number.isNaN(), as defined in ECMAScript 2015.">isNaN()</a></li>
<li><a href="Reference/Global_Objects/null.html" title="The value null represents the intentional absence of any object value. It is one of JavaScript&#39;s primitive values and is treated as falsy for boolean operations.">null</a></li>
<li><a href="Reference/Global_Objects/parseFloat.html" title="The parseFloat() function parses an argument (converting it to a string first if needed) and returns a floating point number.">parseFloat()</a></li>
<li><a href="Reference/Global_Objects/parseInt.html" title="The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).">parseInt()</a></li>
<li><a href="Reference/Global_Objects/undefined.html" title="The global undefined property represents the primitive value undefined. It is one of JavaScript&#39;s primitive types.">undefined</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/unescape.html" title="The unescape() function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Usually, decodeURI or decodeURIComponent are preferred over unescape.">unescape()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><a href="Reference/Global_Objects/uneval.html" title="The uneval() function creates a string representation of the source code of an Object.">uneval()</a></li>
</ol></li>
<li>Expressions &amp; operators
<ol>
<li><a href="Reference/Operators/Addition.html" title="The addition operator (+) produces the sum of numeric operands or string concatenation.">Addition (+)</a></li>
<li><a href="Reference/Operators/Addition_assignment.html" title="The addition assignment operator (+=) adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible.">Addition assignment (+=)</a></li>
<li><a href="Reference/Operators/Assignment.html" title="The simple assignment operator (=) is used to assign a value to a variable. The assignment operation evaluates to the assigned value. Chaining the assignment operator is possible in order to assign a single value to multiple variables">Assignment (=)</a></li>
<li><a href="Reference/Operators/Bitwise_AND.html" title="The bitwise AND operator (&amp;) returns a 1 in each bit position for which the corresponding bits of both operands are 1s.">Bitwise AND (&amp;)</a></li>
<li><a href="Reference/Operators/Bitwise_AND_assignment.html" title="The bitwise AND assignment operator (&amp;=) uses the binary representation of both operands, does a bitwise AND operation on them and assigns the result to the variable.">Bitwise AND assignment (&amp;=)</a></li>
<li><a href="Reference/Operators/Bitwise_NOT.html" title="The bitwise NOT operator (~) inverts the bits of its operand.">Bitwise NOT (~)</a></li>
<li><a href="Reference/Operators/Bitwise_OR.html" title="The bitwise OR operator (|) returns a 1 in each bit position for which the corresponding bits of either or both operands are 1s.">Bitwise OR (|)</a></li>
<li><a href="Reference/Operators/Bitwise_OR_assignment.html" title="The bitwise OR assignment operator (|=) uses the binary representation of both operands, does a bitwise OR operation on them and assigns the result to the variable.">Bitwise OR assignment (|=)</a></li>
<li><a href="Reference/Operators/Bitwise_XOR.html" title="The bitwise XOR operator (^) returns a 1 in each bit position for which the corresponding bits of either but not both operands are 1s.">Bitwise XOR (^)</a></li>
<li><a href="Reference/Operators/Bitwise_XOR_assignment.html" title="The bitwise XOR assignment operator (^=) uses the binary representation of both operands, does a bitwise XOR operation on them and assigns the result to the variable.">Bitwise XOR assignment (^=)</a></li>
<li><a href="Reference/Operators/Comma_Operator.html" title="The comma operator (,) evaluates each of its operands (from left to right) and returns the value of the last operand. This lets you create a compound expression in which multiple expressions are evaluated, with the compound expression&#39;s final value being the value of the rightmost of its member expressions. This is commonly used to provide multiple parameters to a for loop.">Comma operator (,)</a></li>
<li><a href="Reference/Operators/Conditional_Operator.html" title="The conditional (ternary) operator is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy.">Conditional (ternary) operator</a></li>
<li><a href="Reference/Operators/Decrement.html" title="The decrement operator (--) decrements (subtracts one from) its operand and returns a value.">Decrement (--)</a></li>
<li><a href="Reference/Operators/Destructuring_assignment.html" title="The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.">Destructuring assignment</a></li>
<li><a href="Reference/Operators/Division.html" title="The division operator (/) produces the quotient of its operands where the left operand is the dividend and the right operand is the divisor.">Division (/)</a></li>
<li><a href="Reference/Operators/Division_assignment.html" title="The division assignment operator (/=) divides a variable by the value of the right operand and assigns the result to the variable.">Division assignment (/=)</a></li>
<li><a href="Reference/Operators/Equality.html" title="The equality operator (==) checks whether its two operands are equal, returning a Boolean result. Unlike the strict equality operator, it attempts to convert and compare operands that are of different types.">Equality (==)</a></li>
<li><a href="Reference/Operators/Exponentiation.html" title="The exponentiation operator (**) returns the result of raising the first operand to the power of the second operand. It is equivalent to Math.pow, except it also accepts BigInts as operands.">Exponentiation (**)</a></li>
<li><a href="Reference/Operators/Exponentiation_assignment.html" title="The exponentiation assignment operator (**=) raises the value of a variable to the power of the right operand.">Exponentiation assignment (**=)</a></li>
<li><a href="Reference/Operators/function.html" title="The function keyword can be used to define a function inside an expression.">Function expression</a></li>
<li><a href="Reference/Operators/Greater_than.html" title="The greater than operator (&gt;) returns true if the left operand is greater than the right operand, and false otherwise.">Greater than (&gt;)</a></li>
<li><a href="Reference/Operators/Greater_than_or_equal.html" title="The greater than or equal operator (&gt;=) returns true if the left operand is greater than or equal to the right operand, and false otherwise.">Greater than or equal (&gt;=)</a></li>
<li><a href="Reference/Operators/Grouping.html" title="The grouping operator ( ) controls the precedence of evaluation in expressions.">Grouping operator ( )</a></li>
<li><a href="Reference/Operators/Increment.html" title="The increment operator (++) increments (adds one to) its operand and returns a value.">Increment (++)</a></li>
<li><a href="Reference/Operators/Inequality.html" title="The inequality operator (!=) checks whether its two operands are not equal, returning a Boolean result. Unlike the strict inequality operator, it attempts to convert and compare operands that are of different types.">Inequality (!=)</a></li>
<li><a href="Reference/Operators/Left_shift.html" title="The left shift operator (&lt;&lt;) shifts the first operand the specified number of bits to the left. Excess bits shifted off to the left are discarded. Zero bits are shifted in from the right.">Left shift (&lt;&lt;)</a></li>
<li><a href="Reference/Operators/Left_shift_assignment.html" title="The left shift assignment operator (&lt;&lt;=) moves the specified amount of bits to the left and assigns the result to the variable.">Left shift assignment (&lt;&lt;=)</a></li>
<li><a href="Reference/Operators/Less_than.html" title="The less than operator (&lt;) returns true if the left operand is less than the right operand, and false otherwise.">Less than (&lt;)</a></li>
<li><a href="Reference/Operators/Less_than_or_equal.html" title="The less than or equal operator (&lt;=) returns true if the left operand is less than or equal to the right operand, and false otherwise.">Less than or equal (&lt;=)</a></li>
<li><a href="Reference/Operators/Logical_AND.html" title="The logical AND (&amp;&amp;) operator (logical conjunction) for a set of operands is true if and only if all of its operands are true. It is typically used with Boolean (logical) values. When it is, it returns a Boolean value. However, the &amp;&amp; operator actually returns the value of one of the specified operands, so if this operator is used with non-Boolean values, it will return a non-Boolean value.">Logical AND (&amp;&amp;)</a></li>
<li><a href="Reference/Operators/Logical_AND_assignment.html" title="The logical AND assignment (x &amp;&amp;= y) operator only assigns if x is truthy.">Logical AND assignment (&amp;&amp;=)</a></li>
<li><a href="Reference/Operators/Logical_NOT.html" title="The logical NOT (!) operator (logical complement, negation) takes truth to falsity and vice versa. It is typically used with Boolean (logical) values. When used with non-Boolean values, it returns false if its single operand can be converted to true; otherwise, returns true.">Logical NOT (!)</a></li>
<li><a href="Reference/Operators/Logical_OR.html" title="The logical OR (||) operator (logical disjunction) for a set of operands is true if and only if one or more of its operands is true. It is typically used with Boolean (logical) values. When it is, it returns a Boolean value. However, the || operator actually returns the value of one of the specified operands, so if this operator is used with non-Boolean values, it will return a non-Boolean value.">Logical OR (||)</a></li>
<li><a href="Reference/Operators/Logical_OR_assignment.html" title="The logical OR assignment (x ||= y) operator only assigns if x is falsy.">Logical OR assignment (||=)</a></li>
<li><a href="Reference/Operators/Logical_nullish_assignment.html" title="The logical nullish assignment (x ??= y) operator only assigns if x is nullish (null or undefined).">Logical nullish assignment (??=)</a></li>
<li><a href="Reference/Operators/Multiplication.html" title="The multiplication operator (*) produces the product of the operands.">Multiplication (*)</a></li>
<li><a href="Reference/Operators/Multiplication_assignment.html" title="The multiplication assignment operator (*=) multiplies a variable by the value of the right operand and assigns the result to the variable.">Multiplication assignment (*=)</a></li>
<li><a href="Reference/Operators/Nullish_coalescing_operator.html" title="The nullish coalescing operator (??) is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.">Nullish coalescing operator (??)</a></li>
<li><a href="Reference/Operators/Object_initializer.html" title="Objects can be initialized using new Object(), Object.create(), or using the literal notation (initializer notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).">Object initializer</a></li>
<li><a href="Reference/Operators/Operator_Precedence.html" title="Operator precedence determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.">Operator precedence</a></li>
<li><a href="Reference/Operators/Optional_chaining.html" title="The ?. operator functions similarly to the . chaining operator, except that instead of causing an error if a reference is nullish (null or undefined), the expression short-circuits with a return value of undefined.">Optional chaining (?.)</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Operators/Pipeline_operator.html" title="The experimental pipeline operator |&gt; (currently at stage 1) pipes the value of an expression into a function. This allows the creation of chained function calls in a readable manner. The result is syntactic sugar in which a function call with a single argument can be written like this:">Pipeline operator (|&gt;)</a></li>
<li><a href="Reference/Operators/Property_Accessors-2.html" title="Property accessors provide access to an object&#39;s properties by using the dot notation or the bracket notation.">Property accessors</a></li>
<li><a href="Reference/Operators/Remainder.html" title="The remainder operator (%) returns the remainder left over when one operand is divided by a second operand. It always takes the sign of the dividend.">Remainder (%)</a></li>
<li><a href="Reference/Operators/Remainder_assignment.html" title="The remainder assignment operator (%=) divides a variable by the value of the right operand and assigns the remainder to the variable.">Remainder assignment (%=)</a></li>
<li><a href="Reference/Operators/Right_shift.html" title="The right shift operator (&gt;&gt;) shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Copies of the leftmost bit are shifted in from the left. Since the new leftmost bit has the same value as the previous leftmost bit, the sign bit (the leftmost bit) does not change. Hence the name &quot;sign-propagating&quot;.">Right shift (&gt;&gt;)</a></li>
<li><a href="Reference/Operators/Right_shift_assignment.html" title="The right shift assignment operator (&gt;&gt;=) moves the specified amount of bits to the right and assigns the result to the variable.">Right shift assignment (&gt;&gt;=)</a></li>
<li><a href="Reference/Operators/Spread_syntax.html" title="Spread syntax (...) allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.">Spread syntax (...)</a></li>
<li><a href="Reference/Operators/Strict_equality.html" title="The strict equality operator (===) checks whether its two operands are equal, returning a Boolean result. Unlike the equality operator, the strict equality operator always considers operands of different types to be different.">Strict equality (===)</a></li>
<li><a href="Reference/Operators/Strict_inequality.html" title="The strict inequality operator (!==) checks whether its two operands are not equal, returning a Boolean result. Unlike the inequality operator, the strict inequality operator always considers operands of different types to be different.">Strict inequality (!==)</a></li>
<li><a href="Reference/Operators/Subtraction.html" title="The subtraction operator (-) subtracts the two operands, producing their difference.">Subtraction (-)</a></li>
<li><a href="Reference/Operators/Subtraction_assignment.html" title="The subtraction assignment operator (-=) subtracts the value of the right operand from a variable and assigns the result to the variable.">Subtraction assignment (-=)</a></li>
<li><a href="Reference/Operators/Unary_negation.html" title="The unary negation operator (-) precedes its operand and negates it.">Unary negation (-)</a></li>
<li><a href="Reference/Operators/Unary_plus.html" title="The unary plus operator (+) precedes its operand and evaluates to its operand but attempts to convert it into a number, if it isn&#39;t already.">Unary plus (+)</a></li>
<li><a href="Reference/Operators/Unsigned_right_shift.html" title="The unsigned right shift operator (&gt;&gt;&gt;) (zero-fill right shift) shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Zero bits are shifted in from the left. The sign bit becomes 0, so the result is always non-negative. Unlike the other bitwise operators, zero-fill right shift returns an unsigned 32-bit integer.">Unsigned right shift (&gt;&gt;&gt;)</a></li>
<li><a href="Reference/Operators/Unsigned_right_shift_assignment.html" title="The unsigned right shift assignment operator (&gt;&gt;&gt;=) moves the specified amount of bits to the right and assigns the result to the variable.">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li>
<li><a href="Reference/Operators/async_function.html" title="The async function keyword can be used to define async functions inside expressions.">async function expression</a></li>
<li><a href="Reference/Operators/await.html" title="The await operator is used to wait for a Promise. It can only be used inside an async function.">await</a></li>
<li><a href="Reference/Operators/class.html" title="The class expression is one way to define a class in ECMAScript 2015. Similar to function expressions, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. ">class expression</a></li>
<li><a href="Reference/Operators/delete.html" title="The JavaScript delete operator removes a property from an object; if no more references to the same property are held, it is eventually released automatically.">delete operator</a></li>
<li><a href="Reference/Operators/function_.html" title="The function* keyword can be used to define a generator function inside an expression.">function* expression</a></li>
<li><a href="Reference/Operators/in.html" title="The in operator returns true if the specified property is in the specified object or its prototype chain.">in operator</a></li>
<li><a href="Reference/Operators/instanceof.html" title="The instanceof operator tests to see if the prototype property of a constructor appears anywhere in the prototype chain of an object. The return value is a boolean value.">instanceof</a></li>
<li><a href="Reference/Operators/new.html" title="The new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.">new operator</a></li>
<li><a href="Reference/Operators/new-2.html" title="The new.target pseudo-property lets you detect whether a function or constructor was called using the new operator. In constructors and functions invoked using the new operator, new.target returns a reference to the constructor or function. In normal function calls, new.target is undefined.">new.target</a></li>
<li><a href="Reference/Operators/super.html" title="The super keyword is used to access and call functions on an object&#39;s parent.">super</a></li>
<li><a href="Reference/Operators/this.html" title="A function&#39;s this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode.">this</a></li>
<li><a href="Reference/Operators/typeof.html" title="The typeof operator returns a string indicating the type of the unevaluated operand.">typeof</a></li>
<li><a href="Reference/Operators/void.html" title="The void operator evaluates the given expression and then returns undefined.">void operator</a></li>
<li><a href="Reference/Operators/yield.html" title="The yield keyword is used to pause and resume a generator function (function* or legacy generator function).">yield</a></li>
<li><a href="Reference/Operators/yield_.html" title="The yield* expression is used to delegate to another generator or iterable object.">yield*</a></li>
</ol></li>
<li>Statements &amp; declarations
<ol>
<li><a href="Reference/Statements/async_function.html" title="An async function is a function declared with the async keyword. Async functions are instances of the AsyncFunction constructor, and the await keyword is permitted within them. The async and await keywords enable asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.">async function</a></li>
<li><a href="Reference/Statements/block.html" title="A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of braces (&quot;curly brackets&quot;) and may optionally be labelled:">block</a></li>
<li><a href="Reference/Statements/break.html" title="The break statement terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.">break</a></li>
<li><a href="Reference/Statements/class.html" title="The class declaration creates a new class with a given name using prototype-based inheritance.">class</a></li>
<li><a href="Reference/Statements/const.html" title="Constants are block-scoped, much like variables defined using the let keyword. The value of a constant can&#39;t be changed through reassignment, and it can&#39;t be redeclared.">const</a></li>
<li><a href="Reference/Statements/continue.html" title="The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.">continue</a></li>
<li><a href="Reference/Statements/debugger.html" title="The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.">debugger</a></li>
<li><a href="Reference/Statements/do...html" title="The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.">do...while</a></li>
<li><a href="Reference/Statements/Empty.html" title="An empty statement is used to provide no statement, although the JavaScript syntax would expect one.">empty</a></li>
<li><a href="Reference/Statements/export.html" title="The export statement is used when creating JavaScript modules to export live bindings to functions, objects, or primitive values from the module so they can be used by other programs with the import statement. Bindings that are exported can still be modified locally; when imported, although they can only be read by the importing module the value updates whenever it is updated by the exporting module.">export</a></li>
<li><a href="Reference/Statements/for.html" title="The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.">for</a></li>
<li><a href="Reference/Statements/for-await...html" title="The for await...of statement creates a loop iterating over async iterable objects as well as on sync iterables, including: built-in String, Array, Array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined async/sync iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object. Like the await operator, the statement can only be used inside an async function.">for await...of</a></li>
<li><a href="Reference/Statements/for...html" title="The for...in statement iterates over all enumerable properties of an object that are keyed by strings (ignoring ones keyed by Symbols), including inherited enumerable properties.">for...in</a></li>
<li><a href="Reference/Statements/for..-2.html" title="The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.">for...of</a></li>
<li><a href="Reference/Statements/function.html" title="The function declaration (function statement) defines a function with the specified parameters.">function declaration</a></li>
<li><a href="Reference/Statements/function_.html" title="The function* declaration (function keyword followed by an asterisk) defines a generator function, which returns a Generator object.">function*</a></li>
<li><a href="Reference/Statements/if...html" title="The if statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement can be executed.">if...else</a></li>
<li><a href="Reference/Statements/import.html" title="The static import statement is used to import read only live bindings which are exported by another module. ">import</a></li>
<li><a href="Reference/Statements/import-2.html" title="The import.meta object exposes context-specific metadata to a JavaScript module. It contains information about the module, like the module&#39;s URL.">import.meta</a></li>
<li><a href="Reference/Statements/label.html" title="The labeled statement can be used with break or continue statements. It is prefixing a statement with an identifier which you can refer to.">label</a></li>
<li><a href="Reference/Statements/let.html" title="The let statement declares a block-scoped local variable, optionally initializing it to a value.">let</a></li>
<li><a href="Reference/Statements/return.html" title="The return statement ends function execution and specifies a value to be returned to the function caller.">return</a></li>
<li><a href="Reference/Statements/switch.html" title="The switch statement evaluates an expression, matching the expression&#39;s value to a case clause, and executes statements associated with that case, as well as statements in cases that follow the matching case.">switch</a></li>
<li><a href="Reference/Statements/throw.html" title="The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won&#39;t be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.">throw</a></li>
<li><a href="Reference/Statements/try...html" title="The try...catch statement marks a block of statements to try and specifies a response should an exception be thrown.">try...catch</a></li>
<li><a href="Reference/Statements/var.html" title="The var statement declares a function-scoped or globally-scoped variable, optionally initializing it to a value.">var</a></li>
<li><a href="Reference/Statements/while.html" title="The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.">while</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Statements/with.html" title="The with statement extends the scope chain for a statement.">with</a></li>
</ol></li>
<li>Functions
<ol>
<li><a href="Reference/Functions/Arrow_functions.html" title="An arrow function expression is a compact alternative to a traditional function expression, but is limited and can&#39;t be used in all situations.">Arrow function expressions</a></li>
<li><a href="Reference/Functions/Default_parameters.html" title="Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.">Default parameters</a></li>
<li><a href="Reference/Functions/Method_definitions.html" title="Starting with ECMAScript 2015, a shorter syntax for method definitions on objects initializers is introduced. It is a shorthand for a function assigned to the method&#39;s name.">Method definitions</a></li>
<li><a href="Reference/Functions/rest_parameters.html" title="The rest parameter syntax allows us to represent an indefinite number of arguments as an array.">Rest parameters</a></li>
<li><a href="Reference/Functions/arguments.html" title="arguments is an Array-like object accessible inside functions that contains the values of the arguments passed to that function.">The arguments object</a></li>
<li><a href="Reference/Functions/get.html" title="The get syntax binds an object property to a function that will be called when that property is looked up.">getter</a></li>
<li><a href="Reference/Functions/set.html" title="The set syntax binds an object property to a function to be called when there is an attempt to set that property.">setter</a></li>
</ol></li>
<li>Classes
<ol>
<li><a href="Reference/Classes/Private_class_fields.html" title="Class properties are public by default and can be examined or modified outside the class. There is however an experimental proposal to allow defining private class fields using a hash # prefix is added.">Private class fields</a></li>
<li><a href="Reference/Classes/Public_class_fields.html" title="Both static and instance public fields are writable, enumerable, and configurable properties. As such, unlike their private counterparts, they participate in prototype inheritance.">Public class fields</a></li>
<li><a href="Reference/Classes/constructor.html" title="The constructor method is a special method of a class for creating and initializing an object of that class.">constructor</a></li>
<li><a href="Reference/Classes/extends.html" title="The extends keyword is used in class declarations or class expressions to create a class that is a child of another class.">extends</a></li>
<li><a href="Reference/Classes/static.html" title="The static keyword defines a static method for a class. Static methods aren&#39;t called on instances of the class. Instead, they&#39;re called on the class itself.">static</a></li>
</ol></li>
<li>Errors
<ol>
<li><a href="Reference/Errors/Property_access_denied.html" title="The JavaScript exception &quot;Permission denied to access property&quot; occurs when there was an attempt to access an object for which you have no permission.">Error: Permission denied to access property "x"</a></li>
<li><a href="Reference/Errors/Too_much_recursion.html" title="The JavaScript exception &quot;too much recursion&quot; or &quot;Maximum call stack size exceeded&quot; occurs when there are too many function calls, or a function is missing a base case.">InternalError: too much recursion</a></li>
<li><a href="Reference/Errors/Not_a_codepoint.html" title="The JavaScript exception &quot;Invalid code point&quot; occurs when NaN values, negative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF (1114111) are used with String.fromCodePoint().">RangeError: argument is not a valid code point</a></li>
<li><a href="Reference/Errors/Invalid_array_length.html" title="The JavaScript exception &quot;Invalid array length&quot; occurs when creating an Array or an ArrayBuffer which has a length which is either negative or larger or equal to 232, or when setting the Array.length property to a value which is either negative or larger or equal to 232.">RangeError: invalid array length</a></li>
<li><a href="Reference/Errors/Invalid_date.html" title="The JavaScript exception &quot;invalid date&quot; occurs when a string leading to an invalid date has been provided to Date or Date.parse().">RangeError: invalid date</a></li>
<li><a href="Reference/Errors/Precision_range.html" title="The JavaScript exception &quot;precision is out of range&quot; occurs when a number that&#39;s outside of the range of 0 and 20 (or 21) was passed into toFixed or toPrecision.">RangeError: precision is out of range</a></li>
<li><a href="Reference/Errors/Bad_radix.html" title="The JavaScript exception &quot;radix must be an integer at least 2 and no greater than 36&quot; occurs when the optional radix parameter of the Number.prototype.toString() or the BigInt.prototype.toString() method was specified and is not between 2 and 36.">RangeError: radix must be an integer</a></li>
<li><a href="Reference/Errors/Resulting_string_too_large.html" title="The JavaScript exception &quot;repeat count must be less than infinity&quot; occurs when the String.prototype.repeat() method is used with a count argument that is infinity.">RangeError: repeat count must be less than infinity</a></li>
<li><a href="Reference/Errors/Negative_repetition_count.html" title="The JavaScript exception &quot;repeat count must be non-negative&quot; occurs when the String.prototype.repeat() method is used with a count argument that is a negative number.">RangeError: repeat count must be non-negative</a></li>
<li><a href="Reference/Errors/Not_defined.html" title="The JavaScript exception &quot;variable is not defined&quot; occurs when there is a non-existent variable referenced somewhere.">ReferenceError: "x" is not defined</a></li>
<li><a href="Reference/Errors/Undeclared_var.html" title="The JavaScript strict mode-only exception &quot;Assignment to undeclated variable&quot; occurs when the value has been assigned to an undeclared variable.">ReferenceError: assignment to undeclared variable "x"</a></li>
<li><a href="Reference/Errors/Cant_access_lexical_declaration_before_init.html" title="The JavaScript exception &quot;can&#39;t access lexical declaration `variable&#39; before initialization&quot; occurs when a lexical variable was accessed before it was initialized. This happens within any block statement, when let or const declarations are accessed before they are defined.">ReferenceError: can't access lexical declaration`X' before initialization</a></li>
<li><a href="Reference/Errors/Deprecated_caller_or_arguments_usage.html" title="The JavaScript strict mode-only exception &quot;deprecated caller or arguments usage&quot; occurs when the deprecated Function.caller or Function.arguments properties are used.">ReferenceError: deprecated caller or arguments usage</a></li>
<li><a href="Reference/Errors/Invalid_assignment_left-hand_side.html" title="The JavaScript exception &quot;invalid assignment left-hand side&quot; occurs when there was an unexpected assignment somewhere. For example, a single &quot;=&quot; sign was used instead of &quot;==&quot; or &quot;===&quot;.">ReferenceError: invalid assignment left-hand side</a></li>
<li><a href="Reference/Errors/Undefined_prop.html" title="The JavaScript warning &quot;reference to undefined property&quot; occurs when a script attempted to access an object property which doesn&#39;t exist.">ReferenceError: reference to undefined property "x"</a></li>
<li><a href="Reference/Errors/Deprecated_octal.html" title="The JavaScript strict mode-only exception &quot;0-prefixed octal literals and octal escape sequences are deprecated; for octal literals use the &quot;0o&quot; prefix instead&quot; occurs when deprecated octal literals and octal escape sequences are used.">SyntaxError: "0"-prefixed octal literals and octal escape seq. are deprecated</a></li>
<li><a href="Reference/Errors/Strict_Non_Simple_Params.html" title="The JavaScript exception &quot;&#39;use strict&#39; not allowed in function&quot; occurs when a &quot;use strict&quot; directive is used at the top of a function with default parameters, rest parameters, or destructuring parameters.">SyntaxError: "use strict" not allowed in function with non-simple parameters</a></li>
<li><a href="Reference/Errors/Reserved_identifier.html" title="The JavaScript exception &quot;variable is a reserved identifier&quot; occurs when reserved keywords are used as identifiers.">SyntaxError: "x" is a reserved identifier</a></li>
<li><a href="Reference/Errors/JSON_bad_parse.html" title="The JavaScript exceptions thrown by JSON.parse() occur when string failed to be parsed as JSON.">SyntaxError: JSON.parse: bad parsing</a></li>
<li><a href="Reference/Errors/Malformed_formal_parameter.html" title="The JavaScript exception &quot;malformed formal parameter&quot; occurs when the argument list of a Function() constructor call is invalid somehow.">SyntaxError: Malformed formal parameter</a></li>
<li><a href="Reference/Errors/Unexpected_token.html" title="The JavaScript exceptions &quot;unexpected token&quot; occur when a specific language construct was expected, but something else was provided. This might be a simple typo.">SyntaxError: Unexpected token</a></li>
<li><a href="Reference/Errors/Deprecated_source_map_pragma.html" title="The JavaScript warning &quot;Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead&quot; occurs when there is a deprecated source map syntax in a JavaScript source.">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li>
<li><a href="Reference/Errors/Invalid_for-of_initializer.html" title="The JavaScript exception &quot;a declaration in the head of a for-of loop can&#39;t have an initializer&quot; occurs when the head of a for...of loop contains an initializer expression such as |for (var i = 0 of iterable)|. This is not allowed in for-of loops.">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li>
<li><a href="Reference/Errors/Delete_in_strict_mode.html" title="The JavaScript strict mode-only exception &quot;applying the &#39;delete&#39; operator to an unqualified name is deprecated&quot; occurs when variables are attempted to be deleted using the delete operator.">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li>
<li><a href="Reference/Errors/Invalid_for-in_initializer.html" title="The JavaScript strict mode-only exception &quot;for-in loop head declarations may not have initializers&quot; occurs when the head of a for...in contains an initializer expression, such as |for (var i = 0 in obj)|. This is not allowed in for-of loops in strict mode.">SyntaxError: for-in loop head declarations may not have initializers</a></li>
<li><a href="Reference/Errors/Unnamed_function_statement.html" title="The JavaScript exception &quot;function statement requires a name&quot; occurs when there is a function statement in the code that requires a name.">SyntaxError: function statement requires a name</a></li>
<li><a href="Reference/Errors/Identifier_after_number.html" title="The JavaScript exception &quot;identifier starts immediately after numeric literal&quot; occurs when an identifier started with a digit. Identifiers can only start with a letter, underscore (_), or dollar sign ($).">SyntaxError: identifier starts immediately after numeric literal</a></li>
<li><a href="Reference/Errors/Illegal_character.html" title="The JavaScript exception &quot;illegal character&quot; occurs when there is an invalid or unexpected token that doesn&#39;t belong at this position in the code.">SyntaxError: illegal character</a></li>
<li><a href="Reference/Errors/Bad_regexp_flag.html" title="The JavaScript exception &quot;invalid regular expression flag&quot; occurs when the flags, defined after the second slash in regular expression literal, are not one of g, i, m, s, u, or y.">SyntaxError: invalid regular expression flag "x"</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_argument_list.html" title="The JavaScript exception &quot;missing ) after argument list&quot; occurs when there is an error with how a function is called. This might be a typo, a missing operator, or an unescaped string.">SyntaxError: missing ) after argument list</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_condition.html" title="The JavaScript exception &quot;missing ) after condition&quot; occurs when there is an error with how an if condition is written. It must appear in parenthesis after the if keyword.">SyntaxError: missing ) after condition</a></li>
<li><a href="Reference/Errors/Missing_colon_after_property_id.html" title="The JavaScript exception &quot;missing : after property id&quot; occurs when objects are created using the object initializer syntax. A colon (:) separates keys and values for the object&#39;s properties. Somehow, this colon is missing or misplaced.">SyntaxError: missing : after property id</a></li>
<li><a href="Reference/Errors/Missing_semicolon_before_statement.html" title="The JavaScript exception &quot;missing ; before statement&quot; occurs when there is a semicolon (;) missing somewhere and can&#39;t be added by automatic semicolon insertion (ASI). You need to provide a semicolon, so that JavaScript can parse the source code correctly.">SyntaxError: missing ; before statement</a></li>
<li><a href="Reference/Errors/Missing_initializer_in_const.html" title="The JavaScript exception &quot;missing = in const declaration&quot; occurs when a const declaration was not given a value in the same statement (like const RED_FLAG;). You need to provide one (const RED_FLAG = &#39;#ff0&#39;).">SyntaxError: missing = in const declaration</a></li>
<li><a href="Reference/Errors/Missing_bracket_after_list.html" title="The JavaScript exception &quot;missing ] after element list&quot; occurs when there is an error with the array initializer syntax somewhere. Likely there is a closing bracket (&quot;]&quot;) or a comma (&quot;,&quot;) missing.">SyntaxError: missing ] after element list</a></li>
<li><a href="Reference/Errors/Missing_formal_parameter.html" title="The JavaScript exception &quot;missing formal parameter&quot; occurs when your function declaration is missing valid parameters.">SyntaxError: missing formal parameter</a></li>
<li><a href="Reference/Errors/Missing_name_after_dot_operator.html" title="The JavaScript exception &quot;missing name after . operator&quot; occurs when there is a problem with how the dot operator (.) is used for property access.">SyntaxError: missing name after . operator</a></li>
<li><a href="Reference/Errors/No_variable_name.html" title="The JavaScript exception &quot;missing variable name&quot; occurs way too often as naming things is so hard. Or maybe a comma is wrong. Check for typos!">SyntaxError: missing variable name</a></li>
<li><a href="Reference/Errors/Missing_curly_after_function_body.html" title="The JavaScript exception &quot;missing } after function body&quot; occurs when there is a syntax mistake when creating a function somewhere. Check if any closing curly brackets or parenthesis are in the correct order.">SyntaxError: missing } after function body</a></li>
<li><a href="Reference/Errors/Missing_curly_after_property_list.html" title="The JavaScript exception &quot;missing } after property list&quot; occurs when there is a mistake in the object initializer syntax somewhere. Might be in fact a missing curly bracket, but could also be a missing comma.">SyntaxError: missing } after property list</a></li>
<li><a href="Reference/Errors/Redeclared_parameter.html" title="The JavaScript exception &quot;redeclaration of formal parameter&quot; occurs when the same variable name occurs as a function parameter and is then redeclared using a let assignment in a function body again.">SyntaxError: redeclaration of formal parameter "x"</a></li>
<li><a href="Reference/Errors/Bad_return_or_yield.html" title="The JavaScript exception &quot;return (or yield) not in function&quot; occurs when a return or yield statement is called outside of a function.">SyntaxError: return not in function</a></li>
<li><a href="Reference/Errors/Equal_as_assign.html" title="The JavaScript warning &quot;test for equality (==) mistyped as assignment (=)?&quot; occurs when there was an assignment (=) when you would normally expect a test for equality (==).">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li>
<li><a href="Reference/Errors/Unterminated_string_literal.html" title="The JavaScript error &quot;unterminated string literal&quot; occurs when there is an unterminated String somewhere. String literals must be enclosed by single (&#39;) or double (&quot;) quotes.">SyntaxError: unterminated string literal</a></li>
<li><a href="Reference/Errors/No_properties.html" title="The JavaScript exception &quot;null (or undefined) has no properties&quot; occurs when you attempt to access properties of null and undefined. They don&#39;t have any.">TypeError: "x" has no properties</a></li>
<li><a href="Reference/Errors/Unexpected_type.html" title="The JavaScript exception &quot;x is (not) y&quot; occurs when there was an unexpected type. Oftentimes, unexpected undefined or null values.">TypeError: "x" is (not) "y"</a></li>
<li><a href="Reference/Errors/Not_a_constructor.html" title="The JavaScript exception &quot;is not a constructor&quot; occurs when there was an attempt to use an object or a variable as a constructor, but that object or variable is not a constructor.">TypeError: "x" is not a constructor</a></li>
<li><a href="Reference/Errors/Not_a_function.html" title="The JavaScript exception &quot;is not a function&quot; occurs when there was an attempt to call a value from a function, but the value is not actually a function.">TypeError: "x" is not a function</a></li>
<li><a href="Reference/Errors/No_non-null_object.html" title="The JavaScript exception &quot;is not a non-null object&quot; occurs when an object is expected somewhere and wasn&#39;t provided. null is not an object and won&#39;t work.">TypeError: "x" is not a non-null object</a></li>
<li><a href="Reference/Errors/Read-only.html" title="The JavaScript strict mode-only exception &quot;is read-only&quot; occurs when a global variable or object property that was assigned to is a read-only property.">TypeError: "x" is read-only</a></li>
<li><a href="Reference/Errors/is_not_iterable.html" title="The JavaScript exception &quot;is not iterable&quot; occurs when the value which is given as the right hand-side of for…of or as argument of a function such as Promise.all or TypedArray.from, is not an iterable object.">TypeError: 'x' is not iterable</a></li>
<li><a href="Reference/Errors/More_arguments_needed.html" title="The JavaScript exception &quot;more arguments needed&quot; occurs when there is an error with how a function is called. More arguments need to be provided.">TypeError: More arguments needed</a></li>
<li><a href="Reference/Errors/Reduce_of_empty_array_with_no_initial_value.html" title="The JavaScript exception &quot;reduce of empty array with no initial value&quot; occurs when a reduce function is used.">TypeError: Reduce of empty array with no initial value</a></li>
<li><a href="Reference/Errors/Called_on_incompatible_type.html" title="The JavaScript exception &quot;called on incompatible target (or object)&quot; occurs when a function (on a given object), is called with a this not corresponding to the type expected by the function.">TypeError: X.prototype.y called on incompatible type</a></li>
<li><a href="Reference/Errors/Dead_object.html" title="The JavaScript exception &quot;can&#39;t access dead object&quot; occurs when Firefox disallows add-ons to keep strong references to DOM objects after their parent document has been destroyed to improve in memory usage and to prevent memory leaks.">TypeError: can't access dead object</a></li>
<li><a href="Reference/Errors/Cant_access_property.html" title="The JavaScript exception &quot;can&#39;t access property&quot; occurs when property access was operated on undefined or null values.">TypeError: can't access property "x" of "y"</a></li>
<li><a href="Reference/Errors/Cant_assign_to_property.html" title="The JavaScript strict mode exception &quot;can&#39;t assign to property&quot; occurs when attempting to create a property on primitive value such as a symbol, a string, a number or a boolean. Primitive values cannot hold any property.">TypeError: can't assign to property "x" on "y": not an object</a></li>
<li><a href="Reference/Errors/Cant_define_property_object_not_extensible.html" title="The JavaScript exception &quot;can&#39;t define property &quot;x&quot;: &quot;obj&quot; is not extensible&quot; occurs when Object.preventExtensions() marked an object as no longer extensible, so that it will never have properties beyond the ones it had at the time it was marked as non-extensible.">TypeError: can't define property "x": "obj" is not extensible</a></li>
<li><a href="Reference/Errors/Non_configurable_array_element.html" title="The JavaScript exception &quot;can&#39;t delete non-configurable array element&quot; occurs when it was attempted to shorten the length of an array, but one of the array&#39;s elements is non-configurable.">TypeError: can't delete non-configurable array element</a></li>
<li><a href="Reference/Errors/Cant_redefine_property.html" title="The JavaScript exception &quot;can&#39;t redefine non-configurable property&quot; occurs when it was attempted to redefine a property, but that property is non-configurable.">TypeError: can't redefine non-configurable property "x"</a></li>
<li><a href="Reference/Errors/in_operator_no_object.html" title="The JavaScript exception &quot;right-hand side of &#39;in&#39; should be an object&quot; occurs when the in operator was used to search in strings, or in numbers, or other primitive types. It can only be used to check if a property is in an object.">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li>
<li><a href="Reference/Errors/Cyclic_object_value.html" title="The JavaScript exception &quot;cyclic object value&quot; occurs when object references were found in JSON. JSON.stringify() doesn&#39;t try to solve them and fails accordingly.">TypeError: cyclic object value</a></li>
<li><a href="Reference/Errors/invalid_right_hand_side_instanceof_operand.html" title="The JavaScript exception &quot;invalid &#39;instanceof&#39; operand&quot; occurs when the right hand side operands of the instanceof operator isn&#39;t used with a constructor object, i.e. an object which has a prototype property and is callable.">TypeError: invalid 'instanceof' operand 'x'</a></li>
<li><a href="Reference/Errors/Array_sort_argument.html" title="The JavaScript exception &quot;invalid Array.prototype.sort argument&quot; occurs when the argument of Array.prototype.sort() isn&#39;t either undefined or a function which compares its operands.">TypeError: invalid Array.prototype.sort argument</a></li>
<li><a href="Reference/Errors/Typed_array_invalid_arguments.html" title="The JavaScript exception &quot;invalid arguments&quot; occurs when typed array constructors are provided with a wrong argument.">TypeError: invalid arguments</a></li>
<li><a href="Reference/Errors/Invalid_const_assignment.html" title="The JavaScript exception &quot;invalid assignment to const&quot; occurs when it was attempted to alter a constant value. JavaScript const declarations can&#39;t be re-assigned or redeclared.">TypeError: invalid assignment to const "x"</a></li>
<li><a href="Reference/Errors/Cant_delete.html" title="The JavaScript exception &quot;property is non-configurable and can&#39;t be deleted&quot; occurs when it was attempted to delete a property, but that property is non-configurable.">TypeError: property "x" is non-configurable and can't be deleted</a></li>
<li><a href="Reference/Errors/Getter_only.html" title="The JavaScript strict mode-only exception &quot;setting getter-only property&quot; occurs when there is an attempt to set a new value to a property for which only a getter is specified.">TypeError: setting getter-only property "x"</a></li>
<li><a href="Reference/Errors/Var_hides_argument.html" title="The JavaScript strict mode-only exception &quot;variable redeclares argument&quot; occurs when the same variable name occurs as a function parameter and is then redeclared using a var assignment in a function body again.">TypeError: variable "x" redeclares argument</a></li>
<li><a href="Reference/Errors/Malformed_URI.html" title="The JavaScript exception &quot;malformed URI sequence&quot; occurs when URI encoding or decoding wasn&#39;t successful.">URIError: malformed URI sequence</a></li>
<li><a href="Reference/Errors/Already_has_pragma.html" title="The JavaScript warning &quot;-file- is being assigned a //# sourceMappingURL, but already has one.&quot; occurs when a source map has been specified more than once for a given JavaScript source.">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li>
<li><a href="Reference/Errors/Bad_octal.html" title="The JavaScript warning &quot;08 (or 09) is not a legal ECMA-262 octal constant&quot; occurs when 08 or 09 number literals are used. They can&#39;t be interpreted as an octal number.">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li>
<li><a href="Reference/Errors/Deprecated_toLocaleFormat.html" title="The JavaScript warning &quot;Date.prototype.toLocaleFormat is deprecated; consider using Intl.DateTimeFormat instead&quot; occurs when the non-standard Date.prototype.toLocaleFormat method is used.">Warning: Date.prototype.toLocaleFormat is deprecated</a></li>
<li><a href="Reference/Errors/For-each-in_loops_are_deprecated.html" title="The JavaScript warning &quot;JavaScript 1.6&#39;s for-each-in loops are deprecated; consider using ES6 for-of instead&quot; occurs when a for each (variable in obj) statement is used.">Warning: JavaScript 1.6's for-each-in loops are deprecated</a></li>
<li><a href="Reference/Errors/Deprecated_String_generics.html" title="The JavaScript warning about string generics occurs in Firefox versions prior to 68. String generics have been removed starting with Firefox 68.">Warning: String.x is deprecated; use String.prototype.x instead</a></li>
<li><a href="Reference/Errors/Deprecated_expression_closures.html" title="The JavaScript warning &quot;expression closures are deprecated&quot; occurs when the non-standard expression closure syntax (shorthand function syntax) is used.">Warning: expression closures are deprecated</a></li>
<li><a href="Reference/Errors/Stmt_after_return.html" title="The JavaScript warning &quot;unreachable code after return statement&quot; occurs when using an expression after a return statement, or when using a semicolon-less return statement but including an expression directly after.">Warning: unreachable code after return statement</a></li>
</ol></li>
<li>Misc
<ol>
<li><a href="JavaScript_technologies_overview.html">JavaScript technologies overview</a></li>
<li><a href="Reference/Lexical_grammar.html">Lexical grammar</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Enumerability_and_ownership_of_properties.html">Enumerability and ownership of properties</a></li>
<li><a href="Reference/Iteration_protocols.html">Iteration protocols</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Reference/Strict_mode/Transitioning_to_strict_mode.html">Transitioning to strict mode</a></li>
<li><a href="Reference/Template_literals.html">Template literals</a></li>
<li><a href="Reference/Deprecated_and_obsolete_features.html">Deprecated features</a></li>
</ol></li>
</ol>
</div>
</div>
</div>
</div>
</div>
<section class="newsletter-container">
<div id="newsletter-form-container" class="newsletter">
<section class="newsletter-head">
<h2 id="learn-the-best-of-web-development-2" class="newsletter-teaser">Learn the best of web development</h2>
<p>Get the latest and greatest from MDN delivered straight to your inbox.</p>
<p>The newsletter is offered in English only at the moment.</p>
</section>
<div class="form-group newsletter-group-email">
E-mail
</div>
<div id="newsletter-privacy" class="form-group form-group-agree newsletter-group-privacy" data-aria-hidden="false">
I’m okay with Mozilla handling my info as explained in this <a href="../../../../../external.html?link=https://www.mozilla.org/privacy/">Privacy Policy</a>.
</div>
<div class="newsletter-group-submit">
Sign up now
</div>
<span>Hide Newsletter Sign-up</span>
</div>
</section>
<div class="content-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/" class="nav-footer-logo">MDN Web Docs</a>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Web Technologies</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn Web Development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/About">About MDN</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Feedback</a></li>
</ul>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/">About</a></li>
<li><a href="../../../../../external.html?link=https://shop.spreadshirt.com/mdn-store/">MDN Web Docs Store</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/contact/">Contact Us</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/firefox/?utm_source=developer.mozilla.org&amp;utm_campaign=footer&amp;utm_medium=referral">Firefox</a></li>
</ul>
<div class="social social-mdn">
<h4 id="mdn-2">MDN</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<div class="social social-moz">
<h4 id="mozilla-2">Mozilla</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<p>© 2005-2020 Mozilla and individual contributors. Content is available under <a href="../../../../../external.html?link=https://developer.mozilla.org/docs/MDN/About#Copyrights_and_licenses">these licenses</a>.</p>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/legal/terms/mozilla">Terms</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/">Privacy</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/#cookies">Cookies</a></li>
</ul>
</div>
</div>
<div id="auth-modal" class="modal hidden">
<section class="auth-providers" tabindex="-1" data-role="dialog" data-aria-modal="true" data-aria-labelledby="modal-main-heading">
<h2 id="modal-main-heading">Sign In</h2>
<p>Sign in to enjoy the benefits of an MDN account. If you haven’t already created an account, you will be prompted to do so after signing in.</p>
<div class="auth-button-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/users/github/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FData_structures" class="github-auth">Sign in with Github</a> <a href="../../../../../external.html?link=https://developer.mozilla.org/users/google/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FData_structures" class="google-auth">Sign in with Google</a>
</div>
<span>Close modal</span>
</section>
</div>
<div id="react-container" data-component-name="SPA">
<div class="loading-bar">

</div>
<ul>
<li><a href="#content" id="skip-main">Skip to main content</a></li>
<li><a href="#language" id="skip-language">Select language</a></li>
<li><a href="#main-q" id="skip-search">Skip to search</a></li>
</ul>
<ul>
<li>Technologies
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Technologies Overview</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide/Graphics">Graphics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API">APIs / DOM</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions">Browser Extensions</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/MathML">MathML</a></li>
</ul></li>
<li>References &amp; Guides
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn web development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Tutorials">Tutorials</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Reference">References</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide">Developer Guides</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Accessibility">Accessibility</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Games">Game development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">...more docs</a></li>
</ul></li>
<li>Feedback
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Send Feedback</a></li>
<li><a href="../../../../../external.html?link=https://support.mozilla.org/">Get Firefox help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://stackoverflow.com/">Get web development help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Community">Join the MDN community</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/sprints/issues/new?template=issue-template.md&amp;projects=mdn/sprints/2&amp;labels=user-report&amp;title=/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties">Report a content problem 🌐</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/kuma/issues/new/choose">Report an issue 🌐</a></li>
</ul></li>
</ul>
<div class="header-search">
Search MDN
<span>Open search</span>
</div>
<div data-role="main">
<div class="titlebar-container">
<div class="titlebar">

</div>
</div>
<div class="full-width-row-container">
<div class="max-content-width-container">
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web" class="breadcrumb-chevron"><span class="pre-text">See </span><span data-property="name">Web technology for developers</span></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript" class="breadcrumb-previous"><span class="pre-text">See </span><span data-property="name">JavaScript</span></a></li>
<li><a href="Enumerability_and_ownership_of_properties.html" class="crumb-current-page"><span data-property="name" data-aria-current="page">Enumerability and ownership of properties</span></a></li>
</ol>
<div class="dropdown-container language-menu">
English<span class="dropdown-arrow-down" data-aria-hidden="true">▼</span>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ca/docs/Web/JavaScript/Enumerability_and_ownership_of_properties" title="Catalan">Català</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/de/docs/Web/JavaScript/Aufzählbarkeit_und_Zugehörigkeit_von_Eigenschaften" title="German">Deutsch</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/es/docs/Web/JavaScript/enumeracion_y_propietario_de_propiedades" title="Spanish">Español</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/fr/docs/Web/JavaScript/Caractère_énumérable_des_propriétés_et_rattachement" title="French">Français</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ja/docs/Web/JavaScript/Enumerability_and_ownership_of_properties" title="Japanese">日本語</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ko/docs/Web/JavaScript/Enumerability_and_ownership_of_properties" title="Korean">한국어</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Enumerabilidade_e_posse_de_propriedades" title="Portuguese (Brazilian)">Português (do Brasil)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ru/docs/Web/JavaScript/Enumerability_and_ownership_of_properties" title="Russian">Русский</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/uk/docs/Web/JavaScript/Enumerability_and_ownership_of_properties" title="Ukrainian">Українська</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties" title="Chinese (Simplified)">中文 (简体)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Enumerability_and_ownership_of_properties" title="Chinese (Traditional)">正體中文 (繁體)</a></li>
<li><a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties$locales" id="translations-add">Add a translation</a></li>
</ul>
</div>
</div>
</div>
<div class="wiki-left-present content-layout">
<div id="content" class="article text-content">
<div>

</div>
<p>Enumerable properties are those properties whose internal enumerable flag is set to true, which is the default for properties created via simple assignment or via a property initializer (properties defined via <a href="Reference/Global_Objects/Object/defineProperty.html">Object.defineProperty</a> and such default enumerable to false). Enumerable properties show up in <a href="Reference/Statements/for...html">for...in</a> loops unless the property's key is a <a href="Reference/Global_Objects/Symbol.html">Symbol</a>. Ownership of properties is determined by whether the property belongs to the object directly and not to its prototype chain. Properties of an object can also be retrieved in total. There are a number of built-in means of detecting, iterating/enumerating, and retrieving object properties, with the chart showing below which are available. Some sample code follows which demonstrates how to obtain the missing categories.</p>
<div style="overflow: auto; width: 100%;">
<table>
<caption>Property enumerability and ownership - built-in methods of detection, retrieval, and iteration</caption>
<colgroup>
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
</colgroup>
<thead>
<tr class="header">
<th>Functionality</th>
<th>Own object</th>
<th>Own object and its prototype chain</th>
<th>Prototype chain only</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Detection</td>
<td><table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th>Enumerable</th>
<th>Nonenumerable</th>
<th>Enumerable and Nonenumerable</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p><code>propertyIsEnumerable</code></p>
<p><code>hasOwnProperty</code></p></td>
<td><p><code>hasOwnProperty</code> – filtered to exclude enumerables using <code>propertyIsEnumerable</code></p></td>
<td><code>hasOwnProperty</code></td>
</tr>
</tbody>
</table></td>
<td><table>
<thead>
<tr class="header">
<th>Enumerable</th>
<th>Nonenumerable</th>
<th>Enumerable and Nonenumerable</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Not available without extra code</td>
<td>Not available without extra code</td>
<td><code>in</code></td>
</tr>
</tbody>
</table></td>
<td>Not available without extra code</td>
</tr>
<tr class="even">
<td>Retrieval</td>
<td><table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th>Enumerable</th>
<th>Nonenumerable</th>
<th>Enumerable and Nonenumerable</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p><code>Object.keys</code></p>
<p><code>getOwnPropertyNames</code> </p>
<p><code>getOwnPropertySymbols</code></p></td>
<td><code>getOwnPropertyNames</code>, <code>getOwnPropertySymbols </code>– filtered to exclude enumerables using <code>propertyIsEnumerable</code></td>
<td><p><code>getOwnPropertyNames</code></p>
<p><code>getOwnPropertySymbols</code></p></td>
</tr>
</tbody>
</table></td>
<td>Not available without extra code</td>
<td>Not available without extra code</td>
</tr>
<tr class="odd">
<td>Iterable</td>
<td><table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th>Enumerable</th>
<th>Nonenumerable</th>
<th>Enumerable and Nonenumerable</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p><code>Object.keys</code></p>
<p><code>getOwnPropertyNames</code> </p>
<p><code>getOwnPropertySymbols</code></p></td>
<td><code>getOwnPropertyNames</code>, <code>getOwnPropertySymbols</code> – filtered to exclude enumerables using <code>propertyIsEnumerable</code></td>
<td><p><code>getOwnPropertyNames</code></p>
<p><code>getOwnPropertySymbols</code></p></td>
</tr>
</tbody>
</table></td>
<td><table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th>Enumerable</th>
<th>Nonenumerable</th>
<th>Enumerable and Nonenumerable</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p><code>for..in</code></p>
<p>(excluding symbols)</p></td>
<td>Not available without extra code</td>
<td>Not available without extra code</td>
</tr>
</tbody>
</table></td>
<td>Not available without extra code</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Obtaining_properties_by_enumerabilityownership">Obtaining properties by enumerability/ownership</h2>
<p>Note that this is not the most efficient algorithm for all cases, but useful for a quick demonstration.</p>
<ul>
<li>Detection can occur by <code>SimplePropertyRetriever.theGetMethodYouWant(obj).indexOf(prop) &gt; -1</code></li>
<li>Iteration can occur by <code>SimplePropertyRetriever.theGetMethodYouWant(obj).forEach(function (value, prop) {});</code> (or use<code> filter()</code>, <code>map()</code>, etc.)</li>
</ul>
<div class="sourceCode" id="cb104"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb104-1" title="1"><span class="kw">var</span> SimplePropertyRetriever <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb104-2" title="2">    <span class="dt">getOwnEnumerables</span><span class="op">:</span> <span class="kw">function</span>(obj) <span class="op">{</span></a>
<a class="sourceLine" id="cb104-3" title="3">        <span class="cf">return</span> <span class="kw">this</span>.<span class="at">_getPropertyNames</span>(obj<span class="op">,</span> <span class="kw">true</span><span class="op">,</span> <span class="kw">false</span><span class="op">,</span> <span class="kw">this</span>.<span class="at">_enumerable</span>)<span class="op">;</span> </a>
<a class="sourceLine" id="cb104-4" title="4">         <span class="co">// Or could use for..in filtered with hasOwnProperty or just this: return Object.keys(obj);</span></a>
<a class="sourceLine" id="cb104-5" title="5">    <span class="op">},</span></a>
<a class="sourceLine" id="cb104-6" title="6">    <span class="dt">getOwnNonenumerables</span><span class="op">:</span> <span class="kw">function</span>(obj) <span class="op">{</span></a>
<a class="sourceLine" id="cb104-7" title="7">        <span class="cf">return</span> <span class="kw">this</span>.<span class="at">_getPropertyNames</span>(obj<span class="op">,</span> <span class="kw">true</span><span class="op">,</span> <span class="kw">false</span><span class="op">,</span> <span class="kw">this</span>.<span class="at">_notEnumerable</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb104-8" title="8">    <span class="op">},</span></a>
<a class="sourceLine" id="cb104-9" title="9">    <span class="dt">getOwnEnumerablesAndNonenumerables</span><span class="op">:</span> <span class="kw">function</span>(obj) <span class="op">{</span></a>
<a class="sourceLine" id="cb104-10" title="10">        <span class="cf">return</span> <span class="kw">this</span>.<span class="at">_getPropertyNames</span>(obj<span class="op">,</span> <span class="kw">true</span><span class="op">,</span> <span class="kw">false</span><span class="op">,</span> <span class="kw">this</span>.<span class="at">_enumerableAndNotEnumerable</span>)<span class="op">;</span> </a>
<a class="sourceLine" id="cb104-11" title="11">        <span class="co">// Or just use: return Object.getOwnPropertyNames(obj);</span></a>
<a class="sourceLine" id="cb104-12" title="12">    <span class="op">},</span></a>
<a class="sourceLine" id="cb104-13" title="13">    <span class="dt">getPrototypeEnumerables</span><span class="op">:</span> <span class="kw">function</span>(obj) <span class="op">{</span></a>
<a class="sourceLine" id="cb104-14" title="14">        <span class="cf">return</span> <span class="kw">this</span>.<span class="at">_getPropertyNames</span>(obj<span class="op">,</span> <span class="kw">false</span><span class="op">,</span> <span class="kw">true</span><span class="op">,</span> <span class="kw">this</span>.<span class="at">_enumerable</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb104-15" title="15">    <span class="op">},</span></a>
<a class="sourceLine" id="cb104-16" title="16">    <span class="dt">getPrototypeNonenumerables</span><span class="op">:</span> <span class="kw">function</span>(obj) <span class="op">{</span></a>
<a class="sourceLine" id="cb104-17" title="17">        <span class="cf">return</span> <span class="kw">this</span>.<span class="at">_getPropertyNames</span>(obj<span class="op">,</span> <span class="kw">false</span><span class="op">,</span> <span class="kw">true</span><span class="op">,</span> <span class="kw">this</span>.<span class="at">_notEnumerable</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb104-18" title="18">    <span class="op">},</span></a>
<a class="sourceLine" id="cb104-19" title="19">    <span class="dt">getPrototypeEnumerablesAndNonenumerables</span><span class="op">:</span> <span class="kw">function</span>(obj) <span class="op">{</span></a>
<a class="sourceLine" id="cb104-20" title="20">        <span class="cf">return</span> <span class="kw">this</span>.<span class="at">_getPropertyNames</span>(obj<span class="op">,</span> <span class="kw">false</span><span class="op">,</span> <span class="kw">true</span><span class="op">,</span> <span class="kw">this</span>.<span class="at">_enumerableAndNotEnumerable</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb104-21" title="21">    <span class="op">},</span></a>
<a class="sourceLine" id="cb104-22" title="22">    <span class="dt">getOwnAndPrototypeEnumerables</span><span class="op">:</span> <span class="kw">function</span>(obj) <span class="op">{</span></a>
<a class="sourceLine" id="cb104-23" title="23">        <span class="cf">return</span> <span class="kw">this</span>.<span class="at">_getPropertyNames</span>(obj<span class="op">,</span> <span class="kw">true</span><span class="op">,</span> <span class="kw">true</span><span class="op">,</span> <span class="kw">this</span>.<span class="at">_enumerable</span>)<span class="op">;</span> </a>
<a class="sourceLine" id="cb104-24" title="24">        <span class="co">// Or could use unfiltered for..in</span></a>
<a class="sourceLine" id="cb104-25" title="25">    <span class="op">},</span></a>
<a class="sourceLine" id="cb104-26" title="26">    <span class="dt">getOwnAndPrototypeNonenumerables</span><span class="op">:</span> <span class="kw">function</span>(obj) <span class="op">{</span></a>
<a class="sourceLine" id="cb104-27" title="27">        <span class="cf">return</span> <span class="kw">this</span>.<span class="at">_getPropertyNames</span>(obj<span class="op">,</span> <span class="kw">true</span><span class="op">,</span> <span class="kw">true</span><span class="op">,</span> <span class="kw">this</span>.<span class="at">_notEnumerable</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb104-28" title="28">    <span class="op">},</span></a>
<a class="sourceLine" id="cb104-29" title="29">    <span class="dt">getOwnAndPrototypeEnumerablesAndNonenumerables</span><span class="op">:</span> <span class="kw">function</span>(obj) <span class="op">{</span></a>
<a class="sourceLine" id="cb104-30" title="30">        <span class="cf">return</span> <span class="kw">this</span>.<span class="at">_getPropertyNames</span>(obj<span class="op">,</span> <span class="kw">true</span><span class="op">,</span> <span class="kw">true</span><span class="op">,</span> <span class="kw">this</span>.<span class="at">_enumerableAndNotEnumerable</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb104-31" title="31">    <span class="op">},</span></a>
<a class="sourceLine" id="cb104-32" title="32">    <span class="co">// Private static property checker callbacks</span></a>
<a class="sourceLine" id="cb104-33" title="33">    <span class="dt">_enumerable</span><span class="op">:</span> <span class="kw">function</span>(obj<span class="op">,</span> prop) <span class="op">{</span></a>
<a class="sourceLine" id="cb104-34" title="34">        <span class="cf">return</span> <span class="va">obj</span>.<span class="at">propertyIsEnumerable</span>(prop)<span class="op">;</span></a>
<a class="sourceLine" id="cb104-35" title="35">    <span class="op">},</span></a>
<a class="sourceLine" id="cb104-36" title="36">    <span class="dt">_notEnumerable</span><span class="op">:</span> <span class="kw">function</span>(obj<span class="op">,</span> prop) <span class="op">{</span></a>
<a class="sourceLine" id="cb104-37" title="37">        <span class="cf">return</span> <span class="op">!</span><span class="va">obj</span>.<span class="at">propertyIsEnumerable</span>(prop)<span class="op">;</span></a>
<a class="sourceLine" id="cb104-38" title="38">    <span class="op">},</span></a>
<a class="sourceLine" id="cb104-39" title="39">    <span class="dt">_enumerableAndNotEnumerable</span><span class="op">:</span> <span class="kw">function</span>(obj<span class="op">,</span> prop) <span class="op">{</span></a>
<a class="sourceLine" id="cb104-40" title="40">        <span class="cf">return</span> <span class="kw">true</span><span class="op">;</span></a>
<a class="sourceLine" id="cb104-41" title="41">    <span class="op">},</span></a>
<a class="sourceLine" id="cb104-42" title="42">    <span class="co">// Inspired by http://stackoverflow.com/a/8024294/271577</span></a>
<a class="sourceLine" id="cb104-43" title="43">    <span class="dt">_getPropertyNames</span><span class="op">:</span> <span class="kw">function</span> <span class="at">getAllPropertyNames</span>(obj<span class="op">,</span> iterateSelfBool<span class="op">,</span> iteratePrototypeBool<span class="op">,</span> includePropCb) <span class="op">{</span></a>
<a class="sourceLine" id="cb104-44" title="44">        <span class="kw">var</span> props <span class="op">=</span> []<span class="op">;</span></a>
<a class="sourceLine" id="cb104-45" title="45"></a>
<a class="sourceLine" id="cb104-46" title="46">        <span class="cf">do</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb104-47" title="47">            <span class="cf">if</span> (iterateSelfBool) <span class="op">{</span></a>
<a class="sourceLine" id="cb104-48" title="48">                <span class="va">Object</span>.<span class="at">getOwnPropertyNames</span>(obj).<span class="at">forEach</span>(<span class="kw">function</span>(prop) <span class="op">{</span></a>
<a class="sourceLine" id="cb104-49" title="49">                    <span class="cf">if</span> (<span class="va">props</span>.<span class="at">indexOf</span>(prop) <span class="op">===</span> <span class="dv">-1</span> <span class="op">&amp;&amp;</span> <span class="at">includePropCb</span>(obj<span class="op">,</span> prop)) <span class="op">{</span></a>
<a class="sourceLine" id="cb104-50" title="50">                        <span class="va">props</span>.<span class="at">push</span>(prop)<span class="op">;</span></a>
<a class="sourceLine" id="cb104-51" title="51">                    <span class="op">}</span></a>
<a class="sourceLine" id="cb104-52" title="52">                <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb104-53" title="53">            <span class="op">}</span></a>
<a class="sourceLine" id="cb104-54" title="54">            <span class="cf">if</span> (<span class="op">!</span>iteratePrototypeBool) <span class="op">{</span></a>
<a class="sourceLine" id="cb104-55" title="55">                <span class="cf">break</span><span class="op">;</span></a>
<a class="sourceLine" id="cb104-56" title="56">            <span class="op">}</span></a>
<a class="sourceLine" id="cb104-57" title="57">            iterateSelfBool <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></a>
<a class="sourceLine" id="cb104-58" title="58">        <span class="op">}</span> <span class="cf">while</span> (obj <span class="op">=</span> <span class="va">Object</span>.<span class="at">getPrototypeOf</span>(obj))<span class="op">;</span></a>
<a class="sourceLine" id="cb104-59" title="59"></a>
<a class="sourceLine" id="cb104-60" title="60">        <span class="cf">return</span> props<span class="op">;</span></a>
<a class="sourceLine" id="cb104-61" title="61">    <span class="op">}</span></a>
<a class="sourceLine" id="cb104-62" title="62"><span class="op">};</span></a></code></pre></div>
<h2 id="Detection_Table">Detection Table</h2>
<div style="overflow: auto; width: 100%;">
<table>
<thead>
<tr class="header">
<th></th>
<th><code>in</code></th>
<th><code>for..in</code></th>
<th><code>obj.hasOwnProperty</code></th>
<th><code>obj.propertyIsEnumerable</code></th>
<th><code>Object.keys</code></th>
<th><code>Object.getOwnPropertyNames</code></th>
<th><code>Object.getOwnPropertyDescriptors</code></th>
<th><code>Reflect.ownKeys()</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Enumerable</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
<tr class="even">
<td>Nonenumerable</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
<tr class="odd">
<td>Symbols keys</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
<tr class="even">
<td>Inherited Enumerable</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr class="odd">
<td>Inherited Nonenumerable</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr class="even">
<td>Inherited Symbols keys</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
</tbody>
</table>
</div>
<h2 id="See_also">See also</h2>
<ul>
<li><code>in</code></li>
<li><code>for..in</code></li>
<li><a href="Reference/Global_Objects/Object/hasOwnProperty.html"><code>Object.hasOwnProperty()</code></a></li>
<li><a href="Reference/Global_Objects/Object/propertyIsEnumerable.html"><code>Object.propertyIsEnumerable()</code></a></li>
<li><a href="Reference/Global_Objects/Object/getOwnPropertyNames.html"><code>Object.getOwnPropertyNames()</code></a></li>
<li><a href="Reference/Global_Objects/Object/keys.html"><code>Object.keys()</code></a></li>
<li><a href="Reference/Global_Objects/Object/getOwnPropertyDescriptors.html"><code>Object.getOwnPropertyDescriptors()</code></a></li>
</ul>
<div class="metadata">
<section class="document-meta">
<h4 id="metadata-3">Metadata</h4>
<ul>
<li><strong>Last modified:</strong> Mar 4, 2020, <a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties$history">by MDN contributors</a></li>
</ul>
</section>
</div>
</div>
<div id="sidebar-quicklinks" class="sidebar">
<div class="quick-links">
<div class="quick-links-head sidebar-heading">
Related Topics
</div>
<div>
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong><em>JavaScript</em></strong></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong>Tutorials:</strong></a></li>
<li>Complete beginners
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics">JavaScript basics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps">JavaScript first steps</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks">JavaScript building blocks</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Introducing JavaScript objects</a></li>
</ol></li>
<li>JavaScript Guide
<ol>
<li><a href="Guide/Introduction.html">Introduction</a></li>
<li><a href="Guide/Grammar_and_Types.html">Grammar and types</a></li>
<li><a href="Guide/Control_flow_and_error_handling.html">Control flow and error handling</a></li>
<li><a href="Guide/Loops_and_iteration.html">Loops and iteration</a></li>
<li><a href="Guide/Functions.html">Functions</a></li>
<li><a href="Guide/Expressions_and_Operators.html">Expressions and operators</a></li>
<li><a href="Guide/Numbers_and_dates.html">Numbers and dates</a></li>
<li><a href="Guide/Text_formatting.html">Text formatting</a></li>
<li><a href="Guide/Regular_Expressions.html">Regular expressions</a></li>
<li><a href="Guide/Indexed_collections.html">Indexed collections</a></li>
<li><a href="Guide/Keyed_collections.html">Keyed collections</a></li>
<li><a href="Guide/Working_with_Objects.html">Working with objects</a></li>
<li><a href="Guide/Details_of_the_Object_Model.html">Details of the object model</a></li>
<li><a href="Guide/Using_promises.html">Using promises</a></li>
<li><a href="Guide/Iterators_and_generators.html">Iterators and generators</a></li>
<li><a href="Guide/Meta_programming.html">Meta programming</a></li>
<li><a href="Guide/Modules.html">JavaScript modules</a></li>
</ol></li>
<li>Intermediate
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Introducing JavaScript objects</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs">Client-side web APIs</a></li>
<li><a href="A_re-introduction_to_JavaScript.html">A re-introduction to JavaScript</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Equality_comparisons_and_sameness.html">Equality comparisons and sameness</a></li>
<li><a href="Closures.html">Closures</a></li>
</ol></li>
<li>Advanced
<ol>
<li><a href="Inheritance_and_the_prototype_chain.html">Inheritance and the prototype chain</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Typed_arrays.html">JavaScript typed arrays</a></li>
<li><a href="Memory_Management.html">Memory Management</a></li>
<li><a href="EventLoop.html">Concurrency model and Event Loop</a></li>
</ol></li>
<li><strong><a href="Reference.html">References:</a></strong></li>
<li>Built-in objects
<ol>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/AggregateError.html" title="The AggregateError object represents an error when several errors need to be wrapped in a single error.">AggregateError</a></li>
<li><a href="Reference/Global_Objects/Array.html" title="The JavaScript Array class is a global object that is used in the construction of arrays; which are high-level, list-like objects.">Array</a></li>
<li><a href="Reference/Global_Objects/ArrayBuffer.html" title="The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer.">ArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/AsyncFunction.html" title="The AsyncFunction constructor creates a new async function object. In JavaScript, every asynchronous function is actually an AsyncFunction object.">AsyncFunction</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/AsyncIterator.html" title="The AsyncIterator global object is an abstract class providing helper methods, similar to the ones exposed on Array instances.">AsyncIterator</a></li>
<li><a href="Reference/Global_Objects/Atomics.html" title="The Atomics object provides atomic operations as static methods. They are used with SharedArrayBuffer objects.">Atomics</a></li>
<li><a href="Reference/Global_Objects/BigInt.html" title="BigInt is a built-in object that provides a way to represent whole numbers larger than 253 - 1, which is the largest number JavaScript can reliably represent with the Number primitive and represented by the Number.MAX_SAFE_INTEGER constant. BigInt can be used for arbitrarily large integers.">BigInt</a></li>
<li><a href="Reference/Global_Objects/BigInt64Array.html" title="The BigInt64Array typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigInt64Array</a></li>
<li><a href="Reference/Global_Objects/BigUint64Array.html" title="The BigUint64Array typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigUint64Array</a></li>
<li><a href="Reference/Global_Objects/Boolean.html" title="The Boolean object is an object wrapper for a boolean value.">Boolean</a></li>
<li><a href="Reference/Global_Objects/DataView.html" title="The DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform&#39;s endianness.">DataView</a></li>
<li><a href="Reference/Global_Objects/Date.html" title="JavaScript Date objects represent a single moment in time in a platform-independent format.">Date</a></li>
<li><a href="Reference/Global_Objects/Error.html" title="Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.">Error</a></li>
<li><a href="Reference/Global_Objects/EvalError.html" title="The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.">EvalError</a></li>
<li><a href="Reference/Global_Objects/Float32Array.html" title="The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float32Array</a></li>
<li><a href="Reference/Global_Objects/Float64Array.html" title="The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float64Array</a></li>
<li><a href="Reference/Global_Objects/Function.html" title="Every JavaScript function is actually a Function object. This can be seen with the code (function(){}).constructor === Function which returns true.">Function</a></li>
<li><a href="Reference/Global_Objects/Generator.html" title="The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.">Generator</a></li>
<li><a href="Reference/Global_Objects/GeneratorFunction.html" title="The GeneratorFunction constructor creates a new generator function object. In JavaScript every generator function is actually a GeneratorFunction object.">GeneratorFunction</a></li>
<li><a href="Reference/Global_Objects/Infinity.html" title="The global property Infinity is a numeric value representing infinity.">Infinity</a></li>
<li><a href="Reference/Global_Objects/Int16Array.html" title="The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int16Array</a></li>
<li><a href="Reference/Global_Objects/Int32Array.html" title="The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int32Array</a></li>
<li><a href="Reference/Global_Objects/Int8Array.html" title="The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int8Array</a></li>
<li><a href="Reference/Global_Objects/InternalError.html" title="The InternalError object indicates an error that occurred internally in the JavaScript engine.">InternalError</a></li>
<li><a href="Reference/Global_Objects/Intl.html" title="The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The Intl object provides access to several constructors as well as functionality common to the internationalization constructors and other language sensitive functions.">Intl</a></li>
<li><a href="Reference/Global_Objects/Intl/Collator.html" title="The Intl.Collator objects enable language sensitive string comparison.">Intl.Collator</a></li>
<li><a href="Reference/Global_Objects/Intl/DateTimeFormat.html" title="The Intl.DateTimeFormat object is a constructor for objects that enable language-sensitive date and time formatting.">Intl.DateTimeFormat</a></li>
<li><a href="Reference/Global_Objects/Intl/DisplayNames.html" title="The Intl.DisplayNames object is a constructor for objects that enables the consistent translation of language, region and script display names.">Intl.DisplayNames</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/Intl/ListFormat.html" title="The Intl.ListFormat object is a constructor for objects that enable language-sensitive list formatting.">Intl.ListFormat</a></li>
<li><a href="Reference/Global_Objects/Intl/Locale.html" title="The Intl.Locale object is a standard built-in property of the Intl object that represents a Unicode locale identifier.">Intl.Locale</a></li>
<li><a href="Reference/Global_Objects/Intl/NumberFormat.html" title="The Intl.NumberFormat object is a constructor for objects that enable language sensitive number formatting.">Intl.NumberFormat</a></li>
<li><a href="Reference/Global_Objects/Intl/PluralRules.html" title="The Intl.PluralRules object enables plural-sensitive formatting and plural-related language rules.">Intl.PluralRules</a></li>
<li><a href="Reference/Global_Objects/Intl/RelativeTimeFormat.html" title="The Intl.RelativeTimeFormat object enables language-sensitive relative time formatting.">Intl.RelativeTimeFormat</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/Iterator.html" title="The Iterator global object is an abstract class providing helper methods, similar to the ones exposed on Array instances.">Iterator</a></li>
<li><a href="Reference/Global_Objects/JSON.html" title="The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can&#39;t be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.">JSON</a></li>
<li><a href="Reference/Global_Objects/Map.html" title="The Map object holds key-value pairs and remembers the original insertion order of the keys.">Map</a></li>
<li><a href="Reference/Global_Objects/Math.html" title="Math is a built-in object that has properties and methods for mathematical constants and functions. Not a function object.">Math</a></li>
<li><a href="Reference/Global_Objects/NaN.html" title="The global NaN property is a value representing Not-A-Number.">NaN</a></li>
<li><a href="Reference/Global_Objects/Number.html" title="The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor. A primitive type object number is created using the Number() function.">Number</a></li>
<li><a href="Reference/Global_Objects/Object.html" title="The Object class represents one of JavaScript&#39;s data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.">Object</a></li>
<li><a href="Reference/Global_Objects/Promise.html" title="The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.">Promise</a></li>
<li><a href="Reference/Global_Objects/Proxy.html" title="The Proxy object is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc).">Proxy</a></li>
<li><a href="Reference/Global_Objects/RangeError.html" title="The RangeError object indicates an error when a value is not in the set or range of allowed values.">RangeError</a></li>
<li><a href="Reference/Global_Objects/ReferenceError.html" title="The ReferenceError object represents an error when a non-existent variable is referenced.">ReferenceError</a></li>
<li><a href="Reference/Global_Objects/Reflect.html" title="Reflect is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of proxy handlers. Reflect is not a function object, so it&#39;s not constructible.">Reflect</a></li>
<li><a href="Reference/Global_Objects/RegExp.html" title="The RegExp object is used for matching text with a pattern.">RegExp</a></li>
<li><a href="Reference/Global_Objects/Set.html" title="The Set object lets you store unique values of any type, whether primitive values or object references.">Set</a></li>
<li><a href="Reference/Global_Objects/SharedArrayBuffer.html" title="The SharedArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. Unlike an ArrayBuffer, a SharedArrayBuffer cannot become detached.">SharedArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/String.html" title="The String global object is a constructor for strings or a sequence of characters.">String</a></li>
<li><a href="Reference/Global_Objects/Symbol.html" title="The data type symbol is a primitive data type. The Symbol() function returns a value of type symbol, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class, but is incomplete as a constructor because it does not support the syntax &quot;new Symbol()&quot;.">Symbol</a></li>
<li><a href="Reference/Global_Objects/SyntaxError.html" title="The SyntaxError object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.">SyntaxError</a></li>
<li><a href="Reference/Global_Objects/TypeError.html" title="The TypeError object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.">TypeError</a></li>
<li><a href="Reference/Global_Objects/TypedArray.html" title="A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.">TypedArray</a></li>
<li><a href="Reference/Global_Objects/URIError.html" title="The URIError object represents an error when a global URI handling function was used in a wrong way.">URIError</a></li>
<li><a href="Reference/Global_Objects/Uint16Array.html" title="The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint16Array</a></li>
<li><a href="Reference/Global_Objects/Uint32Array.html" title="The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint32Array</a></li>
<li><a href="Reference/Global_Objects/Uint8Array.html" title="The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8Array</a></li>
<li><a href="Reference/Global_Objects/Uint8ClampedArray.html" title="The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8ClampedArray</a></li>
<li><a href="Reference/Global_Objects/WeakMap.html" title="The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.">WeakMap</a></li>
<li><a href="Reference/Global_Objects/WeakSet.html" title="The WeakSet object lets you store weakly held objects in a collection.">WeakSet</a></li>
<li><a href="Reference/Global_Objects/WebAssembly.html" title="The WebAssembly JavaScript object acts as the namespace for all WebAssembly-related functionality.">WebAssembly</a></li>
<li><a href="Reference/Global_Objects/decodeURI.html" title="The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or by a similar routine.">decodeURI()</a></li>
<li><a href="Reference/Global_Objects/decodeURIComponent.html" title="The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.">decodeURIComponent()</a></li>
<li><a href="Reference/Global_Objects/encodeURI.html" title="The encodeURI() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURI()</a></li>
<li><a href="Reference/Global_Objects/encodeURIComponent.html" title="The encodeURIComponent() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURIComponent()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/escape.html" title="The escape() function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.">escape()</a></li>
<li><a href="Reference/Global_Objects/eval.html" title="The eval() function evaluates JavaScript code represented as a string.">eval()</a></li>
<li><a href="Reference/Global_Objects/globalThis.html" title="The global globalThis property contains the global this value, which is akin to the global object.">globalThis</a></li>
<li><a href="Reference/Global_Objects/isFinite.html" title="The global isFinite() function determines whether the passed value is a finite number. If  needed, the parameter is first converted to a number.">isFinite()</a></li>
<li><a href="Reference/Global_Objects/isNaN.html" title="The isNaN() function determines whether a value is NaN or not. Note, coercion inside the isNaN function has interesting rules; you may alternatively want to use Number.isNaN(), as defined in ECMAScript 2015.">isNaN()</a></li>
<li><a href="Reference/Global_Objects/null.html" title="The value null represents the intentional absence of any object value. It is one of JavaScript&#39;s primitive values and is treated as falsy for boolean operations.">null</a></li>
<li><a href="Reference/Global_Objects/parseFloat.html" title="The parseFloat() function parses an argument (converting it to a string first if needed) and returns a floating point number.">parseFloat()</a></li>
<li><a href="Reference/Global_Objects/parseInt.html" title="The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).">parseInt()</a></li>
<li><a href="Reference/Global_Objects/undefined.html" title="The global undefined property represents the primitive value undefined. It is one of JavaScript&#39;s primitive types.">undefined</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/unescape.html" title="The unescape() function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Usually, decodeURI or decodeURIComponent are preferred over unescape.">unescape()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><a href="Reference/Global_Objects/uneval.html" title="The uneval() function creates a string representation of the source code of an Object.">uneval()</a></li>
</ol></li>
<li>Expressions &amp; operators
<ol>
<li><a href="Reference/Operators.html" title="Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).">Arithmetic operators</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/Array_comprehensions" title="The array comprehension syntax was a JavaScript expression which allowed you to quickly assemble a new array based on an existing one. However, it has been removed from the standard and the Firefox implementation. Do not use it!">Array comprehensions</a></li>
<li><a href="Reference/Operators%23Assignment_operators.html" title="An assignment operator assigns a value to its left operand based on the value of its right operand.">Assignment operators</a></li>
<li><a href="Reference/Operators.html" title="Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.">Bitwise operators</a></li>
<li><a href="Reference/Operators/Comma_Operator.html" title="The comma operator evaluates each of its operands (from left to right) and returns the value of the last operand.">Comma operator</a></li>
<li><a href="Reference/Operators.html" title="JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., &lt;=), the operands are first converted to primitives, then to the same type, before comparison.">Comparison operators</a></li>
<li><a href="Reference/Operators/Conditional_Operator.html" title="The conditional (ternary) operator is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy.">Conditional (ternary) operator</a></li>
<li><a href="Reference/Operators/Destructuring_assignment.html" title="The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.">Destructuring assignment</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/Expression_closures" title="Expression closures are a shorthand function syntax for writing simple functions.">Expression closures</a></li>
<li><a href="Reference/Operators/function.html" title="The function keyword can be used to define a function inside an expression.">Function expression</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/Generator_comprehensions" title="The generator comprehension syntax was a JavaScript expression which allowed you to quickly assemble a new generator function based on an existing iterable object. However, it has been removed from the standard and the Firefox implementation. Do not use it!">Generator comprehensions</a></li>
<li><a href="Reference/Operators/Grouping.html" title="The grouping operator ( ) controls the precedence of evaluation in expressions.">Grouping operator</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/Legacy_generator_function" title="The function keyword can be used to define a legacy generator function inside an expression. To make the function a legacy generator, the function body should contain at least one yield expression.">Legacy generator function expression</a></li>
<li><a href="Reference/Operators.html" title="Logical operators are typically used with Boolean (logical) values. When they are, they return a Boolean value. However, the &amp;&amp; and || operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they will return a non-Boolean value.">Logical operators</a></li>
<li><a href="Reference/Operators/Nullish_coalescing_operator.html" title="The nullish coalescing operator (??) is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.">Nullish coalescing operator</a></li>
<li><a href="Reference/Operators/Object_initializer.html" title="Objects can be initialized using new Object(), Object.create(), or using the literal notation (initializer notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).">Object initializer</a></li>
<li><a href="Reference/Operators/Operator_Precedence.html" title="Operator precedence determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.">Operator precedence</a></li>
<li><a href="Reference/Operators/Optional_chaining.html" title="The ?. operator functions similarly to the . chaining operator, except that instead of causing an error if a reference is nullish (null or undefined), the expression short-circuits with a return value of undefined.">Optional chaining</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Operators/Pipeline_operator.html" title="The experimental pipeline operator |&gt; (currently at stage 1) pipes the value of an expression into a function. This allows the creation of chained function calls in a readable manner. The result is syntactic sugar in which a function call with a single argument can be written like this:">Pipeline operator</a></li>
<li><a href="Reference/Operators/Property_Accessors-2.html" title="Property accessors provide access to an object&#39;s properties by using the dot notation or the bracket notation.">Property accessors</a></li>
<li><a href="Reference/Operators/Spread_syntax.html" title="Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.">Spread syntax</a></li>
<li><a href="Reference/Operators/async_function.html" title="The async function keyword can be used to define async functions inside expressions.">async function expression</a></li>
<li><a href="Reference/Operators/await.html" title="The await operator is used to wait for a Promise. It can only be used inside an async function.">await</a></li>
<li><a href="Reference/Operators/class.html" title="The class expression is one way to define a class in ECMAScript 2015. Similar to function expressions, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. ">class expression</a></li>
<li><a href="Reference/Operators/delete.html" title="The JavaScript delete operator removes a property from an object; if no more references to the same property are held, it is eventually released automatically.">delete operator</a></li>
<li><a href="Reference/Operators/function_.html" title="The function* keyword can be used to define a generator function inside an expression.">function* expression</a></li>
<li><a href="Reference/Operators/in.html" title="The in operator returns true if the specified property is in the specified object or its prototype chain.">in operator</a></li>
<li><a href="Reference/Operators/instanceof.html" title="The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object.">instanceof</a></li>
<li><a href="Reference/Operators/new.html" title="The new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.">new operator</a></li>
<li><a href="Reference/Operators/new-2.html" title="The new.target pseudo-property lets you detect whether a function or constructor was called using the new operator. In constructors and functions invoked using the new operator, new.target returns a reference to the constructor or function. In normal function calls, new.target is undefined.">new.target</a></li>
<li><a href="Reference/Operators/super.html" title="The super keyword is used to access and call functions on an object&#39;s parent.">super</a></li>
<li><a href="Reference/Operators/this.html" title="A function&#39;s this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode.">this</a></li>
<li><a href="Reference/Operators/typeof.html" title="The typeof operator returns a string indicating the type of the unevaluated operand.">typeof</a></li>
<li><a href="Reference/Operators/void.html" title="The void operator evaluates the given expression and then returns undefined.">void operator</a></li>
<li><a href="Reference/Operators/yield.html" title="The yield keyword is used to pause and resume a generator function (function* or legacy generator function).">yield</a></li>
<li><a href="Reference/Operators/yield_.html" title="The yield* expression is used to delegate to another generator or iterable object.">yield*</a></li>
</ol></li>
<li>Statements &amp; declarations
<ol>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/Legacy_generator_function_statement" title="The legacy generator function statement declares legacy generator functions with the specified parameters.">Legacy generator function</a></li>
<li><a href="Reference/Statements/async_function.html" title="The async function declaration defines an asynchronous function — a function that returns an AsyncFunction object.">async function</a></li>
<li><a href="Reference/Statements/block.html" title="A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of curly brackets and may optionally be labelled:">block</a></li>
<li><a href="Reference/Statements/break.html" title="The break statement terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.">break</a></li>
<li><a href="Reference/Statements/class.html" title="The class declaration creates a new class with a given name using prototype-based inheritance.">class</a></li>
<li><a href="Reference/Statements/const.html" title="Constants are block-scoped, much like variables defined using the let statement. The value of a constant can&#39;t be changed through reassignment, and it can&#39;t be redeclared.">const</a></li>
<li><a href="Reference/Statements/continue.html" title="The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.">continue</a></li>
<li><a href="Reference/Statements/debugger.html" title="The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.">debugger</a></li>
<li><a href="Reference/Statements/switch.html" title="The default keyword can be used in two situations in JavaScript: within a switch statement, or with an export statement.">default</a></li>
<li><a href="Reference/Statements/do...html" title="The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.">do...while</a></li>
<li><a href="Reference/Statements/Empty.html" title="An empty statement is used to provide no statement, although the JavaScript syntax would expect one.">empty</a></li>
<li><a href="Reference/Statements/export.html" title="The export statement is used when creating JavaScript modules to export functions, objects, or primitive values from the module so they can be used by other programs with the import statement.">export</a></li>
<li><a href="Reference/Statements/for.html" title="The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.">for</a></li>
<li><a href="Reference/Statements/for-await...html" title="The for await...of statement creates a loop iterating over async iterable objects as well as on sync iterables, including: built-in String, Array, Array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined async/sync iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.">for await...of</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/for_each...in" title="The for each...in statement iterates a specified variable over all values of object&#39;s properties. For each distinct property, a specified statement is executed.">for each...in</a></li>
<li><a href="Reference/Statements/for...html" title="The for...in statement iterates over all enumerable properties of an object that are keyed by strings (ignoring ones keyed by Symbols), including inherited enumerable properties.">for...in</a></li>
<li><a href="Reference/Statements/for..-2.html" title="The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.">for...of</a></li>
<li><a href="Reference/Statements/function.html" title="The function declaration (function statement) defines a function with the specified parameters.">function declaration</a></li>
<li><a href="Reference/Statements/function_.html" title="The function* declaration (function keyword followed by an asterisk) defines a generator function, which returns a Generator object.">function*</a></li>
<li><a href="Reference/Statements/if...html" title="The if statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement can be executed.">if...else</a></li>
<li><a href="Reference/Statements/import.html" title="The static import statement is used to import bindings which are exported by another module. ">import</a></li>
<li><a href="Reference/Statements/import-2.html" title="The import.meta object exposes context-specific metadata to a JavaScript module. It contains information about the module, like the module&#39;s URL.">import.meta</a></li>
<li><a href="Reference/Statements/label.html" title="The labeled statement can be used with break or continue statements. It is prefixing a statement with an identifier which you can refer to.">label</a></li>
<li><a href="Reference/Statements/let.html" title="The let statement declares a block scope local variable, optionally initializing it to a value.">let</a></li>
<li><a href="Reference/Statements/return.html" title="The return statement ends function execution and specifies a value to be returned to the function caller.">return</a></li>
<li><a href="Reference/Statements/switch.html" title="The switch statement evaluates an expression, matching the expression&#39;s value to a case clause, and executes statements associated with that case, as well as statements in cases that follow the matching case.">switch</a></li>
<li><a href="Reference/Statements/throw.html" title="The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won&#39;t be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.">throw</a></li>
<li><a href="Reference/Statements/try...html" title="The try...catch statement marks a block of statements to try and specifies a response should an exception be thrown.">try...catch</a></li>
<li><a href="Reference/Statements/var.html" title="The var statement declares a variable, optionally initializing it to a value.">var</a></li>
<li><a href="Reference/Statements/while.html" title="The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.">while</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Statements/with.html" title="The with statement extends the scope chain for a statement.">with</a></li>
</ol></li>
<li>Functions
<ol>
<li><a href="Reference/Functions/Arrow_functions.html" title="An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords. Arrow function expressions are ill suited as methods, and they cannot be used as constructors.">Arrow function expressions</a></li>
<li><a href="Reference/Functions/Default_parameters.html" title="Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.">Default parameters</a></li>
<li><a href="Reference/Functions/Method_definitions.html" title="Starting with ECMAScript 2015, a shorter syntax for method definitions on objects initializers is introduced. It is a shorthand for a function assigned to the method&#39;s name.">Method definitions</a></li>
<li><a href="Reference/Functions/rest_parameters.html" title="The rest parameter syntax allows us to represent an indefinite number of arguments as an array.">Rest parameters</a></li>
<li><a href="Reference/Functions/arguments.html" title="arguments is an Array-like object accessible inside functions that contains the values of the arguments passed to that function.">The arguments object</a></li>
<li><a href="Reference/Functions/get.html" title="The get syntax binds an object property to a function that will be called when that property is looked up.">getter</a></li>
<li><a href="Reference/Functions/set.html" title="The set syntax binds an object property to a function to be called when there is an attempt to set that property.">setter</a></li>
</ol></li>
<li>Classes
<ol>
<li><a href="Reference/Classes/Public_class_fields.html" title="Both static and instance public fields are writable, enumerable, and configurable properties. As such, unlike their private counterparts, they participate in prototype inheritance.">Class fields</a></li>
<li><a href="Reference/Classes/constructor.html" title="The constructor method is a special method for creating and initializing an object created within a class.">constructor</a></li>
<li><a href="Reference/Classes/extends.html" title="The extends keyword is used in class declarations or class expressions to create a class which is a child of another class.">extends</a></li>
<li><a href="Reference/Classes/static.html" title="The static keyword defines a static method for a class. Static methods aren&#39;t called on instances of the class. Instead, they&#39;re called on the class itself.">static</a></li>
</ol></li>
<li>Errors
<ol>
<li><a href="Reference/Errors/Property_access_denied.html" title="There was attempt to access an object for which you have no permission. This is likely an &lt;iframe&gt; element loaded from a different domain for which you violated the same-origin policy.">Error: Permission denied to access property "x"</a></li>
<li><a href="Reference/Errors/Too_much_recursion.html" title="When there are too many function calls, or a function is missing a base case, JavaScript will throw this error.">InternalError: too much recursion</a></li>
<li><a href="Reference/Errors/Not_a_codepoint.html" title="String.fromCodePoint() throws this error when passed NaN values, negative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF (1114111).">RangeError: argument is not a valid code point</a></li>
<li><a href="Reference/Errors/Invalid_array_length.html" title="RangeError">RangeError: invalid array length</a></li>
<li><a href="Reference/Errors/Invalid_date.html" title="RangeError">RangeError: invalid date</a></li>
<li><a href="Reference/Errors/Precision_range.html" title="RangeError">RangeError: precision is out of range</a></li>
<li><a href="Reference/Errors/Bad_radix.html" title="RangeError">RangeError: radix must be an integer</a></li>
<li><a href="Reference/Errors/Resulting_string_too_large.html" title="RangeError">RangeError: repeat count must be less than infinity</a></li>
<li><a href="Reference/Errors/Negative_repetition_count.html" title="RangeError">RangeError: repeat count must be non-negative</a></li>
<li><a href="Reference/Errors/Not_defined.html" title="ReferenceError.">ReferenceError: "x" is not defined</a></li>
<li><a href="Reference/Errors/Undeclared_var.html" title="ReferenceError warning in strict mode only.">ReferenceError: assignment to undeclared variable "x"</a></li>
<li><a href="Reference/Errors/Cant_access_lexical_declaration_before_init.html" title="ReferenceError">ReferenceError: can't access lexical declaration`X' before initialization</a></li>
<li><a href="Reference/Errors/Deprecated_caller_or_arguments_usage.html" title="A strict-mode-only warning that a ReferenceError occurred. JavaScript execution won&#39;t be halted.">ReferenceError: deprecated caller or arguments usage</a></li>
<li><a href="Reference/Errors/Invalid_assignment_left-hand_side.html" title="ReferenceError.">ReferenceError: invalid assignment left-hand side</a></li>
<li><a href="Reference/Errors/Undefined_prop.html" title="(Firefox only) ReferenceError warning which is reported only if javascript.options.strict preference is set to true.">ReferenceError: reference to undefined property "x"</a></li>
<li><a href="Reference/Errors/Deprecated_octal.html" title="SyntaxError in strict mode only.">SyntaxError: "0"-prefixed octal literals and octal escape seq. are deprecated</a></li>
<li><a href="Reference/Errors/Strict_Non_Simple_Params.html" title="SyntaxError.">SyntaxError: "use strict" not allowed in function with non-simple parameters</a></li>
<li><a href="Reference/Errors/Reserved_identifier.html" title="SyntaxError">SyntaxError: "x" is a reserved identifier</a></li>
<li><a href="Reference/Errors/JSON_bad_parse.html" title="SyntaxError">SyntaxError: JSON.parse: bad parsing</a></li>
<li><a href="Reference/Errors/Malformed_formal_parameter.html" title="SyntaxError">SyntaxError: Malformed formal parameter</a></li>
<li><a href="Reference/Errors/Unexpected_token.html" title="SyntaxError">SyntaxError: Unexpected token</a></li>
<li><a href="Reference/Errors/Deprecated_source_map_pragma.html" title="A warning that a SyntaxError occurred. JavaScript execution won&#39;t be halted.">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li>
<li><a href="Reference/Errors/Invalid_for-of_initializer.html" title="SyntaxError">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li>
<li><a href="Reference/Errors/Delete_in_strict_mode.html" title="SyntaxError in strict mode only.">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li>
<li><a href="Reference/Errors/Invalid_for-in_initializer.html" title="SyntaxError in strict mode only.">SyntaxError: for-in loop head declarations may not have initializers</a></li>
<li><a href="Reference/Errors/Unnamed_function_statement.html" title="SyntaxError">SyntaxError: function statement requires a name</a></li>
<li><a href="Reference/Errors/Identifier_after_number.html" title="SyntaxError">SyntaxError: identifier starts immediately after numeric literal</a></li>
<li><a href="Reference/Errors/Illegal_character.html" title="SyntaxError">SyntaxError: illegal character</a></li>
<li><a href="Reference/Errors/Bad_regexp_flag.html" title="SyntaxError">SyntaxError: invalid regular expression flag "x"</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_argument_list.html" title="SyntaxError.">SyntaxError: missing ) after argument list</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_condition.html" title="SyntaxError">SyntaxError: missing ) after condition</a></li>
<li><a href="Reference/Errors/Missing_colon_after_property_id.html" title="SyntaxError">SyntaxError: missing : after property id</a></li>
<li><a href="Reference/Errors/Missing_semicolon_before_statement.html" title="SyntaxError.">SyntaxError: missing ; before statement</a></li>
<li><a href="Reference/Errors/Missing_initializer_in_const.html" title="SyntaxError">SyntaxError: missing = in const declaration</a></li>
<li><a href="Reference/Errors/Missing_bracket_after_list.html" title="SyntaxError.">SyntaxError: missing ] after element list</a></li>
<li><a href="Reference/Errors/Missing_formal_parameter.html" title="SyntaxError">SyntaxError: missing formal parameter</a></li>
<li><a href="Reference/Errors/Missing_name_after_dot_operator.html" title="SyntaxError">SyntaxError: missing name after . operator</a></li>
<li><a href="Reference/Errors/No_variable_name.html" title="SyntaxError">SyntaxError: missing variable name</a></li>
<li><a href="Reference/Errors/Missing_curly_after_function_body.html" title="SyntaxError">SyntaxError: missing } after function body</a></li>
<li><a href="Reference/Errors/Missing_curly_after_property_list.html" title="SyntaxError">SyntaxError: missing } after property list</a></li>
<li><a href="Reference/Errors/Redeclared_parameter.html" title="SyntaxError">SyntaxError: redeclaration of formal parameter "x"</a></li>
<li><a href="Reference/Errors/Bad_return_or_yield.html" title="SyntaxError.">SyntaxError: return not in function</a></li>
<li><a href="Reference/Errors/Equal_as_assign.html" title="(Firefox only) SyntaxError warning which is reported only if javascript.options.strict preference is set to true.">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li>
<li><a href="Reference/Errors/Unterminated_string_literal.html" title="SyntaxError">SyntaxError: unterminated string literal</a></li>
<li><a href="Reference/Errors/No_properties.html" title="TypeError.">TypeError: "x" has no properties</a></li>
<li><a href="Reference/Errors/Unexpected_type.html" title="TypeError.">TypeError: "x" is (not) "y"</a></li>
<li><a href="Reference/Errors/Not_a_constructor.html" title="TypeError">TypeError: "x" is not a constructor</a></li>
<li><a href="Reference/Errors/Not_a_function.html" title="TypeError.">TypeError: "x" is not a function</a></li>
<li><a href="Reference/Errors/No_non-null_object.html" title="TypeError">TypeError: "x" is not a non-null object</a></li>
<li><a href="Reference/Errors/Read-only.html" title="TypeError">TypeError: "x" is read-only</a></li>
<li><a href="Reference/Errors/is_not_iterable.html" title="TypeError">TypeError: 'x' is not iterable</a></li>
<li><a href="Reference/Errors/More_arguments_needed.html" title="TypeError.">TypeError: More arguments needed</a></li>
<li><a href="Reference/Errors/Reduce_of_empty_array_with_no_initial_value.html" title="TypeError">TypeError: Reduce of empty array with no initial value</a></li>
<li><a href="Reference/Errors/Called_on_incompatible_type.html" title="TypeError">TypeError: X.prototype.y called on incompatible type</a></li>
<li><a href="Reference/Errors/Dead_object.html" title="TypeError">TypeError: can't access dead object</a></li>
<li><a href="Reference/Errors/Cant_access_property.html" title="TypeError.">TypeError: can't access property "x" of "y"</a></li>
<li><a href="Reference/Errors/Cant_assign_to_property.html" title="TypeError.">TypeError: can't assign to property "x" on "y": not an object</a></li>
<li><a href="Reference/Errors/Cant_define_property_object_not_extensible.html" title="TypeError">TypeError: can't define property "x": "obj" is not extensible</a></li>
<li><a href="Reference/Errors/Non_configurable_array_element.html" title="TypeError">TypeError: can't delete non-configurable array element</a></li>
<li><a href="Reference/Errors/Cant_redefine_property.html" title="TypeError">TypeError: can't redefine non-configurable property "x"</a></li>
<li><a href="Reference/Errors/in_operator_no_object.html" title="TypeError">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li>
<li><a href="Reference/Errors/Cyclic_object_value.html" title="TypeError">TypeError: cyclic object value</a></li>
<li><a href="Reference/Errors/invalid_right_hand_side_instanceof_operand.html" title="TypeError">TypeError: invalid 'instanceof' operand 'x'</a></li>
<li><a href="Reference/Errors/Array_sort_argument.html" title="TypeError">TypeError: invalid Array.prototype.sort argument</a></li>
<li><a href="Reference/Errors/Typed_array_invalid_arguments.html" title="TypeError">TypeError: invalid arguments</a></li>
<li><a href="Reference/Errors/Invalid_const_assignment.html" title="TypeError">TypeError: invalid assignment to const "x"</a></li>
<li><a href="Reference/Errors/Cant_delete.html" title="TypeError in strict mode only.">TypeError: property "x" is non-configurable and can't be deleted</a></li>
<li><a href="Reference/Errors/Getter_only.html" title="TypeError in strict mode only.">TypeError: setting getter-only property "x"</a></li>
<li><a href="Reference/Errors/Var_hides_argument.html" title="TypeError warning in strict mode only.">TypeError: variable "x" redeclares argument</a></li>
<li><a href="Reference/Errors/Malformed_URI.html" title="URIError">URIError: malformed URI sequence</a></li>
<li><a href="Reference/Errors/Already_has_pragma.html" title="A warning. JavaScript execution won&#39;t be halted.">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li>
<li><a href="Reference/Errors/Bad_octal.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li>
<li><a href="Reference/Errors/Deprecated_toLocaleFormat.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: Date.prototype.toLocaleFormat is deprecated</a></li>
<li><a href="Reference/Errors/For-each-in_loops_are_deprecated.html" title="Warning">Warning: JavaScript 1.6's for-each-in loops are deprecated</a></li>
<li><a href="Reference/Errors/Deprecated_String_generics.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: String.x is deprecated; use String.prototype.x instead</a></li>
<li><a href="Reference/Errors/Deprecated_expression_closures.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: expression closures are deprecated</a></li>
<li><a href="Reference/Errors/Stmt_after_return.html" title="Warning">Warning: unreachable code after return statement</a></li>
</ol></li>
<li>Misc
<ol>
<li><a href="JavaScript_technologies_overview.html">JavaScript technologies overview</a></li>
<li><a href="Reference/Lexical_grammar.html">Lexical grammar</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Enumerability_and_ownership_of_properties.html">Enumerability and ownership of properties</a></li>
<li><a href="Reference/Iteration_protocols.html">Iteration protocols</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Reference/Strict_mode/Transitioning_to_strict_mode.html">Transitioning to strict mode</a></li>
<li><a href="Reference/Template_literals.html">Template literals</a></li>
<li><a href="Reference/Deprecated_and_obsolete_features.html">Deprecated features</a></li>
</ol></li>
</ol>
</div>
</div>
</div>
</div>
</div>
<section class="newsletter-container">
<div id="newsletter-form-container" class="newsletter">
<section class="newsletter-head">
<h2 id="learn-the-best-of-web-development-3" class="newsletter-teaser">Learn the best of web development</h2>
<p>Get the latest and greatest from MDN delivered straight to your inbox.</p>
<p>The newsletter is offered in English only at the moment.</p>
</section>
<div class="form-group newsletter-group-email">
E-mail
</div>
<div id="newsletter-privacy" class="form-group form-group-agree newsletter-group-privacy" data-aria-hidden="false">
I’m okay with Mozilla handling my info as explained in this <a href="../../../../../external.html?link=https://www.mozilla.org/privacy/">Privacy Policy</a>.
</div>
<div class="newsletter-group-submit">
Sign up now
</div>
<span>Hide Newsletter Sign-up</span>
</div>
</section>
<div class="content-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/" class="nav-footer-logo">MDN Web Docs</a>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Web Technologies</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn Web Development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/About">About MDN</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Feedback</a></li>
</ul>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/">About</a></li>
<li><a href="../../../../../external.html?link=https://shop.spreadshirt.com/mdn-store/">MDN Web Docs Store</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/contact/">Contact Us</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/firefox/?utm_source=developer.mozilla.org&amp;utm_campaign=footer&amp;utm_medium=referral">Firefox</a></li>
</ul>
<div class="social social-mdn">
<h4 id="mdn-3">MDN</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<div class="social social-moz">
<h4 id="mozilla-3">Mozilla</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<p>© 2005-2020 Mozilla and individual contributors. Content is available under <a href="../../../../../external.html?link=https://developer.mozilla.org/docs/MDN/About#Copyrights_and_licenses">these licenses</a>.</p>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/legal/terms/mozilla">Terms</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/">Privacy</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/#cookies">Cookies</a></li>
</ul>
</div>
</div>
<div id="auth-modal" class="modal hidden">
<section class="auth-providers" tabindex="-1" data-role="dialog" data-aria-modal="true" data-aria-labelledby="modal-main-heading">
<h2 id="modal-main-heading">Sign In</h2>
<p>Sign in to enjoy the benefits of an MDN account. If you haven’t already created an account, you will be prompted to do so after signing in.</p>
<div class="auth-button-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/users/github/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FEnumerability_and_ownership_of_properties" class="github-auth">Sign in with Github</a> <a href="../../../../../external.html?link=https://developer.mozilla.org/users/google/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FEnumerability_and_ownership_of_properties" class="google-auth">Sign in with Google</a>
</div>
<span>Close modal</span>
</section>
</div>
<div id="react-container" data-component-name="SPA">
<div class="loading-bar">

</div>
<ul>
<li><a href="#content" id="skip-main">Skip to main content</a></li>
<li><a href="#language" id="skip-language">Select language</a></li>
<li><a href="#main-q" id="skip-search">Skip to search</a></li>
</ul>
<ul>
<li>Technologies
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Technologies Overview</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide/Graphics">Graphics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API">APIs / DOM</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions">Browser Extensions</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/MathML">MathML</a></li>
</ul></li>
<li>References &amp; Guides
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn web development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Tutorials">Tutorials</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Reference">References</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide">Developer Guides</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Accessibility">Accessibility</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Games">Game development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">...more docs</a></li>
</ul></li>
<li>Feedback
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Send Feedback</a></li>
<li><a href="../../../../../external.html?link=https://support.mozilla.org/">Get Firefox help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://stackoverflow.com/">Get web development help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Community">Join the MDN community</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/sprints/issues/new?template=issue-template.md&amp;projects=mdn/sprints/2&amp;labels=user-report&amp;title=/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness">Report a content problem 🌐</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/kuma/issues/new/choose">Report an issue 🌐</a></li>
</ul></li>
</ul>
<div class="header-search">
Search MDN
<span>Open search</span>
</div>
<div data-role="main">
<div class="titlebar-container">
<div class="titlebar">

</div>
</div>
<div class="full-width-row-container">
<div class="max-content-width-container">
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web" class="breadcrumb-chevron"><span class="pre-text">See </span><span data-property="name">Web technology for developers</span></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript" class="breadcrumb-previous"><span class="pre-text">See </span><span data-property="name">JavaScript</span></a></li>
<li><a href="Equality_comparisons_and_sameness.html" class="crumb-current-page"><span data-property="name" data-aria-current="page">Equality comparisons and sameness</span></a></li>
</ol>
<div class="dropdown-container language-menu">
English<span class="dropdown-arrow-down" data-aria-hidden="true">▼</span>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/de/docs/Web/JavaScript/Vergleiche_auf_Gleichheit_und_deren_Verwendung" title="German">Deutsch</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/es/docs/Web/JavaScript/Equality_comparisons_and_sameness" title="Spanish">Español</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/fr/docs/Web/JavaScript/Les_différents_tests_d_égalité" title="French">Français</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ja/docs/Web/JavaScript/Equality_comparisons_and_sameness" title="Japanese">日本語</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ko/docs/Web/JavaScript/Equality_comparisons_and_sameness" title="Korean">한국어</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Equality_comparisons_and_sameness" title="Portuguese (Brazilian)">Português (do Brasil)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness" title="Russian">Русский</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/uk/docs/Web/JavaScript/Перевірка_на_рівність_та_однаковість" title="Ukrainian">Українська</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness" title="Chinese (Simplified)">中文 (简体)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Equality_comparisons_and_sameness" title="Chinese (Traditional)">正體中文 (繁體)</a></li>
<li><a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness$locales" id="translations-add">Add a translation</a></li>
</ul>
</div>
</div>
</div>
<div class="wiki-left-present content-layout">
<div id="content" class="article text-content">
<div>

</div>
<p>There are four equality algorithms in ES2015:</p>
<ul>
<li>Abstract Equality Comparison (<code>==</code>)</li>
<li>Strict Equality Comparison (<code>===</code>): used by <code>Array.prototype.indexOf</code>, <code>Array.prototype.lastIndexOf</code>, and <code>case</code>-matching</li>
<li>SameValueZero: used by <code>%TypedArray%</code> and <code>ArrayBuffer</code> constructors, as well as <code>Map</code> and <code>Set</code> operations, and also <code>String.prototype.includes </code>and <code>Array.prototype.includes</code> since ES2016</li>
<li>SameValue: used in all other places</li>
</ul>
<p>JavaScript provides three different value-comparison operations:</p>
<ul>
<li><a href="Reference/Operators.html#Identity">===</a> - Strict Equality Comparison ("strict equality", "identity", "triple equals")</li>
<li><a href="Reference/Operators.html#Equality_operators">==</a> - Abstract Equality Comparison ("loose equality", "double equals")</li>
<li><a href="Reference/Global_Objects/Object/is.html"><code>Object.is</code></a> provides SameValue (new in ES2015).</li>
</ul>
<p>Which operation you choose depends on what sort of comparison you are looking to perform. Briefly:</p>
<ul>
<li>double equals (<code>==</code>) will perform a type conversion when comparing two things, and will handle <code>NaN</code>, <code>-0</code>, and <code>+0</code> specially to conform to IEEE 754 (so <code>NaN != NaN</code>, and <code>-0 == +0</code>);</li>
<li>triple equals (<code>===</code>) will do the same comparison as double equals (including the special handling for <code>NaN</code>, <code>-0</code>, and <code>+0</code>) but without type conversion; if the types differ, <code>false</code> is returned.</li>
<li><code>Object.is</code> does no type conversion and no special handling for <code>NaN</code>, <code>-0</code>, and <code>+0</code> (giving it the same behavior as <code>===</code> except on those special numeric values).</li>
</ul>
<p>Note that the distinction between these all have to do with their handling of primitives; none of them compares whether the parameters are conceptually similar in structure. For any non-primitive objects <code>x</code> and <code>y</code> which have the same structure but are distinct objects themselves, all of the above forms will evaluate to <code>false</code>.</p>
<h2 id="Strict_equality_using">Strict equality using <code>===</code></h2>
<p>Strict equality compares two values for equality. Neither value is implicitly converted to some other value before being compared. If the values have different types, the values are considered unequal. If the values have the same type, are not numbers, and have the same value, they're considered equal. Finally, if both values are numbers, they're considered equal if they're both not <code>NaN</code> and are the same value, or if one is <code>+0</code> and one is <code>-0</code>.</p>
<div class="sourceCode" id="cb105"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb105-1" title="1"><span class="kw">var</span> num <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></a>
<a class="sourceLine" id="cb105-2" title="2"><span class="kw">var</span> obj <span class="op">=</span> <span class="kw">new</span> <span class="at">String</span>(<span class="st">&#39;0&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb105-3" title="3"><span class="kw">var</span> str <span class="op">=</span> <span class="st">&#39;0&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb105-4" title="4"></a>
<a class="sourceLine" id="cb105-5" title="5"><span class="va">console</span>.<span class="at">log</span>(num <span class="op">===</span> num)<span class="op">;</span> <span class="co">// true</span></a>
<a class="sourceLine" id="cb105-6" title="6"><span class="va">console</span>.<span class="at">log</span>(obj <span class="op">===</span> obj)<span class="op">;</span> <span class="co">// true</span></a>
<a class="sourceLine" id="cb105-7" title="7"><span class="va">console</span>.<span class="at">log</span>(str <span class="op">===</span> str)<span class="op">;</span> <span class="co">// true</span></a>
<a class="sourceLine" id="cb105-8" title="8"></a>
<a class="sourceLine" id="cb105-9" title="9"><span class="va">console</span>.<span class="at">log</span>(num <span class="op">===</span> obj)<span class="op">;</span> <span class="co">// false</span></a>
<a class="sourceLine" id="cb105-10" title="10"><span class="va">console</span>.<span class="at">log</span>(num <span class="op">===</span> str)<span class="op">;</span> <span class="co">// false</span></a>
<a class="sourceLine" id="cb105-11" title="11"><span class="va">console</span>.<span class="at">log</span>(obj <span class="op">===</span> str)<span class="op">;</span> <span class="co">// false</span></a>
<a class="sourceLine" id="cb105-12" title="12"><span class="va">console</span>.<span class="at">log</span>(<span class="kw">null</span> <span class="op">===</span> <span class="kw">undefined</span>)<span class="op">;</span> <span class="co">// false</span></a>
<a class="sourceLine" id="cb105-13" title="13"><span class="va">console</span>.<span class="at">log</span>(obj <span class="op">===</span> <span class="kw">null</span>)<span class="op">;</span> <span class="co">// false</span></a>
<a class="sourceLine" id="cb105-14" title="14"><span class="va">console</span>.<span class="at">log</span>(obj <span class="op">===</span> <span class="kw">undefined</span>)<span class="op">;</span> <span class="co">// false</span></a></code></pre></div>
<p>Strict equality is almost always the correct comparison operation to use. For all values except numbers, it uses the obvious semantics: a value is only equal to itself. For numbers it uses slightly different semantics to gloss over two different edge cases. The first is that floating point zero is either positively or negatively signed. This is useful in representing certain mathematical solutions, but as most situations don't care about the difference between <code>+0</code> and <code>-0</code>, strict equality treats them as the same value. The second is that floating point includes the concept of a not-a-number value, <code>NaN</code>, to represent the solution to certain ill-defined mathematical problems: negative infinity added to positive infinity, for example. Strict equality treats <code>NaN</code> as unequal to every other value -- including itself. (The only case in which <code>(x !== x)</code> is <code>true</code> is when <code>x</code> is <code>NaN</code>.)</p>
<h2 id="Loose_equality_using">Loose equality using ==</h2>
<p>Loose equality compares two values for equality, <em>after</em> converting both values to a common type. After conversions (one or both sides may undergo conversions), the final equality comparison is performed exactly as <code>===</code> performs it. Loose equality is <em>symmetric</em>: <code>A == B</code> always has identical semantics to <code>B == A</code> for any values of <code>A</code> and <code>B</code> (except for the order of applied conversions).</p>
<p>The equality comparison is performed as follows for operands of the various types:</p>
</div>
</div>
</div>
</div>
<p>Operand B</p>
<p>Undefined</p>
<p>Null</p>
<p>Number</p>
<p>String</p>
<p>Boolean</p>
<p>Object</p>
<p>Operand A</p>
<p>Undefined</p>
<p><code>true</code></p>
<p><code>true</code></p>
<p><code>false</code></p>
<p><code>false</code></p>
<p><code>false</code></p>
<p><code>false</code></p>
<p>Null</p>
<p><code>true</code></p>
<p><code>true</code></p>
<p><code>false</code></p>
<p><code>false</code></p>
<p><code>false</code></p>
<p><code>false</code></p>
<p>Number</p>
<p><code>false</code></p>
<p><code>false</code></p>
<p><code>A === B</code></p>
<p><code>A === ToNumber(B)</code></p>
<p><code>A === ToNumber(B)</code></p>
<p><code>A == ToPrimitive(B)</code></p>
<p>String</p>
<p><code>false</code></p>
<p><code>false</code></p>
<p><code>ToNumber(A) === B</code></p>
<p><code>A === B</code></p>
<p><code>ToNumber(A) === ToNumber(B)</code></p>
<p><code>A == ToPrimitive(B)</code></p>
<p>Boolean</p>
<p><code>false</code></p>
<p><code>false</code></p>
<p><code>ToNumber(A) === B</code></p>
<p><code>ToNumber(A) === ToNumber(B)</code></p>
<p><code>A === B</code></p>
<p><code>ToNumber(A) == ToPrimitive(B)</code></p>
<p>Object</p>
<p><code>false</code></p>
<p><code>false</code></p>
<p><code>ToPrimitive(A) == B</code></p>
<p><code>ToPrimitive(A) == B</code></p>
<p><code>ToPrimitive(A) == ToNumber(B)</code></p>
<p><code>A === B</code></p>
<p>In the above table, <code>ToNumber(A)</code> attempts to convert its argument to a number before comparison. Its behavior is equivalent to <code>+A</code> (the unary + operator). <code>ToPrimitive(A)</code> attempts to convert its object argument to a primitive value, by attempting to invoke varying sequences of <code>A.toString</code> and <code>A.valueOf</code> methods on <code>A</code>.</p>
<p>Traditionally, and according to ECMAScript, all objects are loosely unequal to <code>undefined</code> and <code>null</code>. But most browsers permit a very narrow class of objects (specifically, the <code>document.all</code> object for any page), in some contexts, to act as if they <em>emulate</em> the value <code>undefined</code>. Loose equality is one such context: <code>null == A</code> and <code>undefined == A</code> evaluate to true if, and only if, A is an object that <em>emulates</em> <code>undefined</code>. In all other cases an object is never loosely equal to <code>undefined</code> or <code>null</code>.</p>
<div class="sourceCode" id="cb106"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb106-1" title="1"><span class="kw">var</span> num <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></a>
<a class="sourceLine" id="cb106-2" title="2"><span class="kw">var</span> obj <span class="op">=</span> <span class="kw">new</span> <span class="at">String</span>(<span class="st">&#39;0&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb106-3" title="3"><span class="kw">var</span> str <span class="op">=</span> <span class="st">&#39;0&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb106-4" title="4"></a>
<a class="sourceLine" id="cb106-5" title="5"><span class="va">console</span>.<span class="at">log</span>(num <span class="op">==</span> num)<span class="op">;</span> <span class="co">// true</span></a>
<a class="sourceLine" id="cb106-6" title="6"><span class="va">console</span>.<span class="at">log</span>(obj <span class="op">==</span> obj)<span class="op">;</span> <span class="co">// true</span></a>
<a class="sourceLine" id="cb106-7" title="7"><span class="va">console</span>.<span class="at">log</span>(str <span class="op">==</span> str)<span class="op">;</span> <span class="co">// true</span></a>
<a class="sourceLine" id="cb106-8" title="8"></a>
<a class="sourceLine" id="cb106-9" title="9"><span class="va">console</span>.<span class="at">log</span>(num <span class="op">==</span> obj)<span class="op">;</span> <span class="co">// true</span></a>
<a class="sourceLine" id="cb106-10" title="10"><span class="va">console</span>.<span class="at">log</span>(num <span class="op">==</span> str)<span class="op">;</span> <span class="co">// true</span></a>
<a class="sourceLine" id="cb106-11" title="11"><span class="va">console</span>.<span class="at">log</span>(obj <span class="op">==</span> str)<span class="op">;</span> <span class="co">// true</span></a>
<a class="sourceLine" id="cb106-12" title="12"><span class="va">console</span>.<span class="at">log</span>(<span class="kw">null</span> <span class="op">==</span> <span class="kw">undefined</span>)<span class="op">;</span> <span class="co">// true</span></a>
<a class="sourceLine" id="cb106-13" title="13"></a>
<a class="sourceLine" id="cb106-14" title="14"><span class="co">// both false, except in rare cases</span></a>
<a class="sourceLine" id="cb106-15" title="15"><span class="va">console</span>.<span class="at">log</span>(obj <span class="op">==</span> <span class="kw">null</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb106-16" title="16"><span class="va">console</span>.<span class="at">log</span>(obj <span class="op">==</span> <span class="kw">undefined</span>)<span class="op">;</span></a></code></pre></div>
<p>In most cases, using loose equality is discouraged. The result of a comparison using strict equality is easier to predict, and may evaluate more quickly due to the lack of type coercion.</p>
<h2 id="Same-value_equality">Same-value equality</h2>
<p>Same-value equality addresses a final use case: determining whether two values are <em>functionally identical</em> in all contexts. (This use case demonstrates an instance of the <a href="../../../../../external.html?link=http://en.wikipedia.org/wiki/Liskov_substitution_principle" class="external">Liskov substitution principle</a>.) One instance occurs when an attempt is made to mutate an immutable property:</p>
<div class="sourceCode" id="cb107"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb107-1" title="1"><span class="co">// Add an immutable NEGATIVE_ZERO property to the Number constructor.</span></a>
<a class="sourceLine" id="cb107-2" title="2"><span class="va">Object</span>.<span class="at">defineProperty</span>(Number<span class="op">,</span> <span class="st">&#39;NEGATIVE_ZERO&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb107-3" title="3">                      <span class="op">{</span> <span class="dt">value</span><span class="op">:</span> <span class="dv">-0</span><span class="op">,</span> <span class="dt">writable</span><span class="op">:</span> <span class="kw">false</span><span class="op">,</span> <span class="dt">configurable</span><span class="op">:</span> <span class="kw">false</span><span class="op">,</span> <span class="dt">enumerable</span><span class="op">:</span> <span class="kw">false</span> <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb107-4" title="4"></a>
<a class="sourceLine" id="cb107-5" title="5"><span class="kw">function</span> <span class="at">attemptMutation</span>(v) <span class="op">{</span></a>
<a class="sourceLine" id="cb107-6" title="6">  <span class="va">Object</span>.<span class="at">defineProperty</span>(Number<span class="op">,</span> <span class="st">&#39;NEGATIVE_ZERO&#39;</span><span class="op">,</span> <span class="op">{</span> <span class="dt">value</span><span class="op">:</span> v <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb107-7" title="7"><span class="op">}</span></a></code></pre></div>
<p><code>Object.defineProperty</code> will throw an exception when attempting to change an immutable property, but it does nothing if no actual change is requested. If <code>v</code> is <code>-0</code>, no change has been requested, and no error will be thrown. Internally, when an immutable property is redefined, the newly-specified value is compared against the current value using same-value equality.</p>
<p>Same-value equality is provided by the <a href="Reference/Global_Objects/Object/is.html"><code>Object.is</code></a> method.</p>
<h2 id="Same-value-zero_equality">Same-value-zero equality</h2>
<p>Similar to same-value equality, but +0 and -0 are considered equal.</p>
<h2 id="Abstract_equality_strict_equality_and_same_value_in_the_specification">Abstract equality, strict equality, and same value in the specification</h2>
<p>In ES5, the comparison performed by <a href="Reference/Operators.html"><code>==</code></a> is described in <a href="../../../../../external.html?link=http://ecma-international.org/ecma-262/5.1/#sec-11.9.3" class="external">Section 11.9.3, The Abstract Equality Algorithm</a>. The <a href="Reference/Operators.html"><code>===</code></a> comparison is <a href="../../../../../external.html?link=http://ecma-international.org/ecma-262/5.1/#sec-11.9.6" class="external">11.9.6, The Strict Equality Algorithm</a>. (Go look at these. They're brief and readable. Hint: read the strict equality algorithm first.) ES5 also describes, in <a href="../../../../../external.html?link=http://ecma-international.org/ecma-262/5.1/#sec-9.12" class="external">Section 9.12, The SameValue Algorithm</a> for use internally by the JS engine. It's largely the same as the Strict Equality Algorithm, except that 11.9.6.4 and 9.12.4 differ in handling <a href="Reference/Global_Objects/Number.html"><code>Number</code></a>s. ES2015 simply proposes to expose this algorithm through <a href="Reference/Global_Objects/Object/is.html"><code>Object.is</code></a>.</p>
<p>We can see that with double and triple equals, with the exception of doing a type check upfront in 11.9.6.1, the Strict Equality Algorithm is a subset of the Abstract Equality Algorithm, because 11.9.6.2–7 correspond to 11.9.3.1.a–f.</p>
<h2 id="A_model_for_understanding_equality_comparisons">A model for understanding equality comparisons?</h2>
<p>Prior to ES2015, you might have said of double equals and triple equals that one is an "enhanced" version of the other. For example, someone might say that double equals is an extended version of triple equals, because the former does everything that the latter does, but with type conversion on its operands. E.g., <code>6 == "6"</code>. (Alternatively, someone might say that double equals is the baseline, and triple equals is an enhanced version, because it requires the two operands to be the same type, so it adds an extra constraint. Which one is the better model for understanding depends on how you choose to view things.)</p>
<p>However, this way of thinking about the built-in sameness operators is not a model that can be stretched to allow a place for ES2015's <a href="Reference/Global_Objects/Object/is.html"><code>Object.is</code></a> on this "spectrum". <a href="Reference/Global_Objects/Object/is.html"><code>Object.is</code></a> isn't simply "looser" than double equals or "stricter" than triple equals, nor does it fit somewhere in between (i.e., being both stricter than double equals, but looser than triple equals). We can see from the sameness comparisons table below that this is due to the way that <a href="Reference/Global_Objects/Object/is.html"><code>Object.is</code></a> handles <a href="Reference/Global_Objects/NaN.html"><code>NaN</code></a>. Notice that if <code>Object.is(NaN, NaN)</code> evaluated to <code>false</code>, we <em>could</em> say that it fits on the loose/strict spectrum as an even stricter form of triple equals, one that distinguishes between <code>-0</code> and <code>+0</code>. The <a href="Reference/Global_Objects/NaN.html"><code>NaN</code></a> handling means this is untrue, however. Unfortunately, <a href="Reference/Global_Objects/Object/is.html"><code>Object.is</code></a> simply has to be thought of in terms of its specific characteristics, rather than its looseness or strictness with regard to the equality operators.</p>
<table>
<caption>Sameness Comparisons</caption>
<thead>
<tr class="header">
<th>x</th>
<th>y</th>
<th style="text-align: center;"><code>==</code></th>
<th style="text-align: center;"><code>===</code></th>
<th style="text-align: center;"><code>Object.is</code></th>
<th style="text-align: center;"><code>SameValueZero</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>undefined</code></td>
<td><code>undefined</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
</tr>
<tr class="even">
<td><code>null</code></td>
<td><code>null</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
</tr>
<tr class="odd">
<td><code>true</code></td>
<td><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
</tr>
<tr class="even">
<td><code>false</code></td>
<td><code>false</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
</tr>
<tr class="odd">
<td><code>'foo'</code></td>
<td><code>'foo'</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
</tr>
<tr class="even">
<td><code>0</code></td>
<td><code>0</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
</tr>
<tr class="odd">
<td><code>+0</code></td>
<td><code>-0</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>true</code></td>
</tr>
<tr class="even">
<td><code>+0</code></td>
<td><code>0</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
</tr>
<tr class="odd">
<td><code>-0</code></td>
<td><code>0</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>true</code></td>
</tr>
<tr class="even">
<td><code>0</code></td>
<td><code>false</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
</tr>
<tr class="odd">
<td><code>""</code></td>
<td><code>false</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
</tr>
<tr class="even">
<td><code>""</code></td>
<td><code>0</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
</tr>
<tr class="odd">
<td><code>'0'</code></td>
<td><code>0</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
</tr>
<tr class="even">
<td><code>'17'</code></td>
<td><code>17</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
</tr>
<tr class="odd">
<td><code>[1, 2]</code></td>
<td><code>'1,2'</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
</tr>
<tr class="even">
<td><code>new String('foo')</code></td>
<td><code>'foo'</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
</tr>
<tr class="odd">
<td><code>null</code></td>
<td><code>undefined</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
</tr>
<tr class="even">
<td><code>null</code></td>
<td><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
</tr>
<tr class="odd">
<td><code>undefined</code></td>
<td><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
</tr>
<tr class="even">
<td><code>{ foo: 'bar' }</code></td>
<td><code>{ foo: 'bar' }</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
</tr>
<tr class="odd">
<td><code>new String('foo')</code></td>
<td><code>new String('foo')</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
</tr>
<tr class="even">
<td><code>0</code></td>
<td><code>null</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
</tr>
<tr class="odd">
<td><code>0</code></td>
<td><code>NaN</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
</tr>
<tr class="even">
<td><code>'foo'</code></td>
<td><code>NaN</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
</tr>
<tr class="odd">
<td><code>NaN</code></td>
<td><code>NaN</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;"><code>true</code></td>
</tr>
</tbody>
</table>
<h2 id="When_to_use_Object.is_versus_triple_equals">When to use <a href="Reference/Global_Objects/Object/is.html"><code>Object.is</code></a> versus triple equals</h2>
<p>In general, the only time <a href="Reference/Global_Objects/Object/is.html"><code>Object.is</code></a>'s special behavior towards zeros is likely to be of interest is in the pursuit of certain meta-programming schemes, especially regarding property descriptors, when it is desirable for your work to mirror some of the characteristics of <a href="Reference/Global_Objects/Object/defineProperty.html"><code>Object.defineProperty</code></a>. If your use case does not require this, it is suggested to avoid <a href="Reference/Global_Objects/Object/is.html"><code>Object.is</code></a> and use <a href="Reference/Operators.html" title="/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators"><code>===</code></a> instead. Even if your requirements involve having comparisons between two <a href="Reference/Global_Objects/NaN.html"><code>NaN</code></a> values evaluate to <code>true</code>, generally it is easier to special-case the <a href="Reference/Global_Objects/NaN.html"><code>NaN</code></a> checks (using the <a href="Reference/Global_Objects/isNaN.html"><code>isNaN</code></a> method available from previous versions of ECMAScript) than it is to work out how surrounding computations might affect the sign of any zeros you encounter in your comparison.</p>
<p>Here's a non-exhaustive list of built-in methods and operators that might cause a distinction between <code>-0</code> and <code>+0</code> to manifest itself in your code:</p>
<dl>
<dt><a href="Reference/Operators.html#-_.28Unary_Negation.29"><code>- (unary negation)</code></a></dt>
<dd><pre class="brush:js notranslate"><code>let stoppingForce = obj.mass * -obj.velocity;</code></pre>
<p>If <code>obj.velocity</code> is <code>0</code> (or computes to <code>0</code>), a <code>-0</code> is introduced at that place and propogates out into <code>stoppingForce</code>.</p>
</dd>
</dl>
<dl>
<dt><a href="Reference/Global_Objects/Math/atan2.html"><code>Math.atan2</code></a><br />
<a href="Reference/Global_Objects/Math/ceil.html"><code>Math.ceil</code></a><br />
<a href="Reference/Global_Objects/Math/pow.html"><code>Math.pow</code></a><br />
<a href="Reference/Global_Objects/Math/round.html"><code>Math.round</code></a></dt>
<dd>In some cases,it's possible for a <code>-0</code> to be introduced into an expression as a return value of these methods even when no <code>-0</code> exists as one of the parameters. For example, using <a href="Reference/Global_Objects/Math/pow.html"><code>Math.pow</code></a> to raise <a href="Reference/Global_Objects/Infinity.html"><code>-Infinity</code></a> to the power of any negative, odd exponent evaluates to <code>-0</code>. Refer to the documentation for the individual methods.
</dd>
</dl>
<dl>
<dt><a href="Reference/Global_Objects/Math/floor.html"><code>Math.floor</code></a><br />
<a href="Reference/Global_Objects/Math/max.html"><code>Math.max</code></a><br />
<a href="Reference/Global_Objects/Math/min.html"><code>Math.min</code></a><br />
<a href="Reference/Global_Objects/Math/sin.html"><code>Math.sin</code></a><br />
<a href="Reference/Global_Objects/Math/sqrt.html"><code>Math.sqrt</code></a><br />
<a href="Reference/Global_Objects/Math/tan.html"><code>Math.tan</code></a></dt>
<dd>It's possible to get a <code>-0</code> return value out of these methods in some cases where a <code>-0</code> exists as one of the parameters. E.g., <code>Math.min(-0, +0)</code> evaluates to <code>-0</code>. Refer to the documentation for the individual methods.
</dd>
</dl>
<dl>
<dt><code>~</code><br />
<code>&lt;&lt;</code><br />
<code>&gt;&gt;</code></dt>
<dd>Each of these operators uses the ToInt32 algorithm internally. Since there is only one representation for 0 in the internal 32-bit integer type, <code>-0</code> will not survive a round trip after an inverse operation. E.g., both <code>Object.is(~~(-0), -0)</code> and <code>Object.is(-0 &lt;&lt; 2 &gt;&gt; 2, -0)</code> evaluate to <code>false</code>.
</dd>
</dl>
<p>Relying on <a href="Reference/Global_Objects/Object/is.html"><code>Object.is</code></a> when the signedness of zeros is not taken into account can be hazardous. Of course, when the intent is to distinguish between <code>-0</code> and <code>+0</code>, it does exactly what's desired.</p>
<h2 id="Caveat_Object.is_and_NaN">Caveat: <a href="Reference/Global_Objects/Object/is.html"><code>Object.is</code></a> and NaN</h2>
<p>The <a href="Reference/Global_Objects/Object/is.html"><code>Object.is</code></a> specification treats all instances of <a href="Reference/Global_Objects/NaN.html"><code>NaN</code></a> as the same object. However, since <a href="Typed_arrays.html">typed arrays</a> are available, we can have distinct instances, which don't behave identically in all contexts. For example:</p>
<div class="sourceCode" id="cb109"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb109-1" title="1"><span class="kw">var</span> f2b <span class="op">=</span> x <span class="kw">=&gt;</span> <span class="kw">new</span> <span class="at">Uint8Array</span>(<span class="kw">new</span> <span class="at">Float64Array</span>([x]).<span class="at">buffer</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb109-2" title="2"><span class="kw">var</span> b2f <span class="op">=</span> x <span class="kw">=&gt;</span> <span class="kw">new</span> <span class="at">Float64Array</span>(<span class="va">x</span>.<span class="at">buffer</span>)[<span class="dv">0</span>]<span class="op">;</span></a>
<a class="sourceLine" id="cb109-3" title="3"><span class="kw">var</span> n <span class="op">=</span> <span class="at">f2b</span>(<span class="kw">NaN</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb109-4" title="4">n[<span class="dv">0</span>] <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></a>
<a class="sourceLine" id="cb109-5" title="5"><span class="kw">var</span> nan2 <span class="op">=</span> <span class="at">b2f</span>(n)<span class="op">;</span></a>
<a class="sourceLine" id="cb109-6" title="6">nan2<span class="op">;</span></a>
<a class="sourceLine" id="cb109-7" title="7"><span class="co">// &gt; NaN</span></a>
<a class="sourceLine" id="cb109-8" title="8"><span class="va">Object</span>.<span class="at">is</span>(nan2<span class="op">,</span> <span class="kw">NaN</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb109-9" title="9"><span class="co">// &gt; true</span></a>
<a class="sourceLine" id="cb109-10" title="10"><span class="at">f2b</span>(<span class="kw">NaN</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb109-11" title="11"><span class="co">// &gt; Uint8Array(8) [0, 0, 0, 0, 0, 0, 248,127)</span></a>
<a class="sourceLine" id="cb109-12" title="12"><span class="at">f2b</span>(nan2)<span class="op">;</span></a>
<a class="sourceLine" id="cb109-13" title="13"><span class="co">// &gt; Uint8Array(8) [1, 0, 0, 0, 0, 0, 248,127)</span></a></code></pre></div>
<h2 id="See_also">See also</h2>
<ul>
<li><a href="../../../../../external.html?link=http://dorey.github.io/JavaScript-Equality-Table/" class="external">JS Comparison Table</a></li>
</ul>
<div class="metadata">
<section class="document-meta">
<h4 id="metadata-4">Metadata</h4>
<ul>
<li><strong>Last modified:</strong> Aug 4, 2020, <a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness$history">by MDN contributors</a></li>
</ul>
</section>
</div>
<div id="sidebar-quicklinks" class="sidebar">
<div class="quick-links">
<div class="quick-links-head sidebar-heading">
Related Topics
</div>
<div>
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong><em>JavaScript</em></strong></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong>Tutorials:</strong></a></li>
<li>Complete beginners
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics">JavaScript basics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps">JavaScript first steps</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks">JavaScript building blocks</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Introducing JavaScript objects</a></li>
</ol></li>
<li>JavaScript Guide
<ol>
<li><a href="Guide/Introduction.html">Introduction</a></li>
<li><a href="Guide/Grammar_and_Types.html">Grammar and types</a></li>
<li><a href="Guide/Control_flow_and_error_handling.html">Control flow and error handling</a></li>
<li><a href="Guide/Loops_and_iteration.html">Loops and iteration</a></li>
<li><a href="Guide/Functions.html">Functions</a></li>
<li><a href="Guide/Expressions_and_Operators.html">Expressions and operators</a></li>
<li><a href="Guide/Numbers_and_dates.html">Numbers and dates</a></li>
<li><a href="Guide/Text_formatting.html">Text formatting</a></li>
<li><a href="Guide/Regular_Expressions.html">Regular expressions</a></li>
<li><a href="Guide/Indexed_collections.html">Indexed collections</a></li>
<li><a href="Guide/Keyed_collections.html">Keyed collections</a></li>
<li><a href="Guide/Working_with_Objects.html">Working with objects</a></li>
<li><a href="Guide/Details_of_the_Object_Model.html">Details of the object model</a></li>
<li><a href="Guide/Using_promises.html">Using promises</a></li>
<li><a href="Guide/Iterators_and_generators.html">Iterators and generators</a></li>
<li><a href="Guide/Meta_programming.html">Meta programming</a></li>
<li><a href="Guide/Modules.html">JavaScript modules</a></li>
</ol></li>
<li>Intermediate
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks">Client-side JavaScript frameworks</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs">Client-side web APIs</a></li>
<li><a href="A_re-introduction_to_JavaScript.html">A re-introduction to JavaScript</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Equality_comparisons_and_sameness.html">Equality comparisons and sameness</a></li>
<li><a href="Closures.html">Closures</a></li>
</ol></li>
<li>Advanced
<ol>
<li><a href="Inheritance_and_the_prototype_chain.html">Inheritance and the prototype chain</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Typed_arrays.html">JavaScript typed arrays</a></li>
<li><a href="Memory_Management.html">Memory Management</a></li>
<li><a href="EventLoop.html">Concurrency model and Event Loop</a></li>
</ol></li>
<li><strong><a href="Reference.html">References:</a></strong></li>
<li>Built-in objects
<ol>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/AggregateError.html" title="The AggregateError object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by Promise.any(), when all promises passed to it reject.">AggregateError</a></li>
<li><a href="Reference/Global_Objects/Array.html" title="The JavaScript Array class is a global object that is used in the construction of arrays; which are high-level, list-like objects.">Array</a></li>
<li><a href="Reference/Global_Objects/ArrayBuffer.html" title="The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer.">ArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/AsyncFunction.html" title="The AsyncFunction constructor creates a new async function object. In JavaScript, every asynchronous function is actually an AsyncFunction object.">AsyncFunction</a></li>
<li><a href="Reference/Global_Objects/Atomics.html" title="The Atomics object provides atomic operations as static methods. They are used with SharedArrayBuffer and ArrayBuffer objects.">Atomics</a></li>
<li><a href="Reference/Global_Objects/BigInt.html" title="BigInt is a built-in object that provides a way to represent whole numbers larger than 253 - 1, which is the largest number JavaScript can reliably represent with the Number primitive and represented by the Number.MAX_SAFE_INTEGER constant. BigInt can be used for arbitrarily large integers.">BigInt</a></li>
<li><a href="Reference/Global_Objects/BigInt64Array.html" title="The BigInt64Array typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigInt64Array</a></li>
<li><a href="Reference/Global_Objects/BigUint64Array.html" title="The BigUint64Array typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigUint64Array</a></li>
<li><a href="Reference/Global_Objects/Boolean.html" title="The Boolean object is an object wrapper for a boolean value.">Boolean</a></li>
<li><a href="Reference/Global_Objects/DataView.html" title="The DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform&#39;s endianness.">DataView</a></li>
<li><a href="Reference/Global_Objects/Date.html" title="JavaScript Date objects represent a single moment in time in a platform-independent format.">Date</a></li>
<li><a href="Reference/Global_Objects/Error.html" title="Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.">Error</a></li>
<li><a href="Reference/Global_Objects/EvalError.html" title="The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.">EvalError</a></li>
<li><a href="Reference/Global_Objects/FinalizationRegistry.html" title="A FinalizationRegistry object lets you request a callback when an object is garbage-collected.">FinalizationRegistry</a></li>
<li><a href="Reference/Global_Objects/Float32Array.html" title="The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float32Array</a></li>
<li><a href="Reference/Global_Objects/Float64Array.html" title="The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float64Array</a></li>
<li><a href="Reference/Global_Objects/Function.html" title="Every JavaScript function is actually a Function object. This can be seen with the code (function(){}).constructor === Function, which returns true.">Function</a></li>
<li><a href="Reference/Global_Objects/Generator.html" title="The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.">Generator</a></li>
<li><a href="Reference/Global_Objects/GeneratorFunction.html" title="The GeneratorFunction constructor creates a new generator function object. In JavaScript, every generator function is actually a GeneratorFunction object.">GeneratorFunction</a></li>
<li><a href="Reference/Global_Objects/Infinity.html" title="The global property Infinity is a numeric value representing infinity.">Infinity</a></li>
<li><a href="Reference/Global_Objects/Int16Array.html" title="The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int16Array</a></li>
<li><a href="Reference/Global_Objects/Int32Array.html" title="The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int32Array</a></li>
<li><a href="Reference/Global_Objects/Int8Array.html" title="The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int8Array</a></li>
<li><a href="Reference/Global_Objects/InternalError.html" title="The InternalError object indicates an error that occurred internally in the JavaScript engine.">InternalError</a></li>
<li><a href="Reference/Global_Objects/Intl.html" title="The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The Intl object provides access to several constructors as well as functionality common to the internationalization constructors and other language sensitive functions.">Intl</a></li>
<li><a href="Reference/Global_Objects/JSON.html" title="The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can&#39;t be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.">JSON</a></li>
<li><a href="Reference/Global_Objects/Map.html" title="The Map object holds key-value pairs and remembers the original insertion order of the keys.">Map</a></li>
<li><a href="Reference/Global_Objects/Math.html" title="Math is a built-in object that has properties and methods for mathematical constants and functions. It’s not a function object.">Math</a></li>
<li><a href="Reference/Global_Objects/NaN.html" title="The global NaN property is a value representing Not-A-Number.">NaN</a></li>
<li><a href="Reference/Global_Objects/Number.html" title="The Number constructor contains constants and methods for working with numbers. Values of other types can be converted to numbers using the Number() function.">Number</a></li>
<li><a href="Reference/Global_Objects/Object.html" title="The Object class represents one of JavaScript&#39;s data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.">Object</a></li>
<li><a href="Reference/Global_Objects/Promise.html" title="The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.">Promise</a></li>
<li><a href="Reference/Global_Objects/Proxy.html" title="The Proxy object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.">Proxy</a></li>
<li><a href="Reference/Global_Objects/RangeError.html" title="The RangeError object indicates an error when a value is not in the set or range of allowed values.">RangeError</a></li>
<li><a href="Reference/Global_Objects/ReferenceError.html" title="The ReferenceError object represents an error when a non-existent variable is referenced.">ReferenceError</a></li>
<li><a href="Reference/Global_Objects/Reflect.html" title="Reflect is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of proxy handlers. Reflect is not a function object, so it&#39;s not constructible.">Reflect</a></li>
<li><a href="Reference/Global_Objects/RegExp.html" title="The RegExp object is used for matching text with a pattern.">RegExp</a></li>
<li><a href="Reference/Global_Objects/Set.html" title="The Set object lets you store unique values of any type, whether primitive values or object references.">Set</a></li>
<li><a href="Reference/Global_Objects/SharedArrayBuffer.html" title="The SharedArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. Unlike an ArrayBuffer, a SharedArrayBuffer cannot become detached.">SharedArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/String.html" title="The String object is used to represent and manipulate a sequence of characters.">String</a></li>
<li><a href="Reference/Global_Objects/Symbol.html" title="The data type symbol is a primitive data type. The Symbol() function returns a value of type symbol, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class, but is incomplete as a constructor because it does not support the syntax &quot;new Symbol()&quot;.">Symbol</a></li>
<li><a href="Reference/Global_Objects/SyntaxError.html" title="The SyntaxError object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.">SyntaxError</a></li>
<li><a href="Reference/Global_Objects/TypeError.html" title="The TypeError object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.">TypeError</a></li>
<li><a href="Reference/Global_Objects/TypedArray.html" title="A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.">TypedArray</a></li>
<li><a href="Reference/Global_Objects/URIError.html" title="The URIError object represents an error when a global URI handling function was used in a wrong way.">URIError</a></li>
<li><a href="Reference/Global_Objects/Uint16Array.html" title="The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint16Array</a></li>
<li><a href="Reference/Global_Objects/Uint32Array.html" title="The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint32Array</a></li>
<li><a href="Reference/Global_Objects/Uint8Array.html" title="The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8Array</a></li>
<li><a href="Reference/Global_Objects/Uint8ClampedArray.html" title="The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8ClampedArray</a></li>
<li><a href="Reference/Global_Objects/WeakMap.html" title="The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.">WeakMap</a></li>
<li><a href="Reference/Global_Objects/WeakRef.html" title="A WeakRef object lets you hold a weak reference to another object, without preventing that object from getting garbage-collected.">WeakRef</a></li>
<li><a href="Reference/Global_Objects/WeakSet.html" title="The WeakSet object lets you store weakly held objects in a collection.">WeakSet</a></li>
<li><a href="Reference/Global_Objects/WebAssembly.html" title="The WebAssembly JavaScript object acts as the namespace for all WebAssembly-related functionality.">WebAssembly</a></li>
<li><a href="Reference/Global_Objects/decodeURI.html" title="The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or by a similar routine.">decodeURI()</a></li>
<li><a href="Reference/Global_Objects/decodeURIComponent.html" title="The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.">decodeURIComponent()</a></li>
<li><a href="Reference/Global_Objects/encodeURI.html" title="The encodeURI() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURI()</a></li>
<li><a href="Reference/Global_Objects/encodeURIComponent.html" title="The encodeURIComponent() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURIComponent()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/escape.html" title="The escape() function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.">escape()</a></li>
<li><a href="Reference/Global_Objects/eval.html" title="The eval() function evaluates JavaScript code represented as a string.">eval()</a></li>
<li><a href="Reference/Global_Objects/globalThis.html" title="The global globalThis property contains the global this value, which is akin to the global object.">globalThis</a></li>
<li><a href="Reference/Global_Objects/isFinite.html" title="The global isFinite() function determines whether the passed value is a finite number. If  needed, the parameter is first converted to a number.">isFinite()</a></li>
<li><a href="Reference/Global_Objects/isNaN.html" title="The isNaN() function determines whether a value is NaN or not. Note, coercion inside the isNaN function has interesting rules; you may alternatively want to use Number.isNaN(), as defined in ECMAScript 2015.">isNaN()</a></li>
<li><a href="Reference/Global_Objects/null.html" title="The value null represents the intentional absence of any object value. It is one of JavaScript&#39;s primitive values and is treated as falsy for boolean operations.">null</a></li>
<li><a href="Reference/Global_Objects/parseFloat.html" title="The parseFloat() function parses an argument (converting it to a string first if needed) and returns a floating point number.">parseFloat()</a></li>
<li><a href="Reference/Global_Objects/parseInt.html" title="The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).">parseInt()</a></li>
<li><a href="Reference/Global_Objects/undefined.html" title="The global undefined property represents the primitive value undefined. It is one of JavaScript&#39;s primitive types.">undefined</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/unescape.html" title="The unescape() function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Usually, decodeURI or decodeURIComponent are preferred over unescape.">unescape()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><a href="Reference/Global_Objects/uneval.html" title="The uneval() function creates a string representation of the source code of an Object.">uneval()</a></li>
</ol></li>
<li>Expressions &amp; operators
<ol>
<li><a href="Reference/Operators/Addition.html" title="The addition operator (+) produces the sum of numeric operands or string concatenation.">Addition (+)</a></li>
<li><a href="Reference/Operators/Addition_assignment.html" title="The addition assignment operator (+=) adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible.">Addition assignment (+=)</a></li>
<li><a href="Reference/Operators/Assignment.html" title="The simple assignment operator (=) is used to assign a value to a variable. The assignment operation evaluates to the assigned value. Chaining the assignment operator is possible in order to assign a single value to multiple variables">Assignment (=)</a></li>
<li><a href="Reference/Operators/Bitwise_AND.html" title="The bitwise AND operator (&amp;) returns a 1 in each bit position for which the corresponding bits of both operands are 1s.">Bitwise AND (&amp;)</a></li>
<li><a href="Reference/Operators/Bitwise_AND_assignment.html" title="The bitwise AND assignment operator (&amp;=) uses the binary representation of both operands, does a bitwise AND operation on them and assigns the result to the variable.">Bitwise AND assignment (&amp;=)</a></li>
<li><a href="Reference/Operators/Bitwise_NOT.html" title="The bitwise NOT operator (~) inverts the bits of its operand.">Bitwise NOT (~)</a></li>
<li><a href="Reference/Operators/Bitwise_OR.html" title="The bitwise OR operator (|) returns a 1 in each bit position for which the corresponding bits of either or both operands are 1s.">Bitwise OR (|)</a></li>
<li><a href="Reference/Operators/Bitwise_OR_assignment.html" title="The bitwise OR assignment operator (|=) uses the binary representation of both operands, does a bitwise OR operation on them and assigns the result to the variable.">Bitwise OR assignment (|=)</a></li>
<li><a href="Reference/Operators/Bitwise_XOR.html" title="The bitwise XOR operator (^) returns a 1 in each bit position for which the corresponding bits of either but not both operands are 1s.">Bitwise XOR (^)</a></li>
<li><a href="Reference/Operators/Bitwise_XOR_assignment.html" title="The bitwise XOR assignment operator (^=) uses the binary representation of both operands, does a bitwise XOR operation on them and assigns the result to the variable.">Bitwise XOR assignment (^=)</a></li>
<li><a href="Reference/Operators/Comma_Operator.html" title="The comma operator (,) evaluates each of its operands (from left to right) and returns the value of the last operand. This lets you create a compound expression in which multiple expressions are evaluated, with the compound expression&#39;s final value being the value of the rightmost of its member expressions. This is commonly used to provide multiple parameters to a for loop.">Comma operator (,)</a></li>
<li><a href="Reference/Operators/Conditional_Operator.html" title="The conditional (ternary) operator is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy.">Conditional (ternary) operator</a></li>
<li><a href="Reference/Operators/Decrement.html" title="The decrement operator (--) decrements (subtracts one from) its operand and returns a value.">Decrement (--)</a></li>
<li><a href="Reference/Operators/Destructuring_assignment.html" title="The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.">Destructuring assignment</a></li>
<li><a href="Reference/Operators/Division.html" title="The division operator (/) produces the quotient of its operands where the left operand is the dividend and the right operand is the divisor.">Division (/)</a></li>
<li><a href="Reference/Operators/Division_assignment.html" title="The division assignment operator (/=) divides a variable by the value of the right operand and assigns the result to the variable.">Division assignment (/=)</a></li>
<li><a href="Reference/Operators/Equality.html" title="The equality operator (==) checks whether its two operands are equal, returning a Boolean result. Unlike the strict equality operator, it attempts to convert and compare operands that are of different types.">Equality (==)</a></li>
<li><a href="Reference/Operators/Exponentiation.html" title="The exponentiation operator (**) returns the result of raising the first operand to the power of the second operand.">Exponentiation (**)</a></li>
<li><a href="Reference/Operators/Exponentiation_assignment.html" title="The exponentiation assignment operator (**=) raises the value of a variable to the power of the right operand.">Exponentiation assignment (**=)</a></li>
<li><a href="Reference/Operators/function.html" title="The function keyword can be used to define a function inside an expression.">Function expression</a></li>
<li><a href="Reference/Operators/Greater_than.html" title="The greater than operator (&gt;) returns true if the left operand is greater than the right operand, and false otherwise.">Greater than (&gt;)</a></li>
<li><a href="Reference/Operators/Greater_than_or_equal.html" title="The greater than or equal operator (&gt;=) returns true if the left operand is greater than or equal to the right operand, and false otherwise.">Greater than or equal (&gt;=)</a></li>
<li><a href="Reference/Operators/Grouping.html" title="The grouping operator ( ) controls the precedence of evaluation in expressions.">Grouping operator ( )</a></li>
<li><a href="Reference/Operators/Increment.html" title="The increment operator (++) increments (adds one to) its operand and returns a value.">Increment (++)</a></li>
<li><a href="Reference/Operators/Inequality.html" title="The inequality operator (!=) checks whether its two operands are not equal, returning a Boolean result. Unlike the strict inequality operator, it attempts to convert and compare operands that are of different types.">Inequality (!=)</a></li>
<li><a href="Reference/Operators/Left_shift.html" title="The left shift operator (&lt;&lt;) shifts the first operand the specified number of bits to the left. Excess bits shifted off to the left are discarded. Zero bits are shifted in from the right.">Left shift (&lt;&lt;)</a></li>
<li><a href="Reference/Operators/Left_shift_assignment.html" title="The left shift assignment operator (&lt;&lt;=) moves the specified amount of bits to the left and assigns the result to the variable.">Left shift assignment (&lt;&lt;=)</a></li>
<li><a href="Reference/Operators/Less_than.html" title="The less than operator (&lt;) returns true if the left operand is less than the right operand, and false otherwise.">Less than (&lt;)</a></li>
<li><a href="Reference/Operators/Less_than_or_equal.html" title="The less than or equal operator (&lt;=) returns true if the left operand is less than or equal to the right operand, and false otherwise.">Less than or equal (&lt;=)</a></li>
<li><a href="Reference/Operators/Logical_AND.html" title="The logical AND (&amp;&amp;) operator (logical conjunction) for a set of operands is true if and only if all of its operands are true. It is typically used with Boolean (logical) values. When it is, it returns a Boolean value. However, the &amp;&amp; operator actually returns the value of one of the specified operands, so if this operator is used with non-Boolean values, it will return a non-Boolean value.">Logical AND (&amp;&amp;)</a></li>
<li><a href="Reference/Operators/Logical_AND_assignment.html" title="The logical AND assignment (x &amp;&amp;= y) operator only assigns if x is truthy.">Logical AND assignment (&amp;&amp;=)</a></li>
<li><a href="Reference/Operators/Logical_NOT.html" title="The logical NOT (!) operator (logical complement, negation) takes truth to falsity and vice versa. It is typically used with Boolean (logical) values. When used with non-Boolean values, it returns false if its single operand can be converted to true; otherwise, returns true.">Logical NOT (!)</a></li>
<li><a href="Reference/Operators/Logical_OR.html" title="The logical OR (||) operator (logical disjunction) for a set of operands is true if and only if one or more of its operands is true. It is typically used with Boolean (logical) values. When it is, it returns a Boolean value. However, the || operator actually returns the value of one of the specified operands, so if this operator is used with non-Boolean values, it will return a non-Boolean value.">Logical OR (||)</a></li>
<li><a href="Reference/Operators/Logical_OR_assignment.html" title="The logical OR assignment (x ||= y) operator only assigns if x is falsy.">Logical OR assignment (||=)</a></li>
<li><a href="Reference/Operators/Logical_nullish_assignment.html" title="The logical nullish assignment (x ??= y) operator only assigns if x is nullish (null or undefined).">Logical nullish assignment (??=)</a></li>
<li><a href="Reference/Operators/Multiplication.html" title="The multiplication operator (*) produces the product of the operands.">Multiplication (*)</a></li>
<li><a href="Reference/Operators/Multiplication_assignment.html" title="The multiplication assignment operator (*=) multiplies a variable by the value of the right operand and assigns the result to the variable.">Multiplication assignment (*=)</a></li>
<li><a href="Reference/Operators/Nullish_coalescing_operator.html" title="The nullish coalescing operator (??) is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.">Nullish coalescing operator (??)</a></li>
<li><a href="Reference/Operators/Object_initializer.html" title="Objects can be initialized using new Object(), Object.create(), or using the literal notation (initializer notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).">Object initializer</a></li>
<li><a href="Reference/Operators/Operator_Precedence.html" title="Operator precedence determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.">Operator precedence</a></li>
<li><a href="Reference/Operators/Optional_chaining.html" title="The ?. operator functions similarly to the . chaining operator, except that instead of causing an error if a reference is nullish (null or undefined), the expression short-circuits with a return value of undefined.">Optional chaining (?.)</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Operators/Pipeline_operator.html" title="The experimental pipeline operator |&gt; (currently at stage 1) pipes the value of an expression into a function. This allows the creation of chained function calls in a readable manner. The result is syntactic sugar in which a function call with a single argument can be written like this:">Pipeline operator (|&gt;)</a></li>
<li><a href="Reference/Operators/Property_Accessors-2.html" title="Property accessors provide access to an object&#39;s properties by using the dot notation or the bracket notation.">Property accessors</a></li>
<li><a href="Reference/Operators/Remainder.html" title="The remainder operator (%) returns the remainder left over when one operand is divided by a second operand. It always takes the sign of the dividend.">Remainder (%)</a></li>
<li><a href="Reference/Operators/Remainder_assignment.html" title="The remainder assignment operator (%=) divides a variable by the value of the right operand and assigns the remainder to the variable.">Remainder assignment (%=)</a></li>
<li><a href="Reference/Operators/Right_shift.html" title="The right shift operator (&gt;&gt;) shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Copies of the leftmost bit are shifted in from the left. Since the new leftmost bit has the same value as the previous leftmost bit, the sign bit (the leftmost bit) does not change. Hence the name &quot;sign-propagating&quot;.">Right shift (&gt;&gt;)</a></li>
<li><a href="Reference/Operators/Right_shift_assignment.html" title="The right shift assignment operator (&gt;&gt;=) moves the specified amount of bits to the right and assigns the result to the variable.">Right shift assignment (&gt;&gt;=)</a></li>
<li><a href="Reference/Operators/Spread_syntax.html" title="Spread syntax (...) allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.">Spread syntax (...)</a></li>
<li><a href="Reference/Operators/Strict_equality.html" title="The strict equality operator (===) checks whether its two operands are equal, returning a Boolean result. Unlike the equality operator, the strict equality operator always considers operands of different types to be different.">Strict equality (===)</a></li>
<li><a href="Reference/Operators/Strict_inequality.html" title="The strict inequality operator (!==) checks whether its two operands are not equal, returning a Boolean result. Unlike the inequality operator, the strict inequality operator always considers operands of different types to be different.">Strict inequality (!==)</a></li>
<li><a href="Reference/Operators/Subtraction.html" title="The subtraction operator (-) subtracts the two operands, producing their difference.">Subtraction (-)</a></li>
<li><a href="Reference/Operators/Subtraction_assignment.html" title="The subtraction assignment operator (-=) subtracts the value of the right operand from a variable and assigns the result to the variable.">Subtraction assignment (-=)</a></li>
<li><a href="Reference/Operators/Unary_negation.html" title="The unary negation operator (-) precedes its operand and negates it.">Unary negation (-)</a></li>
<li><a href="Reference/Operators/Unary_plus.html" title="The unary plus operator (+) precedes its operand and evaluates to its operand but attempts to convert it into a number, if it isn&#39;t already.">Unary plus (+)</a></li>
<li><a href="Reference/Operators/Unsigned_right_shift.html" title="The unsigned right shift operator (&gt;&gt;&gt;) (zero-fill right shift) shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Zero bits are shifted in from the left. The sign bit becomes 0, so the result is always non-negative. Unlike the other bitwise operators, zero-fill right shift returns an unsigned 32-bit integer.">Unsigned right shift (&gt;&gt;&gt;)</a></li>
<li><a href="Reference/Operators/Unsigned_right_shift_assignment.html" title="The unsigned right shift assignment operator (&gt;&gt;&gt;=) moves the specified amount of bits to the right and assigns the result to the variable.">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li>
<li><a href="Reference/Operators/async_function.html" title="The async function keyword can be used to define async functions inside expressions.">async function expression</a></li>
<li><a href="Reference/Operators/await.html" title="The await operator is used to wait for a Promise. It can only be used inside an async function.">await</a></li>
<li><a href="Reference/Operators/class.html" title="The class expression is one way to define a class in ECMAScript 2015. Similar to function expressions, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. ">class expression</a></li>
<li><a href="Reference/Operators/delete.html" title="The JavaScript delete operator removes a property from an object; if no more references to the same property are held, it is eventually released automatically.">delete operator</a></li>
<li><a href="Reference/Operators/function_.html" title="The function* keyword can be used to define a generator function inside an expression.">function* expression</a></li>
<li><a href="Reference/Operators/in.html" title="The in operator returns true if the specified property is in the specified object or its prototype chain.">in operator</a></li>
<li><a href="Reference/Operators/instanceof.html" title="The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object.">instanceof</a></li>
<li><a href="Reference/Operators/new.html" title="The new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.">new operator</a></li>
<li><a href="Reference/Operators/new-2.html" title="The new.target pseudo-property lets you detect whether a function or constructor was called using the new operator. In constructors and functions invoked using the new operator, new.target returns a reference to the constructor or function. In normal function calls, new.target is undefined.">new.target</a></li>
<li><a href="Reference/Operators/super.html" title="The super keyword is used to access and call functions on an object&#39;s parent.">super</a></li>
<li><a href="Reference/Operators/this.html" title="A function&#39;s this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode.">this</a></li>
<li><a href="Reference/Operators/typeof.html" title="The typeof operator returns a string indicating the type of the unevaluated operand.">typeof</a></li>
<li><a href="Reference/Operators/void.html" title="The void operator evaluates the given expression and then returns undefined.">void operator</a></li>
<li><a href="Reference/Operators/yield.html" title="The yield keyword is used to pause and resume a generator function (function* or legacy generator function).">yield</a></li>
<li><a href="Reference/Operators/yield_.html" title="The yield* expression is used to delegate to another generator or iterable object.">yield*</a></li>
</ol></li>
<li>Statements &amp; declarations
<ol>
<li><a href="Reference/Statements/async_function.html" title="An async function is a function declared with the async keyword. Async functions are instances of the AsyncFunction constructor, and the await keyword is permitted within them. The async and await keywords enable asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.">async function</a></li>
<li><a href="Reference/Statements/block.html" title="A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of braces (&quot;curly brackets&quot;) and may optionally be labelled:">block</a></li>
<li><a href="Reference/Statements/break.html" title="The break statement terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.">break</a></li>
<li><a href="Reference/Statements/class.html" title="The class declaration creates a new class with a given name using prototype-based inheritance.">class</a></li>
<li><a href="Reference/Statements/const.html" title="Constants are block-scoped, much like variables defined using the let keyword. The value of a constant can&#39;t be changed through reassignment, and it can&#39;t be redeclared.">const</a></li>
<li><a href="Reference/Statements/continue.html" title="The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.">continue</a></li>
<li><a href="Reference/Statements/debugger.html" title="The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.">debugger</a></li>
<li><a href="Reference/Statements/do...html" title="The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.">do...while</a></li>
<li><a href="Reference/Statements/Empty.html" title="An empty statement is used to provide no statement, although the JavaScript syntax would expect one.">empty</a></li>
<li><a href="Reference/Statements/export.html" title="The export statement is used when creating JavaScript modules to export live bindings to functions, objects, or primitive values from the module so they can be used by other programs with the import statement. Bindings that are exported can still be modified locally; when imported, although they can only be read by the importing module the value updates whenever it is updated by the exporting module.">export</a></li>
<li><a href="Reference/Statements/for.html" title="The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.">for</a></li>
<li><a href="Reference/Statements/for-await...html" title="The for await...of statement creates a loop iterating over async iterable objects as well as on sync iterables, including: built-in String, Array, Array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined async/sync iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object. Like await operator, the statement can only be used inside an async function.">for await...of</a></li>
<li><a href="Reference/Statements/for...html" title="The for...in statement iterates over all enumerable properties of an object that are keyed by strings (ignoring ones keyed by Symbols), including inherited enumerable properties.">for...in</a></li>
<li><a href="Reference/Statements/for..-2.html" title="The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.">for...of</a></li>
<li><a href="Reference/Statements/function.html" title="The function declaration (function statement) defines a function with the specified parameters.">function declaration</a></li>
<li><a href="Reference/Statements/function_.html" title="The function* declaration (function keyword followed by an asterisk) defines a generator function, which returns a Generator object.">function*</a></li>
<li><a href="Reference/Statements/if...html" title="The if statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement can be executed.">if...else</a></li>
<li><a href="Reference/Statements/import.html" title="The static import statement is used to import read only live bindings which are exported by another module. ">import</a></li>
<li><a href="Reference/Statements/import-2.html" title="The import.meta object exposes context-specific metadata to a JavaScript module. It contains information about the module, like the module&#39;s URL.">import.meta</a></li>
<li><a href="Reference/Statements/label.html" title="The labeled statement can be used with break or continue statements. It is prefixing a statement with an identifier which you can refer to.">label</a></li>
<li><a href="Reference/Statements/let.html" title="The let statement declares a block-scoped local variable, optionally initializing it to a value.">let</a></li>
<li><a href="Reference/Statements/return.html" title="The return statement ends function execution and specifies a value to be returned to the function caller.">return</a></li>
<li><a href="Reference/Statements/switch.html" title="The switch statement evaluates an expression, matching the expression&#39;s value to a case clause, and executes statements associated with that case, as well as statements in cases that follow the matching case.">switch</a></li>
<li><a href="Reference/Statements/throw.html" title="The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won&#39;t be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.">throw</a></li>
<li><a href="Reference/Statements/try...html" title="The try...catch statement marks a block of statements to try and specifies a response should an exception be thrown.">try...catch</a></li>
<li><a href="Reference/Statements/var.html" title="The var statement declares a function-scoped or globally-scoped variable, optionally initializing it to a value.">var</a></li>
<li><a href="Reference/Statements/while.html" title="The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.">while</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Statements/with.html" title="The with statement extends the scope chain for a statement.">with</a></li>
</ol></li>
<li>Functions
<ol>
<li><a href="Reference/Functions/Arrow_functions.html" title="An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords. Arrow function expressions are all suited as methods, and they cannot be used as constructors.">Arrow function expressions</a></li>
<li><a href="Reference/Functions/Default_parameters.html" title="Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.">Default parameters</a></li>
<li><a href="Reference/Functions/Method_definitions.html" title="Starting with ECMAScript 2015, a shorter syntax for method definitions on objects initializers is introduced. It is a shorthand for a function assigned to the method&#39;s name.">Method definitions</a></li>
<li><a href="Reference/Functions/rest_parameters.html" title="The rest parameter syntax allows us to represent an indefinite number of arguments as an array.">Rest parameters</a></li>
<li><a href="Reference/Functions/arguments.html" title="arguments is an Array-like object accessible inside functions that contains the values of the arguments passed to that function.">The arguments object</a></li>
<li><a href="Reference/Functions/get.html" title="The get syntax binds an object property to a function that will be called when that property is looked up.">getter</a></li>
<li><a href="Reference/Functions/set.html" title="The set syntax binds an object property to a function to be called when there is an attempt to set that property.">setter</a></li>
</ol></li>
<li>Classes
<ol>
<li><a href="Reference/Classes/Private_class_fields.html" title="Class properties are public by default and can be examined or modified outside the class. There is however an experimental proposal to allow defining private class fields using a hash # prefix is added.">Private class fields</a></li>
<li><a href="Reference/Classes/Public_class_fields.html" title="Both static and instance public fields are writable, enumerable, and configurable properties. As such, unlike their private counterparts, they participate in prototype inheritance.">Public class fields</a></li>
<li><a href="Reference/Classes/constructor.html" title="The constructor method is a special method of a class for creating and initializing an object of that class.">constructor</a></li>
<li><a href="Reference/Classes/extends.html" title="The extends keyword is used in class declarations or class expressions to create a class that is a child of another class.">extends</a></li>
<li><a href="Reference/Classes/static.html" title="The static keyword defines a static method for a class. Static methods aren&#39;t called on instances of the class. Instead, they&#39;re called on the class itself.">static</a></li>
</ol></li>
<li>Errors
<ol>
<li><a href="Reference/Errors/Property_access_denied.html" title="The JavaScript exception &quot;Permission denied to access property&quot; occurs when there was an attempt to access an object for which you have no permission.">Error: Permission denied to access property "x"</a></li>
<li><a href="Reference/Errors/Too_much_recursion.html" title="The JavaScript exception &quot;too much recursion&quot; or &quot;Maximum call stack size exceeded&quot; occurs when there are too many function calls, or a function is missing a base case.">InternalError: too much recursion</a></li>
<li><a href="Reference/Errors/Not_a_codepoint.html" title="The JavaScript exception &quot;Invalid code point&quot; occurs when NaN values, negative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF (1114111) are used with String.fromCodePoint().">RangeError: argument is not a valid code point</a></li>
<li><a href="Reference/Errors/Invalid_array_length.html" title="The JavaScript exception &quot;Invalid array length&quot; occurs when creating an Array or an ArrayBuffer which has a length which is either negative or larger or equal to 232, or when setting the Array.length property to a value which is either negative or larger or equal to 232.">RangeError: invalid array length</a></li>
<li><a href="Reference/Errors/Invalid_date.html" title="The JavaScript exception &quot;invalid date&quot; occurs when a string leading to an invalid date has been provided to Date or Date.parse().">RangeError: invalid date</a></li>
<li><a href="Reference/Errors/Precision_range.html" title="The JavaScript exception &quot;precision is out of range&quot; occurs when a number that&#39;s outside of the range of 0 and 20 (or 21) was passed into toFixed or toPrecision.">RangeError: precision is out of range</a></li>
<li><a href="Reference/Errors/Bad_radix.html" title="The JavaScript exception &quot;radix must be an integer at least 2 and no greater than 36&quot; occurs when the optional radix parameter of the Number.prototype.toString() or the BigInt.prototype.toString() method was specified and is not between 2 and 36.">RangeError: radix must be an integer</a></li>
<li><a href="Reference/Errors/Resulting_string_too_large.html" title="The JavaScript exception &quot;repeat count must be less than infinity&quot; occurs when the String.prototype.repeat() method is used with a count argument that is infinity.">RangeError: repeat count must be less than infinity</a></li>
<li><a href="Reference/Errors/Negative_repetition_count.html" title="The JavaScript exception &quot;repeat count must be non-negative&quot; occurs when the String.prototype.repeat() method is used with a count argument that is a negative number.">RangeError: repeat count must be non-negative</a></li>
<li><a href="Reference/Errors/Not_defined.html" title="The JavaScript exception &quot;variable is not defined&quot; occurs when there is a non-existent variable referenced somewhere.">ReferenceError: "x" is not defined</a></li>
<li><a href="Reference/Errors/Undeclared_var.html" title="The JavaScript strict mode-only exception &quot;Assignment to undeclated variable&quot; occurs when the value has been assigned to an undeclared variable.">ReferenceError: assignment to undeclared variable "x"</a></li>
<li><a href="Reference/Errors/Cant_access_lexical_declaration_before_init.html" title="The JavaScript exception &quot;can&#39;t access lexical declaration `variable&#39; before initialization&quot; occurs when a lexical variable was accessed before it was initialized. This happens within any block statement, when let or const declarations are accessed before they are defined.">ReferenceError: can't access lexical declaration`X' before initialization</a></li>
<li><a href="Reference/Errors/Deprecated_caller_or_arguments_usage.html" title="The JavaScript strict mode-only exception &quot;deprecated caller or arguments usage&quot; occurs when the deprecated Function.caller or Function.arguments properties are used.">ReferenceError: deprecated caller or arguments usage</a></li>
<li><a href="Reference/Errors/Invalid_assignment_left-hand_side.html" title="The JavaScript exception &quot;invalid assignment left-hand side&quot; occurs when there was an unexpected assignment somewhere. For example, a single &quot;=&quot; sign was used instead of &quot;==&quot; or &quot;===&quot;.">ReferenceError: invalid assignment left-hand side</a></li>
<li><a href="Reference/Errors/Undefined_prop.html" title="The JavaScript warning &quot;reference to undefined property&quot; occurs when a script attempted to access an object property which doesn&#39;t exist.">ReferenceError: reference to undefined property "x"</a></li>
<li><a href="Reference/Errors/Deprecated_octal.html" title="The JavaScript strict mode-only exception &quot;0-prefixed octal literals and octal escape sequences are deprecated; for octal literals use the &quot;0o&quot; prefix instead&quot; occurs when deprecated octal literals and octal escape sequences are used.">SyntaxError: "0"-prefixed octal literals and octal escape seq. are deprecated</a></li>
<li><a href="Reference/Errors/Strict_Non_Simple_Params.html" title="The JavaScript exception &quot;&#39;use strict&#39; not allowed in function&quot; occurs when a &quot;use strict&quot; directive is used at the top of a function with default parameters, rest parameters, or destructuring parameters.">SyntaxError: "use strict" not allowed in function with non-simple parameters</a></li>
<li><a href="Reference/Errors/Reserved_identifier.html" title="The JavaScript exception &quot;variable is a reserved identifier&quot; occurs when reserved keywords are used as identifiers.">SyntaxError: "x" is a reserved identifier</a></li>
<li><a href="Reference/Errors/JSON_bad_parse.html" title="The JavaScript exceptions thrown by JSON.parse() occur when string failed to be parsed as JSON.">SyntaxError: JSON.parse: bad parsing</a></li>
<li><a href="Reference/Errors/Malformed_formal_parameter.html" title="The JavaScript exception &quot;malformed formal parameter&quot; occurs when the argument list of a Function() constructor call is invalid somehow.">SyntaxError: Malformed formal parameter</a></li>
<li><a href="Reference/Errors/Unexpected_token.html" title="The JavaScript exceptions &quot;unexpected token&quot; occur when a specific language construct was expected, but something else was provided. This might be a simple typo.">SyntaxError: Unexpected token</a></li>
<li><a href="Reference/Errors/Deprecated_source_map_pragma.html" title="The JavaScript warning &quot;Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead&quot; occurs when there is a deprecated source map syntax in a JavaScript source.">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li>
<li><a href="Reference/Errors/Invalid_for-of_initializer.html" title="The JavaScript exception &quot;a declaration in the head of a for-of loop can&#39;t have an initializer&quot; occurs when the head of a for...of loop contains an initializer expression such as |for (var i = 0 of iterable)|. This is not allowed in for-of loops.">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li>
<li><a href="Reference/Errors/Delete_in_strict_mode.html" title="The JavaScript strict mode-only exception &quot;applying the &#39;delete&#39; operator to an unqualified name is deprecated&quot; occurs when variables are attempted to be deleted using the delete operator.">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li>
<li><a href="Reference/Errors/Invalid_for-in_initializer.html" title="The JavaScript strict mode-only exception &quot;for-in loop head declarations may not have initializers&quot; occurs when the head of a for...in contains an initializer expression, such as |for (var i = 0 in obj)|. This is not allowed in for-of loops in strict mode.">SyntaxError: for-in loop head declarations may not have initializers</a></li>
<li><a href="Reference/Errors/Unnamed_function_statement.html" title="The JavaScript exception &quot;function statement requires a name&quot; occurs when there is a function statement in the code that requires a name.">SyntaxError: function statement requires a name</a></li>
<li><a href="Reference/Errors/Identifier_after_number.html" title="The JavaScript exception &quot;identifier starts immediately after numeric literal&quot; occurs when an identifier started with a digit. Identifiers can only start with a letter, underscore (_), or dollar sign ($).">SyntaxError: identifier starts immediately after numeric literal</a></li>
<li><a href="Reference/Errors/Illegal_character.html" title="The JavaScript exception &quot;illegal character&quot; occurs when there is an invalid or unexpected token that doesn&#39;t belong at this position in the code.">SyntaxError: illegal character</a></li>
<li><a href="Reference/Errors/Bad_regexp_flag.html" title="The JavaScript exception &quot;invalid regular expression flag&quot; occurs when the flags, defined after the second slash in regular expression literal, are not one of g, i, m, s, u, or y.">SyntaxError: invalid regular expression flag "x"</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_argument_list.html" title="The JavaScript exception &quot;missing ) after argument list&quot; occurs when there is an error with how a function is called. This might be a typo, a missing operator, or an unescaped string.">SyntaxError: missing ) after argument list</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_condition.html" title="The JavaScript exception &quot;missing ) after condition&quot; occurs when there is an error with how an if condition is written. It must appear in parenthesis after the if keyword.">SyntaxError: missing ) after condition</a></li>
<li><a href="Reference/Errors/Missing_colon_after_property_id.html" title="The JavaScript exception &quot;missing : after property id&quot; occurs when objects are created using the object initializer syntax. A colon (:) separates keys and values for the object&#39;s properties. Somehow, this colon is missing or misplaced.">SyntaxError: missing : after property id</a></li>
<li><a href="Reference/Errors/Missing_semicolon_before_statement.html" title="The JavaScript exception &quot;missing ; before statement&quot; occurs when there is a semicolon (;) missing somewhere and can&#39;t be added by automatic semicolon insertion (ASI). You need to provide a semicolon, so that JavaScript can parse the source code correctly.">SyntaxError: missing ; before statement</a></li>
<li><a href="Reference/Errors/Missing_initializer_in_const.html" title="The JavaScript exception &quot;missing = in const declaration&quot; occurs when a const declaration was not given a value in the same statement (like const RED_FLAG;). You need to provide one (const RED_FLAG = &#39;#ff0&#39;).">SyntaxError: missing = in const declaration</a></li>
<li><a href="Reference/Errors/Missing_bracket_after_list.html" title="The JavaScript exception &quot;missing ] after element list&quot; occurs when there is an error with the array initializer syntax somewhere. Likely there is a closing bracket (&quot;]&quot;) or a comma (&quot;,&quot;) missing.">SyntaxError: missing ] after element list</a></li>
<li><a href="Reference/Errors/Missing_formal_parameter.html" title="The JavaScript exception &quot;missing formal parameter&quot; occurs when your function declaration is missing valid parameters.">SyntaxError: missing formal parameter</a></li>
<li><a href="Reference/Errors/Missing_name_after_dot_operator.html" title="The JavaScript exception &quot;missing name after . operator&quot; occurs when there is a problem with how the dot operator (.) is used for property access.">SyntaxError: missing name after . operator</a></li>
<li><a href="Reference/Errors/No_variable_name.html" title="The JavaScript exception &quot;missing variable name&quot; occurs way too often as naming things is so hard. Or maybe a comma is wrong. Check for typos!">SyntaxError: missing variable name</a></li>
<li><a href="Reference/Errors/Missing_curly_after_function_body.html" title="The JavaScript exception &quot;missing } after function body&quot; occurs when there is a syntax mistake when creating a function somewhere. Check if any closing curly brackets or parenthesis are in the correct order.">SyntaxError: missing } after function body</a></li>
<li><a href="Reference/Errors/Missing_curly_after_property_list.html" title="The JavaScript exception &quot;missing } after property list&quot; occurs when there is a mistake in the object initializer syntax somewhere. Might be in fact a missing curly bracket, but could also be a missing comma.">SyntaxError: missing } after property list</a></li>
<li><a href="Reference/Errors/Redeclared_parameter.html" title="The JavaScript exception &quot;redeclaration of formal parameter&quot; occurs when the same variable name occurs as a function parameter and is then redeclared using a let assignment in a function body again.">SyntaxError: redeclaration of formal parameter "x"</a></li>
<li><a href="Reference/Errors/Bad_return_or_yield.html" title="The JavaScript exception &quot;return (or yield) not in function&quot; occurs when a return or yield statement is called outside of a function.">SyntaxError: return not in function</a></li>
<li><a href="Reference/Errors/Equal_as_assign.html" title="The JavaScript warning &quot;test for equality (==) mistyped as assignment (=)?&quot; occurs when there was an assignment (=) when you would normally expect a test for equality (==).">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li>
<li><a href="Reference/Errors/Unterminated_string_literal.html" title="The JavaScript error &quot;unterminated string literal&quot; occurs when there is an unterminated String somewhere. String literals must be enclosed by single (&#39;) or double (&quot;) quotes.">SyntaxError: unterminated string literal</a></li>
<li><a href="Reference/Errors/No_properties.html" title="The JavaScript exception &quot;null (or undefined) has no properties&quot; occurs when you attempt to access properties of null and undefined. They don&#39;t have any.">TypeError: "x" has no properties</a></li>
<li><a href="Reference/Errors/Unexpected_type.html" title="The JavaScript exception &quot;x is (not) y&quot; occurs when there was an unexpected type. Oftentimes, unexpected undefined or null values.">TypeError: "x" is (not) "y"</a></li>
<li><a href="Reference/Errors/Not_a_constructor.html" title="The JavaScript exception &quot;is not a constructor&quot; occurs when there was an attempt to use an object or a variable as a constructor, but that object or variable is not a constructor.">TypeError: "x" is not a constructor</a></li>
<li><a href="Reference/Errors/Not_a_function.html" title="The JavaScript exception &quot;is not a function&quot; occurs when there was an attempt to call a value from a function, but the value is not actually a function.">TypeError: "x" is not a function</a></li>
<li><a href="Reference/Errors/No_non-null_object.html" title="The JavaScript exception &quot;is not a non-null object&quot; occurs when an object is expected somewhere and wasn&#39;t provided. null is not an object and won&#39;t work.">TypeError: "x" is not a non-null object</a></li>
<li><a href="Reference/Errors/Read-only.html" title="The JavaScript strict mode-only exception &quot;is read-only&quot; occurs when a global variable or object property that was assigned to is a read-only property.">TypeError: "x" is read-only</a></li>
<li><a href="Reference/Errors/is_not_iterable.html" title="The JavaScript exception &quot;is not iterable&quot; occurs when the value which is given as the right hand-side of for…of or as argument of a function such as Promise.all or TypedArray.from, is not an iterable object.">TypeError: 'x' is not iterable</a></li>
<li><a href="Reference/Errors/More_arguments_needed.html" title="The JavaScript exception &quot;more arguments needed&quot; occurs when there is an error with how a function is called. More arguments need to be provided.">TypeError: More arguments needed</a></li>
<li><a href="Reference/Errors/Reduce_of_empty_array_with_no_initial_value.html" title="The JavaScript exception &quot;reduce of empty array with no initial value&quot; occurs when a reduce function is used.">TypeError: Reduce of empty array with no initial value</a></li>
<li><a href="Reference/Errors/Called_on_incompatible_type.html" title="The JavaScript exception &quot;called on incompatible target (or object)&quot; occurs when a function (on a given object), is called with a this not corresponding to the type expected by the function.">TypeError: X.prototype.y called on incompatible type</a></li>
<li><a href="Reference/Errors/Dead_object.html" title="The JavaScript exception &quot;can&#39;t access dead object&quot; occurs when Firefox disallows add-ons to keep strong references to DOM objects after their parent document has been destroyed to improve in memory usage and to prevent memory leaks.">TypeError: can't access dead object</a></li>
<li><a href="Reference/Errors/Cant_access_property.html" title="The JavaScript exception &quot;can&#39;t access property&quot; occurs when property access was operated on undefined or null values.">TypeError: can't access property "x" of "y"</a></li>
<li><a href="Reference/Errors/Cant_assign_to_property.html" title="The JavaScript strict mode exception &quot;can&#39;t assign to property&quot; occurs when attempting to create a property on primitive value such as a symbol, a string, a number or a boolean. Primitive values cannot hold any property.">TypeError: can't assign to property "x" on "y": not an object</a></li>
<li><a href="Reference/Errors/Cant_define_property_object_not_extensible.html" title="The JavaScript exception &quot;can&#39;t define property &quot;x&quot;: &quot;obj&quot; is not extensible&quot; occurs when Object.preventExtensions() marked an object as no longer extensible, so that it will never have properties beyond the ones it had at the time it was marked as non-extensible.">TypeError: can't define property "x": "obj" is not extensible</a></li>
<li><a href="Reference/Errors/Non_configurable_array_element.html" title="The JavaScript exception &quot;can&#39;t delete non-configurable array element&quot; occurs when it was attempted to shorten the length of an array, but one of the array&#39;s elements is non-configurable.">TypeError: can't delete non-configurable array element</a></li>
<li><a href="Reference/Errors/Cant_redefine_property.html" title="The JavaScript exception &quot;can&#39;t redefine non-configurable property&quot; occurs when it was attempted to redefine a property, but that property is non-configurable.">TypeError: can't redefine non-configurable property "x"</a></li>
<li><a href="Reference/Errors/in_operator_no_object.html" title="The JavaScript exception &quot;right-hand side of &#39;in&#39; should be an object&quot; occurs when the in operator was used to search in strings, or in numbers, or other primitive types. It can only be used to check if a property is in an object.">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li>
<li><a href="Reference/Errors/Cyclic_object_value.html" title="The JavaScript exception &quot;cyclic object value&quot; occurs when object references were found in JSON. JSON.stringify() doesn&#39;t try to solve them and fails accordingly.">TypeError: cyclic object value</a></li>
<li><a href="Reference/Errors/invalid_right_hand_side_instanceof_operand.html" title="The JavaScript exception &quot;invalid &#39;instanceof&#39; operand&quot; occurs when the right hand side operands of the instanceof operator isn&#39;t used with a constructor object, i.e. an object which has a prototype property and is callable.">TypeError: invalid 'instanceof' operand 'x'</a></li>
<li><a href="Reference/Errors/Array_sort_argument.html" title="The JavaScript exception &quot;invalid Array.prototype.sort argument&quot; occurs when the argument of Array.prototype.sort() isn&#39;t either undefined or a function which compares its operands.">TypeError: invalid Array.prototype.sort argument</a></li>
<li><a href="Reference/Errors/Typed_array_invalid_arguments.html" title="The JavaScript exception &quot;invalid arguments&quot; occurs when typed array constructors are provided with a wrong argument.">TypeError: invalid arguments</a></li>
<li><a href="Reference/Errors/Invalid_const_assignment.html" title="The JavaScript exception &quot;invalid assignment to const&quot; occurs when it was attempted to alter a constant value. JavaScript const declarations can&#39;t be re-assigned or redeclared.">TypeError: invalid assignment to const "x"</a></li>
<li><a href="Reference/Errors/Cant_delete.html" title="The JavaScript exception &quot;property is non-configurable and can&#39;t be deleted&quot; occurs when it was attempted to delete a property, but that property is non-configurable.">TypeError: property "x" is non-configurable and can't be deleted</a></li>
<li><a href="Reference/Errors/Getter_only.html" title="The JavaScript strict mode-only exception &quot;setting getter-only property&quot; occurs when there is an attempt to set a new value to a property for which only a getter is specified.">TypeError: setting getter-only property "x"</a></li>
<li><a href="Reference/Errors/Var_hides_argument.html" title="The JavaScript strict mode-only exception &quot;variable redeclares argument&quot; occurs when the same variable name occurs as a function parameter and is then redeclared using a var assignment in a function body again.">TypeError: variable "x" redeclares argument</a></li>
<li><a href="Reference/Errors/Malformed_URI.html" title="The JavaScript exception &quot;malformed URI sequence&quot; occurs when URI encoding or decoding wasn&#39;t successful.">URIError: malformed URI sequence</a></li>
<li><a href="Reference/Errors/Already_has_pragma.html" title="The JavaScript warning &quot;-file- is being assigned a //# sourceMappingURL, but already has one.&quot; occurs when a source map has been specified more than once for a given JavaScript source.">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li>
<li><a href="Reference/Errors/Bad_octal.html" title="The JavaScript warning &quot;08 (or 09) is not a legal ECMA-262 octal constant&quot; occurs when 08 or 09 number literals are used. They can&#39;t be interpreted as an octal number.">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li>
<li><a href="Reference/Errors/Deprecated_toLocaleFormat.html" title="The JavaScript warning &quot;Date.prototype.toLocaleFormat is deprecated; consider using Intl.DateTimeFormat instead&quot; occurs when the non-standard Date.prototype.toLocaleFormat method is used.">Warning: Date.prototype.toLocaleFormat is deprecated</a></li>
<li><a href="Reference/Errors/For-each-in_loops_are_deprecated.html" title="The JavaScript warning &quot;JavaScript 1.6&#39;s for-each-in loops are deprecated; consider using ES6 for-of instead&quot; occurs when a for each (variable in obj) statement is used.">Warning: JavaScript 1.6's for-each-in loops are deprecated</a></li>
<li><a href="Reference/Errors/Deprecated_String_generics.html" title="The JavaScript warning about string generics occurs in Firefox versions prior to 68. String generics have been removed starting with Firefox 68.">Warning: String.x is deprecated; use String.prototype.x instead</a></li>
<li><a href="Reference/Errors/Deprecated_expression_closures.html" title="The JavaScript warning &quot;expression closures are deprecated&quot; occurs when the non-standard expression closure syntax (shorthand function syntax) is used.">Warning: expression closures are deprecated</a></li>
<li><a href="Reference/Errors/Stmt_after_return.html" title="The JavaScript warning &quot;unreachable code after return statement&quot; occurs when using an expression after a return statement, or when using a semicolon-less return statement but including an expression directly after.">Warning: unreachable code after return statement</a></li>
</ol></li>
<li>Misc
<ol>
<li><a href="JavaScript_technologies_overview.html">JavaScript technologies overview</a></li>
<li><a href="Reference/Lexical_grammar.html">Lexical grammar</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Enumerability_and_ownership_of_properties.html">Enumerability and ownership of properties</a></li>
<li><a href="Reference/Iteration_protocols.html">Iteration protocols</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Reference/Strict_mode/Transitioning_to_strict_mode.html">Transitioning to strict mode</a></li>
<li><a href="Reference/Template_literals.html">Template literals</a></li>
<li><a href="Reference/Deprecated_and_obsolete_features.html">Deprecated features</a></li>
</ol></li>
</ol>
</div>
</div>
</div>
<section class="newsletter-container">
<div id="newsletter-form-container" class="newsletter">
<section class="newsletter-head">
<h2 id="learn-the-best-of-web-development-4" class="newsletter-teaser">Learn the best of web development</h2>
<p>Get the latest and greatest from MDN delivered straight to your inbox.</p>
<p>The newsletter is offered in English only at the moment.</p>
</section>
<div class="form-group newsletter-group-email">
E-mail
</div>
<div id="newsletter-privacy" class="form-group form-group-agree newsletter-group-privacy" data-aria-hidden="false">
I’m okay with Mozilla handling my info as explained in this <a href="../../../../../external.html?link=https://www.mozilla.org/privacy/">Privacy Policy</a>.
</div>
<div class="newsletter-group-submit">
Sign up now
</div>
<span>Hide Newsletter Sign-up</span>
</div>
</section>
<div class="content-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/" class="nav-footer-logo">MDN Web Docs</a>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Web Technologies</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn Web Development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/About">About MDN</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Feedback</a></li>
</ul>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/">About</a></li>
<li><a href="../../../../../external.html?link=https://shop.spreadshirt.com/mdn-store/">MDN Web Docs Store</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/contact/">Contact Us</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/firefox/?utm_source=developer.mozilla.org&amp;utm_campaign=footer&amp;utm_medium=referral">Firefox</a></li>
</ul>
<div class="social social-mdn">
<h4 id="mdn-4">MDN</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<div class="social social-moz">
<h4 id="mozilla-4">Mozilla</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<p>© 2005-2020 Mozilla and individual contributors. Content is available under <a href="../../../../../external.html?link=https://developer.mozilla.org/docs/MDN/About#Copyrights_and_licenses">these licenses</a>.</p>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/legal/terms/mozilla">Terms</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/">Privacy</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/#cookies">Cookies</a></li>
</ul>
</div>
<div id="auth-modal" class="modal hidden">
<section class="auth-providers" tabindex="-1" data-role="dialog" data-aria-modal="true" data-aria-labelledby="modal-main-heading">
<h2 id="modal-main-heading">Sign In</h2>
<p>Sign in to enjoy the benefits of an MDN account. If you haven’t already created an account, you will be prompted to do so after signing in.</p>
<div class="auth-button-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/users/github/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FEquality_comparisons_and_sameness" class="github-auth">Sign in with Github</a> <a href="../../../../../external.html?link=https://developer.mozilla.org/users/google/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FEquality_comparisons_and_sameness" class="google-auth">Sign in with Google</a>
</div>
<span>Close modal</span>
</section>
</div>
<div id="react-container" data-component-name="SPA">
<div class="loading-bar">

</div>
<ul>
<li><a href="#content" id="skip-main">Skip to main content</a></li>
<li><a href="#language" id="skip-language">Select language</a></li>
<li><a href="#main-q" id="skip-search">Skip to search</a></li>
</ul>
<ul>
<li>Technologies
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Technologies Overview</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide/Graphics">Graphics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API">APIs / DOM</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions">Browser Extensions</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/MathML">MathML</a></li>
</ul></li>
<li>References &amp; Guides
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn web development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Tutorials">Tutorials</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Reference">References</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide">Developer Guides</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Accessibility">Accessibility</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Games">Game development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">...more docs</a></li>
</ul></li>
<li>Feedback
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Send Feedback</a></li>
<li><a href="../../../../../external.html?link=https://support.mozilla.org/">Get Firefox help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://stackoverflow.com/">Get web development help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Community">Join the MDN community</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/sprints/issues/new?template=issue-template.md&amp;projects=mdn/sprints/2&amp;labels=user-report&amp;title=/en-US/docs/Web/JavaScript/EventLoop">Report a content problem 🌐</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/kuma/issues/new/choose">Report an issue 🌐</a></li>
</ul></li>
</ul>
<div class="header-search">
Search MDN
<span>Open search</span>
</div>
<div data-role="main">
<div class="titlebar-container">
<div class="titlebar">

</div>
</div>
<div class="full-width-row-container">
<div class="max-content-width-container">
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web" class="breadcrumb-chevron"><span class="pre-text">See </span><span data-property="name">Web technology for developers</span></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript" class="breadcrumb-previous"><span class="pre-text">See </span><span data-property="name">JavaScript</span></a></li>
<li><a href="EventLoop.html" class="crumb-current-page"><span data-property="name" data-aria-current="page">Concurrency model and the event loop</span></a></li>
</ol>
<div class="dropdown-container language-menu">
English<span class="dropdown-arrow-down" data-aria-hidden="true">▼</span>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ca/docs/Web/JavaScript/EventLoop" title="Catalan">Català</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/de/docs/Web/JavaScript/EventLoop" title="German">Deutsch</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/es/docs/Web/JavaScript/EventLoop" title="Spanish">Español</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/fr/docs/Web/JavaScript/Concurrence_et_boucle_des_événements" title="French">Français</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/it/docs/Web/JavaScript/EventLoop" title="Italian">Italiano</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ja/docs/Web/JavaScript/EventLoop" title="Japanese">日本語</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ko/docs/Web/JavaScript/EventLoop" title="Korean">한국어</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pl/docs/Web/JavaScript/EventLoop" title="Polish">Polski</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/EventLoop" title="Portuguese (Brazilian)">Português (do Brasil)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ru/docs/Web/JavaScript/EventLoop" title="Russian">Русский</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/uk/docs/Web/JavaScript/EventLoop" title="Ukrainian">Українська</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop" title="Chinese (Simplified)">中文 (简体)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/EventLoop" title="Chinese (Traditional)">正體中文 (繁體)</a></li>
<li><a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop$locales" id="translations-add">Add a translation</a></li>
</ul>
</div>
</div>
</div>
<div class="wiki-left-present content-layout">
<section class="document-toc">
<h2 id="on-this-page">On this Page</h2>
Jump to section
<ul>
<li><a href="#Runtime_concepts">Runtime concepts</a></li>
<li><a href="#Event_loop">Event loop</a></li>
<li><a href="#Never_blocking">Never blocking</a></li>
<li><a href="#Specifications">Specifications</a></li>
<li><a href="#sidebar-quicklinks">Related topics</a></li>
</ul>
</section>
<div id="content" class="article text-content">
<div>

</div>
<p><span class="seoSummary">JavaScript has a concurrency model based on an <strong>event loop</strong>, which is responsible for executing the code, collecting and processing events, and executing queued sub-tasks.</span> This model is quite different from models in other languages like C and Java.</p>
<h2 id="Runtime_concepts">Runtime concepts</h2>
<p>The following sections explain a theoretical model. Modern JavaScript engines implement and heavily optimize the described semantics.</p>
<h3 id="Visual_representation">Visual representation</h3>
<p><embed src="../../../../../external.html?link=https://mdn.mozillademos.org/files/17124/The_Javascript_Runtime_Environment_Example.svg" /></p>
<h3 id="Stack">Stack</h3>
<p>Function calls form a stack of <em>frames</em>.</p>
<div class="sourceCode" id="cb110"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb110-1" title="1"><span class="kw">function</span> <span class="at">foo</span>(b) <span class="op">{</span></a>
<a class="sourceLine" id="cb110-2" title="2">  <span class="kw">let</span> a <span class="op">=</span> <span class="dv">10</span></a>
<a class="sourceLine" id="cb110-3" title="3">  <span class="cf">return</span> a <span class="op">+</span> b <span class="op">+</span> <span class="dv">11</span></a>
<a class="sourceLine" id="cb110-4" title="4"><span class="op">}</span></a>
<a class="sourceLine" id="cb110-5" title="5"></a>
<a class="sourceLine" id="cb110-6" title="6"><span class="kw">function</span> <span class="at">bar</span>(x) <span class="op">{</span></a>
<a class="sourceLine" id="cb110-7" title="7">  <span class="kw">let</span> y <span class="op">=</span> <span class="dv">3</span></a>
<a class="sourceLine" id="cb110-8" title="8">  <span class="cf">return</span> <span class="at">foo</span>(x <span class="op">*</span> y)</a>
<a class="sourceLine" id="cb110-9" title="9"><span class="op">}</span></a>
<a class="sourceLine" id="cb110-10" title="10"></a>
<a class="sourceLine" id="cb110-11" title="11"><span class="va">console</span>.<span class="at">log</span>(<span class="at">bar</span>(<span class="dv">7</span>)) <span class="co">//returns 42</span></a></code></pre></div>
<p>When calling <code>bar</code>, a first frame is created containing <code>bar</code>'s arguments and local variables. When <code>bar</code> calls <code>foo</code>, a second frame is created and pushed on top of the first one containing <code>foo</code>'s arguments and local variables. When <code>foo</code> returns, the top frame element is popped out of the stack (leaving only <code>bar</code>'s call frame). When <code>bar</code> returns, the stack is empty.</p>
<h3 id="Heap">Heap</h3>
<p>Objects are allocated in a heap which is just a name to denote a large (mostly unstructured) region of memory.</p>
<h3 id="Queue">Queue</h3>
<p>A JavaScript runtime uses a message queue, which is a list of messages to be processed. Each message has an associated function which gets called in order to handle the message.</p>
<p>At some point during the <a href="#Event_loop">event loop</a>, the runtime starts handling the messages on the queue, starting with the oldest one. To do so, the message is removed from the queue and its corresponding function is called with the message as an input parameter. As always, calling a function creates a new stack frame for that function's use.</p>
<p>The processing of functions continues until the stack is once again empty. Then, the event loop will process the next message in the queue (if there is one).</p>
<h2 id="Event_loop">Event loop</h2>
<p>The <strong>event loop</strong> got its name because of how it's usually implemented, which usually resembles:</p>
<div class="sourceCode" id="cb111"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb111-1" title="1"><span class="cf">while</span> (<span class="va">queue</span>.<span class="at">waitForMessage</span>()) <span class="op">{</span></a>
<a class="sourceLine" id="cb111-2" title="2">  <span class="va">queue</span>.<span class="at">processNextMessage</span>()</a>
<a class="sourceLine" id="cb111-3" title="3"><span class="op">}</span></a></code></pre></div>
<p><code>queue.waitForMessage()</code> waits synchronously for a message to arrive (if one is not already available and waiting to be handled).</p>
<h3 id="Run-to-completion">"Run-to-completion"</h3>
<p>Each message is processed completely before any other message is processed.</p>
<p>This offers some nice properties when reasoning about your program, including the fact that whenever a function runs, it cannot be pre-empted and will run entirely before any other code runs (and can modify data the function manipulates). This differs from C, for instance, where if a function runs in a thread, it may be stopped at any point by the runtime system to run some other code in another thread.</p>
<p>A downside of this model is that if a message takes too long to complete, the web application is unable to process user interactions like click or scroll. The browser mitigates this with the "a script is taking too long to run" dialog. A good practice to follow is to make message processing short and if possible cut down one message into several messages.</p>
<h3 id="Adding_messages">Adding messages</h3>
<p>In web browsers, messages are added anytime an event occurs and there is an event listener attached to it. If there is no listener, the event is lost. So a click on an element with a click event handler will add a message—likewise with any other event.</p>
<p>The function <code>setTimeout</code> is called with 2 arguments: a message to add to the queue, and a time value (optional; defaults to <code>0</code>). The <em>time value</em> represents the (minimum) delay after which the message will actually be pushed into the queue. If there is no other message in the queue, and the stack is empty, the message is processed right after the delay. However, if there are messages, the <code>setTimeout</code> message will have to wait for other messages to be processed. For this reason, the second argument indicates a <em>minimum</em> time—not a <em>guaranteed</em> time.<br />
<br />
Here is an example that demonstrates this concept (<code>setTimeout</code> does not run immediately after its timer expires):</p>
<div class="sourceCode" id="cb112"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb112-1" title="1"><span class="kw">const</span> s <span class="op">=</span> <span class="kw">new</span> <span class="at">Date</span>().<span class="at">getSeconds</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb112-2" title="2"></a>
<a class="sourceLine" id="cb112-3" title="3"><span class="at">setTimeout</span>(<span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb112-4" title="4">  <span class="co">// prints out &quot;2&quot;, meaning that the callback is not called immediately after 500 milliseconds.</span></a>
<a class="sourceLine" id="cb112-5" title="5">  <span class="va">console</span>.<span class="at">log</span>(<span class="st">&quot;Ran after &quot;</span> <span class="op">+</span> (<span class="kw">new</span> <span class="at">Date</span>().<span class="at">getSeconds</span>() <span class="op">-</span> s) <span class="op">+</span> <span class="st">&quot; seconds&quot;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb112-6" title="6"><span class="op">},</span> <span class="dv">500</span>)</a>
<a class="sourceLine" id="cb112-7" title="7"></a>
<a class="sourceLine" id="cb112-8" title="8"><span class="cf">while</span> (<span class="kw">true</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb112-9" title="9">  <span class="cf">if</span> (<span class="kw">new</span> <span class="at">Date</span>().<span class="at">getSeconds</span>() <span class="op">-</span> s <span class="op">&gt;=</span> <span class="dv">2</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb112-10" title="10">    <span class="va">console</span>.<span class="at">log</span>(<span class="st">&quot;Good, looped for 2 seconds&quot;</span>)</a>
<a class="sourceLine" id="cb112-11" title="11">    <span class="cf">break</span><span class="op">;</span></a>
<a class="sourceLine" id="cb112-12" title="12">  <span class="op">}</span></a>
<a class="sourceLine" id="cb112-13" title="13"><span class="op">}</span></a></code></pre></div>
<h3 id="Zero_delays">Zero delays</h3>
<p>Zero delay doesn't actually mean the call back will fire-off after zero milliseconds. Calling <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout" title="The documentation about this has not yet been written; please consider contributing!"><code>setTimeout</code></a> with a delay of <code>0</code> (zero) milliseconds doesn't execute the callback function after the given interval.</p>
<p>The execution depends on the number of waiting tasks in the queue. In the example below, the message <code>''this is just a message''</code> will be written to the console before the message in the callback gets processed, because the delay is the <em>minimum</em> time required for the runtime to process the request (not a <em>guaranteed</em> time).</p>
<p>Basically, the <code>setTimeout</code> needs to wait for all the code for queued messages to complete even though you specified a particular time limit for your <code>setTimeout</code>.</p>
<div class="sourceCode" id="cb113"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb113-1" title="1">(<span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb113-2" title="2"></a>
<a class="sourceLine" id="cb113-3" title="3">  <span class="va">console</span>.<span class="at">log</span>(<span class="st">&#39;this is the start&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb113-4" title="4"></a>
<a class="sourceLine" id="cb113-5" title="5">  <span class="at">setTimeout</span>(<span class="kw">function</span> <span class="at">cb</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb113-6" title="6">    <span class="va">console</span>.<span class="at">log</span>(<span class="st">&#39;Callback 1: this is a msg from call back&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb113-7" title="7">  <span class="op">}</span>)<span class="op">;</span> <span class="co">// has a default time value of 0</span></a>
<a class="sourceLine" id="cb113-8" title="8"></a>
<a class="sourceLine" id="cb113-9" title="9">  <span class="va">console</span>.<span class="at">log</span>(<span class="st">&#39;this is just a message&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb113-10" title="10"></a>
<a class="sourceLine" id="cb113-11" title="11">  <span class="at">setTimeout</span>(<span class="kw">function</span> <span class="at">cb1</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb113-12" title="12">    <span class="va">console</span>.<span class="at">log</span>(<span class="st">&#39;Callback 2: this is a msg from call back&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb113-13" title="13">  <span class="op">},</span> <span class="dv">0</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb113-14" title="14"></a>
<a class="sourceLine" id="cb113-15" title="15">  <span class="va">console</span>.<span class="at">log</span>(<span class="st">&#39;this is the end&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb113-16" title="16"></a>
<a class="sourceLine" id="cb113-17" title="17"><span class="op">}</span>)()<span class="op">;</span></a>
<a class="sourceLine" id="cb113-18" title="18"></a>
<a class="sourceLine" id="cb113-19" title="19"><span class="co">// &quot;this is the start&quot;</span></a>
<a class="sourceLine" id="cb113-20" title="20"><span class="co">// &quot;this is just a message&quot;</span></a>
<a class="sourceLine" id="cb113-21" title="21"><span class="co">// &quot;this is the end&quot;</span></a>
<a class="sourceLine" id="cb113-22" title="22"><span class="co">// &quot;Callback 1: this is a msg from call back&quot;</span></a>
<a class="sourceLine" id="cb113-23" title="23"><span class="co">// &quot;Callback 2: this is a msg from call back&quot;</span></a></code></pre></div>
<h3 id="Several_runtimes_communicating_together">Several runtimes communicating together</h3>
<p>A web worker or a cross-origin <code>iframe</code> has its own stack, heap, and message queue. Two distinct runtimes can only communicate through sending messages via the <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/DOM/window.postMessage"><code>postMessage</code></a> method. This method adds a message to the other runtime if the latter listens to <code>message</code> events.</p>
<h2 id="Never_blocking">Never blocking</h2>
<p>A very interesting property of the event loop model is that JavaScript, unlike a lot of other languages, never blocks. Handling I/O is typically performed via events and callbacks, so when the application is waiting for an <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API">IndexedDB</a> query to return or an <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XHR</a> request to return, it can still process other things like user input.</p>
<p>Legacy exceptions exist like <code>alert</code> or synchronous XHR, but it is considered a good practice to avoid them. Beware: <a href="../../../../../external.html?link=http://stackoverflow.com/questions/2734025/is-javascript-guaranteed-to-be-single-threaded/2734311#2734311" class="external">exceptions to the exception do exist</a> (but are usually implementation bugs, rather than anything else).</p>
<h2 id="Specifications">Specifications</h2>
<table>
<thead>
<tr class="header">
<th>Specification</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="../../../../../external.html?link=https://html.spec.whatwg.org/multipage/webappapis.html#event-loops" class="external">HTML Living Standard<br />
<span class="small">The definition of 'Event loops' in that specification.</span></a></td>
</tr>
<tr class="even">
<td><a href="../../../../../external.html?link=https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#what-is-the-event-loop" class="external">Node.js Event Loop</a></td>
</tr>
</tbody>
</table>
<div class="metadata">
<section class="document-meta">
<h4 id="metadata-5">Metadata</h4>
<ul>
<li><strong>Last modified:</strong> Mar 4, 2020, <a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop$history">by MDN contributors</a></li>
</ul>
</section>
</div>
</div>
<div id="sidebar-quicklinks" class="sidebar">
<div class="quick-links">
<div class="quick-links-head sidebar-heading">
Related Topics
</div>
<div>
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong><em>JavaScript</em></strong></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong>Tutorials:</strong></a></li>
<li>Complete beginners
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics">JavaScript basics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps">JavaScript first steps</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks">JavaScript building blocks</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Introducing JavaScript objects</a></li>
</ol></li>
<li>JavaScript Guide
<ol>
<li><a href="Guide/Introduction.html">Introduction</a></li>
<li><a href="Guide/Grammar_and_Types.html">Grammar and types</a></li>
<li><a href="Guide/Control_flow_and_error_handling.html">Control flow and error handling</a></li>
<li><a href="Guide/Loops_and_iteration.html">Loops and iteration</a></li>
<li><a href="Guide/Functions.html">Functions</a></li>
<li><a href="Guide/Expressions_and_Operators.html">Expressions and operators</a></li>
<li><a href="Guide/Numbers_and_dates.html">Numbers and dates</a></li>
<li><a href="Guide/Text_formatting.html">Text formatting</a></li>
<li><a href="Guide/Regular_Expressions.html">Regular expressions</a></li>
<li><a href="Guide/Indexed_collections.html">Indexed collections</a></li>
<li><a href="Guide/Keyed_collections.html">Keyed collections</a></li>
<li><a href="Guide/Working_with_Objects.html">Working with objects</a></li>
<li><a href="Guide/Details_of_the_Object_Model.html">Details of the object model</a></li>
<li><a href="Guide/Using_promises.html">Using promises</a></li>
<li><a href="Guide/Iterators_and_generators.html">Iterators and generators</a></li>
<li><a href="Guide/Meta_programming.html">Meta programming</a></li>
<li><a href="Guide/Modules.html">JavaScript modules</a></li>
</ol></li>
<li>Intermediate
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Introducing JavaScript objects</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs">Client-side web APIs</a></li>
<li><a href="A_re-introduction_to_JavaScript.html">A re-introduction to JavaScript</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Equality_comparisons_and_sameness.html">Equality comparisons and sameness</a></li>
<li><a href="Closures.html">Closures</a></li>
</ol></li>
<li>Advanced
<ol>
<li><a href="Inheritance_and_the_prototype_chain.html">Inheritance and the prototype chain</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Typed_arrays.html">JavaScript typed arrays</a></li>
<li><a href="Memory_Management.html">Memory Management</a></li>
<li><a href="EventLoop.html">Concurrency model and Event Loop</a></li>
</ol></li>
<li><strong><a href="Reference.html">References:</a></strong></li>
<li>Built-in objects
<ol>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/AggregateError.html" title="The AggregateError object represents an error when several errors need to be wrapped in a single error.">AggregateError</a></li>
<li><a href="Reference/Global_Objects/Array.html" title="The JavaScript Array class is a global object that is used in the construction of arrays; which are high-level, list-like objects.">Array</a></li>
<li><a href="Reference/Global_Objects/ArrayBuffer.html" title="The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer.">ArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/AsyncFunction.html" title="The AsyncFunction constructor creates a new async function object. In JavaScript, every asynchronous function is actually an AsyncFunction object.">AsyncFunction</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/AsyncIterator.html" title="The AsyncIterator global object is an abstract class providing helper methods, similar to the ones exposed on Array instances.">AsyncIterator</a></li>
<li><a href="Reference/Global_Objects/Atomics.html" title="The Atomics object provides atomic operations as static methods. They are used with SharedArrayBuffer objects.">Atomics</a></li>
<li><a href="Reference/Global_Objects/BigInt.html" title="BigInt is a built-in object that provides a way to represent whole numbers larger than 253 - 1, which is the largest number JavaScript can reliably represent with the Number primitive and represented by the Number.MAX_SAFE_INTEGER constant. BigInt can be used for arbitrarily large integers.">BigInt</a></li>
<li><a href="Reference/Global_Objects/BigInt64Array.html" title="The BigInt64Array typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigInt64Array</a></li>
<li><a href="Reference/Global_Objects/BigUint64Array.html" title="The BigUint64Array typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigUint64Array</a></li>
<li><a href="Reference/Global_Objects/Boolean.html" title="The Boolean object is an object wrapper for a boolean value.">Boolean</a></li>
<li><a href="Reference/Global_Objects/DataView.html" title="The DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform&#39;s endianness.">DataView</a></li>
<li><a href="Reference/Global_Objects/Date.html" title="JavaScript Date objects represent a single moment in time in a platform-independent format.">Date</a></li>
<li><a href="Reference/Global_Objects/Error.html" title="Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.">Error</a></li>
<li><a href="Reference/Global_Objects/EvalError.html" title="The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.">EvalError</a></li>
<li><a href="Reference/Global_Objects/Float32Array.html" title="The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float32Array</a></li>
<li><a href="Reference/Global_Objects/Float64Array.html" title="The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float64Array</a></li>
<li><a href="Reference/Global_Objects/Function.html" title="Every JavaScript function is actually a Function object. This can be seen with the code (function(){}).constructor === Function which returns true.">Function</a></li>
<li><a href="Reference/Global_Objects/Generator.html" title="The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.">Generator</a></li>
<li><a href="Reference/Global_Objects/GeneratorFunction.html" title="The GeneratorFunction constructor creates a new generator function object. In JavaScript every generator function is actually a GeneratorFunction object.">GeneratorFunction</a></li>
<li><a href="Reference/Global_Objects/Infinity.html" title="The global property Infinity is a numeric value representing infinity.">Infinity</a></li>
<li><a href="Reference/Global_Objects/Int16Array.html" title="The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int16Array</a></li>
<li><a href="Reference/Global_Objects/Int32Array.html" title="The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int32Array</a></li>
<li><a href="Reference/Global_Objects/Int8Array.html" title="The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int8Array</a></li>
<li><a href="Reference/Global_Objects/InternalError.html" title="The InternalError object indicates an error that occurred internally in the JavaScript engine.">InternalError</a></li>
<li><a href="Reference/Global_Objects/Intl.html" title="The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The Intl object provides access to several constructors as well as functionality common to the internationalization constructors and other language sensitive functions.">Intl</a></li>
<li><a href="Reference/Global_Objects/Intl/Collator.html" title="The Intl.Collator objects enable language sensitive string comparison.">Intl.Collator</a></li>
<li><a href="Reference/Global_Objects/Intl/DateTimeFormat.html" title="The Intl.DateTimeFormat object is a constructor for objects that enable language-sensitive date and time formatting.">Intl.DateTimeFormat</a></li>
<li><a href="Reference/Global_Objects/Intl/DisplayNames.html" title="The Intl.DisplayNames object is a constructor for objects that enables the consistent translation of language, region and script display names.">Intl.DisplayNames</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/Intl/ListFormat.html" title="The Intl.ListFormat object is a constructor for objects that enable language-sensitive list formatting.">Intl.ListFormat</a></li>
<li><a href="Reference/Global_Objects/Intl/Locale.html" title="The Intl.Locale object is a standard built-in property of the Intl object that represents a Unicode locale identifier.">Intl.Locale</a></li>
<li><a href="Reference/Global_Objects/Intl/NumberFormat.html" title="The Intl.NumberFormat object is a constructor for objects that enable language sensitive number formatting.">Intl.NumberFormat</a></li>
<li><a href="Reference/Global_Objects/Intl/PluralRules.html" title="The Intl.PluralRules object enables plural-sensitive formatting and plural-related language rules.">Intl.PluralRules</a></li>
<li><a href="Reference/Global_Objects/Intl/RelativeTimeFormat.html" title="The Intl.RelativeTimeFormat object enables language-sensitive relative time formatting.">Intl.RelativeTimeFormat</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/Iterator.html" title="The Iterator global object is an abstract class providing helper methods, similar to the ones exposed on Array instances.">Iterator</a></li>
<li><a href="Reference/Global_Objects/JSON.html" title="The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can&#39;t be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.">JSON</a></li>
<li><a href="Reference/Global_Objects/Map.html" title="The Map object holds key-value pairs and remembers the original insertion order of the keys.">Map</a></li>
<li><a href="Reference/Global_Objects/Math.html" title="Math is a built-in object that has properties and methods for mathematical constants and functions. Not a function object.">Math</a></li>
<li><a href="Reference/Global_Objects/NaN.html" title="The global NaN property is a value representing Not-A-Number.">NaN</a></li>
<li><a href="Reference/Global_Objects/Number.html" title="The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor. A primitive type object number is created using the Number() function.">Number</a></li>
<li><a href="Reference/Global_Objects/Object.html" title="The Object class represents one of JavaScript&#39;s data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.">Object</a></li>
<li><a href="Reference/Global_Objects/Promise.html" title="The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.">Promise</a></li>
<li><a href="Reference/Global_Objects/Proxy.html" title="The Proxy object is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc).">Proxy</a></li>
<li><a href="Reference/Global_Objects/RangeError.html" title="The RangeError object indicates an error when a value is not in the set or range of allowed values.">RangeError</a></li>
<li><a href="Reference/Global_Objects/ReferenceError.html" title="The ReferenceError object represents an error when a non-existent variable is referenced.">ReferenceError</a></li>
<li><a href="Reference/Global_Objects/Reflect.html" title="Reflect is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of proxy handlers. Reflect is not a function object, so it&#39;s not constructible.">Reflect</a></li>
<li><a href="Reference/Global_Objects/RegExp.html" title="The RegExp object is used for matching text with a pattern.">RegExp</a></li>
<li><a href="Reference/Global_Objects/Set.html" title="The Set object lets you store unique values of any type, whether primitive values or object references.">Set</a></li>
<li><a href="Reference/Global_Objects/SharedArrayBuffer.html" title="The SharedArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. Unlike an ArrayBuffer, a SharedArrayBuffer cannot become detached.">SharedArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/String.html" title="The String global object is a constructor for strings or a sequence of characters.">String</a></li>
<li><a href="Reference/Global_Objects/Symbol.html" title="The data type symbol is a primitive data type. The Symbol() function returns a value of type symbol, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class, but is incomplete as a constructor because it does not support the syntax &quot;new Symbol()&quot;.">Symbol</a></li>
<li><a href="Reference/Global_Objects/SyntaxError.html" title="The SyntaxError object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.">SyntaxError</a></li>
<li><a href="Reference/Global_Objects/TypeError.html" title="The TypeError object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.">TypeError</a></li>
<li><a href="Reference/Global_Objects/TypedArray.html" title="A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.">TypedArray</a></li>
<li><a href="Reference/Global_Objects/URIError.html" title="The URIError object represents an error when a global URI handling function was used in a wrong way.">URIError</a></li>
<li><a href="Reference/Global_Objects/Uint16Array.html" title="The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint16Array</a></li>
<li><a href="Reference/Global_Objects/Uint32Array.html" title="The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint32Array</a></li>
<li><a href="Reference/Global_Objects/Uint8Array.html" title="The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8Array</a></li>
<li><a href="Reference/Global_Objects/Uint8ClampedArray.html" title="The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8ClampedArray</a></li>
<li><a href="Reference/Global_Objects/WeakMap.html" title="The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.">WeakMap</a></li>
<li><a href="Reference/Global_Objects/WeakSet.html" title="The WeakSet object lets you store weakly held objects in a collection.">WeakSet</a></li>
<li><a href="Reference/Global_Objects/WebAssembly.html" title="The WebAssembly JavaScript object acts as the namespace for all WebAssembly-related functionality.">WebAssembly</a></li>
<li><a href="Reference/Global_Objects/decodeURI.html" title="The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or by a similar routine.">decodeURI()</a></li>
<li><a href="Reference/Global_Objects/decodeURIComponent.html" title="The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.">decodeURIComponent()</a></li>
<li><a href="Reference/Global_Objects/encodeURI.html" title="The encodeURI() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURI()</a></li>
<li><a href="Reference/Global_Objects/encodeURIComponent.html" title="The encodeURIComponent() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURIComponent()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/escape.html" title="The escape() function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.">escape()</a></li>
<li><a href="Reference/Global_Objects/eval.html" title="The eval() function evaluates JavaScript code represented as a string.">eval()</a></li>
<li><a href="Reference/Global_Objects/globalThis.html" title="The global globalThis property contains the global this value, which is akin to the global object.">globalThis</a></li>
<li><a href="Reference/Global_Objects/isFinite.html" title="The global isFinite() function determines whether the passed value is a finite number. If  needed, the parameter is first converted to a number.">isFinite()</a></li>
<li><a href="Reference/Global_Objects/isNaN.html" title="The isNaN() function determines whether a value is NaN or not. Note, coercion inside the isNaN function has interesting rules; you may alternatively want to use Number.isNaN(), as defined in ECMAScript 2015.">isNaN()</a></li>
<li><a href="Reference/Global_Objects/null.html" title="The value null represents the intentional absence of any object value. It is one of JavaScript&#39;s primitive values and is treated as falsy for boolean operations.">null</a></li>
<li><a href="Reference/Global_Objects/parseFloat.html" title="The parseFloat() function parses an argument (converting it to a string first if needed) and returns a floating point number.">parseFloat()</a></li>
<li><a href="Reference/Global_Objects/parseInt.html" title="The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).">parseInt()</a></li>
<li><a href="Reference/Global_Objects/undefined.html" title="The global undefined property represents the primitive value undefined. It is one of JavaScript&#39;s primitive types.">undefined</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/unescape.html" title="The unescape() function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Usually, decodeURI or decodeURIComponent are preferred over unescape.">unescape()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><a href="Reference/Global_Objects/uneval.html" title="The uneval() function creates a string representation of the source code of an Object.">uneval()</a></li>
</ol></li>
<li>Expressions &amp; operators
<ol>
<li><a href="Reference/Operators.html" title="Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).">Arithmetic operators</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/Array_comprehensions" title="The array comprehension syntax was a JavaScript expression which allowed you to quickly assemble a new array based on an existing one. However, it has been removed from the standard and the Firefox implementation. Do not use it!">Array comprehensions</a></li>
<li><a href="Reference/Operators%23Assignment_operators.html" title="An assignment operator assigns a value to its left operand based on the value of its right operand.">Assignment operators</a></li>
<li><a href="Reference/Operators.html" title="Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.">Bitwise operators</a></li>
<li><a href="Reference/Operators/Comma_Operator.html" title="The comma operator evaluates each of its operands (from left to right) and returns the value of the last operand.">Comma operator</a></li>
<li><a href="Reference/Operators.html" title="JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., &lt;=), the operands are first converted to primitives, then to the same type, before comparison.">Comparison operators</a></li>
<li><a href="Reference/Operators/Conditional_Operator.html" title="The conditional (ternary) operator is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy.">Conditional (ternary) operator</a></li>
<li><a href="Reference/Operators/Destructuring_assignment.html" title="The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.">Destructuring assignment</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/Expression_closures" title="Expression closures are a shorthand function syntax for writing simple functions.">Expression closures</a></li>
<li><a href="Reference/Operators/function.html" title="The function keyword can be used to define a function inside an expression.">Function expression</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/Generator_comprehensions" title="The generator comprehension syntax was a JavaScript expression which allowed you to quickly assemble a new generator function based on an existing iterable object. However, it has been removed from the standard and the Firefox implementation. Do not use it!">Generator comprehensions</a></li>
<li><a href="Reference/Operators/Grouping.html" title="The grouping operator ( ) controls the precedence of evaluation in expressions.">Grouping operator</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/Legacy_generator_function" title="The function keyword can be used to define a legacy generator function inside an expression. To make the function a legacy generator, the function body should contain at least one yield expression.">Legacy generator function expression</a></li>
<li><a href="Reference/Operators.html" title="Logical operators are typically used with Boolean (logical) values. When they are, they return a Boolean value. However, the &amp;&amp; and || operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they will return a non-Boolean value.">Logical operators</a></li>
<li><a href="Reference/Operators/Nullish_coalescing_operator.html" title="The nullish coalescing operator (??) is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.">Nullish coalescing operator</a></li>
<li><a href="Reference/Operators/Object_initializer.html" title="Objects can be initialized using new Object(), Object.create(), or using the literal notation (initializer notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).">Object initializer</a></li>
<li><a href="Reference/Operators/Operator_Precedence.html" title="Operator precedence determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.">Operator precedence</a></li>
<li><a href="Reference/Operators/Optional_chaining.html" title="The ?. operator functions similarly to the . chaining operator, except that instead of causing an error if a reference is nullish (null or undefined), the expression short-circuits with a return value of undefined.">Optional chaining</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Operators/Pipeline_operator.html" title="The experimental pipeline operator |&gt; (currently at stage 1) pipes the value of an expression into a function. This allows the creation of chained function calls in a readable manner. The result is syntactic sugar in which a function call with a single argument can be written like this:">Pipeline operator</a></li>
<li><a href="Reference/Operators/Property_Accessors-2.html" title="Property accessors provide access to an object&#39;s properties by using the dot notation or the bracket notation.">Property accessors</a></li>
<li><a href="Reference/Operators/Spread_syntax.html" title="Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.">Spread syntax</a></li>
<li><a href="Reference/Operators/async_function.html" title="The async function keyword can be used to define async functions inside expressions.">async function expression</a></li>
<li><a href="Reference/Operators/await.html" title="The await operator is used to wait for a Promise. It can only be used inside an async function.">await</a></li>
<li><a href="Reference/Operators/class.html" title="The class expression is one way to define a class in ECMAScript 2015. Similar to function expressions, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. ">class expression</a></li>
<li><a href="Reference/Operators/delete.html" title="The JavaScript delete operator removes a property from an object; if no more references to the same property are held, it is eventually released automatically.">delete operator</a></li>
<li><a href="Reference/Operators/function_.html" title="The function* keyword can be used to define a generator function inside an expression.">function* expression</a></li>
<li><a href="Reference/Operators/in.html" title="The in operator returns true if the specified property is in the specified object or its prototype chain.">in operator</a></li>
<li><a href="Reference/Operators/instanceof.html" title="The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object.">instanceof</a></li>
<li><a href="Reference/Operators/new.html" title="The new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.">new operator</a></li>
<li><a href="Reference/Operators/new-2.html" title="The new.target pseudo-property lets you detect whether a function or constructor was called using the new operator. In constructors and functions invoked using the new operator, new.target returns a reference to the constructor or function. In normal function calls, new.target is undefined.">new.target</a></li>
<li><a href="Reference/Operators/super.html" title="The super keyword is used to access and call functions on an object&#39;s parent.">super</a></li>
<li><a href="Reference/Operators/this.html" title="A function&#39;s this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode.">this</a></li>
<li><a href="Reference/Operators/typeof.html" title="The typeof operator returns a string indicating the type of the unevaluated operand.">typeof</a></li>
<li><a href="Reference/Operators/void.html" title="The void operator evaluates the given expression and then returns undefined.">void operator</a></li>
<li><a href="Reference/Operators/yield.html" title="The yield keyword is used to pause and resume a generator function (function* or legacy generator function).">yield</a></li>
<li><a href="Reference/Operators/yield_.html" title="The yield* expression is used to delegate to another generator or iterable object.">yield*</a></li>
</ol></li>
<li>Statements &amp; declarations
<ol>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/Legacy_generator_function_statement" title="The legacy generator function statement declares legacy generator functions with the specified parameters.">Legacy generator function</a></li>
<li><a href="Reference/Statements/async_function.html" title="The async function declaration defines an asynchronous function — a function that returns an AsyncFunction object.">async function</a></li>
<li><a href="Reference/Statements/block.html" title="A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of curly brackets and may optionally be labelled:">block</a></li>
<li><a href="Reference/Statements/break.html" title="The break statement terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.">break</a></li>
<li><a href="Reference/Statements/class.html" title="The class declaration creates a new class with a given name using prototype-based inheritance.">class</a></li>
<li><a href="Reference/Statements/const.html" title="Constants are block-scoped, much like variables defined using the let statement. The value of a constant can&#39;t be changed through reassignment, and it can&#39;t be redeclared.">const</a></li>
<li><a href="Reference/Statements/continue.html" title="The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.">continue</a></li>
<li><a href="Reference/Statements/debugger.html" title="The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.">debugger</a></li>
<li><a href="Reference/Statements/switch.html" title="The default keyword can be used in two situations in JavaScript: within a switch statement, or with an export statement.">default</a></li>
<li><a href="Reference/Statements/do...html" title="The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.">do...while</a></li>
<li><a href="Reference/Statements/Empty.html" title="An empty statement is used to provide no statement, although the JavaScript syntax would expect one.">empty</a></li>
<li><a href="Reference/Statements/export.html" title="The export statement is used when creating JavaScript modules to export functions, objects, or primitive values from the module so they can be used by other programs with the import statement.">export</a></li>
<li><a href="Reference/Statements/for.html" title="The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.">for</a></li>
<li><a href="Reference/Statements/for-await...html" title="The for await...of statement creates a loop iterating over async iterable objects as well as on sync iterables, including: built-in String, Array, Array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined async/sync iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.">for await...of</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/for_each...in" title="The for each...in statement iterates a specified variable over all values of object&#39;s properties. For each distinct property, a specified statement is executed.">for each...in</a></li>
<li><a href="Reference/Statements/for...html" title="The for...in statement iterates over all enumerable properties of an object that are keyed by strings (ignoring ones keyed by Symbols), including inherited enumerable properties.">for...in</a></li>
<li><a href="Reference/Statements/for..-2.html" title="The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.">for...of</a></li>
<li><a href="Reference/Statements/function.html" title="The function declaration (function statement) defines a function with the specified parameters.">function declaration</a></li>
<li><a href="Reference/Statements/function_.html" title="The function* declaration (function keyword followed by an asterisk) defines a generator function, which returns a Generator object.">function*</a></li>
<li><a href="Reference/Statements/if...html" title="The if statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement can be executed.">if...else</a></li>
<li><a href="Reference/Statements/import.html" title="The static import statement is used to import bindings which are exported by another module. ">import</a></li>
<li><a href="Reference/Statements/import-2.html" title="The import.meta object exposes context-specific metadata to a JavaScript module. It contains information about the module, like the module&#39;s URL.">import.meta</a></li>
<li><a href="Reference/Statements/label.html" title="The labeled statement can be used with break or continue statements. It is prefixing a statement with an identifier which you can refer to.">label</a></li>
<li><a href="Reference/Statements/let.html" title="The let statement declares a block scope local variable, optionally initializing it to a value.">let</a></li>
<li><a href="Reference/Statements/return.html" title="The return statement ends function execution and specifies a value to be returned to the function caller.">return</a></li>
<li><a href="Reference/Statements/switch.html" title="The switch statement evaluates an expression, matching the expression&#39;s value to a case clause, and executes statements associated with that case, as well as statements in cases that follow the matching case.">switch</a></li>
<li><a href="Reference/Statements/throw.html" title="The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won&#39;t be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.">throw</a></li>
<li><a href="Reference/Statements/try...html" title="The try...catch statement marks a block of statements to try and specifies a response should an exception be thrown.">try...catch</a></li>
<li><a href="Reference/Statements/var.html" title="The var statement declares a variable, optionally initializing it to a value.">var</a></li>
<li><a href="Reference/Statements/while.html" title="The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.">while</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Statements/with.html" title="The with statement extends the scope chain for a statement.">with</a></li>
</ol></li>
<li>Functions
<ol>
<li><a href="Reference/Functions/Arrow_functions.html" title="An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords. Arrow function expressions are ill suited as methods, and they cannot be used as constructors.">Arrow function expressions</a></li>
<li><a href="Reference/Functions/Default_parameters.html" title="Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.">Default parameters</a></li>
<li><a href="Reference/Functions/Method_definitions.html" title="Starting with ECMAScript 2015, a shorter syntax for method definitions on objects initializers is introduced. It is a shorthand for a function assigned to the method&#39;s name.">Method definitions</a></li>
<li><a href="Reference/Functions/rest_parameters.html" title="The rest parameter syntax allows us to represent an indefinite number of arguments as an array.">Rest parameters</a></li>
<li><a href="Reference/Functions/arguments.html" title="arguments is an Array-like object accessible inside functions that contains the values of the arguments passed to that function.">The arguments object</a></li>
<li><a href="Reference/Functions/get.html" title="The get syntax binds an object property to a function that will be called when that property is looked up.">getter</a></li>
<li><a href="Reference/Functions/set.html" title="The set syntax binds an object property to a function to be called when there is an attempt to set that property.">setter</a></li>
</ol></li>
<li>Classes
<ol>
<li><a href="Reference/Classes/Public_class_fields.html" title="Both static and instance public fields are writable, enumerable, and configurable properties. As such, unlike their private counterparts, they participate in prototype inheritance.">Class fields</a></li>
<li><a href="Reference/Classes/constructor.html" title="The constructor method is a special method for creating and initializing an object created within a class.">constructor</a></li>
<li><a href="Reference/Classes/extends.html" title="The extends keyword is used in class declarations or class expressions to create a class which is a child of another class.">extends</a></li>
<li><a href="Reference/Classes/static.html" title="The static keyword defines a static method for a class. Static methods aren&#39;t called on instances of the class. Instead, they&#39;re called on the class itself.">static</a></li>
</ol></li>
<li>Errors
<ol>
<li><a href="Reference/Errors/Property_access_denied.html" title="There was attempt to access an object for which you have no permission. This is likely an &lt;iframe&gt; element loaded from a different domain for which you violated the same-origin policy.">Error: Permission denied to access property "x"</a></li>
<li><a href="Reference/Errors/Too_much_recursion.html" title="When there are too many function calls, or a function is missing a base case, JavaScript will throw this error.">InternalError: too much recursion</a></li>
<li><a href="Reference/Errors/Not_a_codepoint.html" title="String.fromCodePoint() throws this error when passed NaN values, negative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF (1114111).">RangeError: argument is not a valid code point</a></li>
<li><a href="Reference/Errors/Invalid_array_length.html" title="RangeError">RangeError: invalid array length</a></li>
<li><a href="Reference/Errors/Invalid_date.html" title="RangeError">RangeError: invalid date</a></li>
<li><a href="Reference/Errors/Precision_range.html" title="RangeError">RangeError: precision is out of range</a></li>
<li><a href="Reference/Errors/Bad_radix.html" title="RangeError">RangeError: radix must be an integer</a></li>
<li><a href="Reference/Errors/Resulting_string_too_large.html" title="RangeError">RangeError: repeat count must be less than infinity</a></li>
<li><a href="Reference/Errors/Negative_repetition_count.html" title="RangeError">RangeError: repeat count must be non-negative</a></li>
<li><a href="Reference/Errors/Not_defined.html" title="ReferenceError.">ReferenceError: "x" is not defined</a></li>
<li><a href="Reference/Errors/Undeclared_var.html" title="ReferenceError warning in strict mode only.">ReferenceError: assignment to undeclared variable "x"</a></li>
<li><a href="Reference/Errors/Cant_access_lexical_declaration_before_init.html" title="ReferenceError">ReferenceError: can't access lexical declaration`X' before initialization</a></li>
<li><a href="Reference/Errors/Deprecated_caller_or_arguments_usage.html" title="A strict-mode-only warning that a ReferenceError occurred. JavaScript execution won&#39;t be halted.">ReferenceError: deprecated caller or arguments usage</a></li>
<li><a href="Reference/Errors/Invalid_assignment_left-hand_side.html" title="ReferenceError.">ReferenceError: invalid assignment left-hand side</a></li>
<li><a href="Reference/Errors/Undefined_prop.html" title="(Firefox only) ReferenceError warning which is reported only if javascript.options.strict preference is set to true.">ReferenceError: reference to undefined property "x"</a></li>
<li><a href="Reference/Errors/Deprecated_octal.html" title="SyntaxError in strict mode only.">SyntaxError: "0"-prefixed octal literals and octal escape seq. are deprecated</a></li>
<li><a href="Reference/Errors/Strict_Non_Simple_Params.html" title="SyntaxError.">SyntaxError: "use strict" not allowed in function with non-simple parameters</a></li>
<li><a href="Reference/Errors/Reserved_identifier.html" title="SyntaxError">SyntaxError: "x" is a reserved identifier</a></li>
<li><a href="Reference/Errors/JSON_bad_parse.html" title="SyntaxError">SyntaxError: JSON.parse: bad parsing</a></li>
<li><a href="Reference/Errors/Malformed_formal_parameter.html" title="SyntaxError">SyntaxError: Malformed formal parameter</a></li>
<li><a href="Reference/Errors/Unexpected_token.html" title="SyntaxError">SyntaxError: Unexpected token</a></li>
<li><a href="Reference/Errors/Deprecated_source_map_pragma.html" title="A warning that a SyntaxError occurred. JavaScript execution won&#39;t be halted.">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li>
<li><a href="Reference/Errors/Invalid_for-of_initializer.html" title="SyntaxError">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li>
<li><a href="Reference/Errors/Delete_in_strict_mode.html" title="SyntaxError in strict mode only.">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li>
<li><a href="Reference/Errors/Invalid_for-in_initializer.html" title="SyntaxError in strict mode only.">SyntaxError: for-in loop head declarations may not have initializers</a></li>
<li><a href="Reference/Errors/Unnamed_function_statement.html" title="SyntaxError">SyntaxError: function statement requires a name</a></li>
<li><a href="Reference/Errors/Identifier_after_number.html" title="SyntaxError">SyntaxError: identifier starts immediately after numeric literal</a></li>
<li><a href="Reference/Errors/Illegal_character.html" title="SyntaxError">SyntaxError: illegal character</a></li>
<li><a href="Reference/Errors/Bad_regexp_flag.html" title="SyntaxError">SyntaxError: invalid regular expression flag "x"</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_argument_list.html" title="SyntaxError.">SyntaxError: missing ) after argument list</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_condition.html" title="SyntaxError">SyntaxError: missing ) after condition</a></li>
<li><a href="Reference/Errors/Missing_colon_after_property_id.html" title="SyntaxError">SyntaxError: missing : after property id</a></li>
<li><a href="Reference/Errors/Missing_semicolon_before_statement.html" title="SyntaxError.">SyntaxError: missing ; before statement</a></li>
<li><a href="Reference/Errors/Missing_initializer_in_const.html" title="SyntaxError">SyntaxError: missing = in const declaration</a></li>
<li><a href="Reference/Errors/Missing_bracket_after_list.html" title="SyntaxError.">SyntaxError: missing ] after element list</a></li>
<li><a href="Reference/Errors/Missing_formal_parameter.html" title="SyntaxError">SyntaxError: missing formal parameter</a></li>
<li><a href="Reference/Errors/Missing_name_after_dot_operator.html" title="SyntaxError">SyntaxError: missing name after . operator</a></li>
<li><a href="Reference/Errors/No_variable_name.html" title="SyntaxError">SyntaxError: missing variable name</a></li>
<li><a href="Reference/Errors/Missing_curly_after_function_body.html" title="SyntaxError">SyntaxError: missing } after function body</a></li>
<li><a href="Reference/Errors/Missing_curly_after_property_list.html" title="SyntaxError">SyntaxError: missing } after property list</a></li>
<li><a href="Reference/Errors/Redeclared_parameter.html" title="SyntaxError">SyntaxError: redeclaration of formal parameter "x"</a></li>
<li><a href="Reference/Errors/Bad_return_or_yield.html" title="SyntaxError.">SyntaxError: return not in function</a></li>
<li><a href="Reference/Errors/Equal_as_assign.html" title="(Firefox only) SyntaxError warning which is reported only if javascript.options.strict preference is set to true.">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li>
<li><a href="Reference/Errors/Unterminated_string_literal.html" title="SyntaxError">SyntaxError: unterminated string literal</a></li>
<li><a href="Reference/Errors/No_properties.html" title="TypeError.">TypeError: "x" has no properties</a></li>
<li><a href="Reference/Errors/Unexpected_type.html" title="TypeError.">TypeError: "x" is (not) "y"</a></li>
<li><a href="Reference/Errors/Not_a_constructor.html" title="TypeError">TypeError: "x" is not a constructor</a></li>
<li><a href="Reference/Errors/Not_a_function.html" title="TypeError.">TypeError: "x" is not a function</a></li>
<li><a href="Reference/Errors/No_non-null_object.html" title="TypeError">TypeError: "x" is not a non-null object</a></li>
<li><a href="Reference/Errors/Read-only.html" title="TypeError">TypeError: "x" is read-only</a></li>
<li><a href="Reference/Errors/is_not_iterable.html" title="TypeError">TypeError: 'x' is not iterable</a></li>
<li><a href="Reference/Errors/More_arguments_needed.html" title="TypeError.">TypeError: More arguments needed</a></li>
<li><a href="Reference/Errors/Reduce_of_empty_array_with_no_initial_value.html" title="TypeError">TypeError: Reduce of empty array with no initial value</a></li>
<li><a href="Reference/Errors/Called_on_incompatible_type.html" title="TypeError">TypeError: X.prototype.y called on incompatible type</a></li>
<li><a href="Reference/Errors/Dead_object.html" title="TypeError">TypeError: can't access dead object</a></li>
<li><a href="Reference/Errors/Cant_access_property.html" title="TypeError.">TypeError: can't access property "x" of "y"</a></li>
<li><a href="Reference/Errors/Cant_assign_to_property.html" title="TypeError.">TypeError: can't assign to property "x" on "y": not an object</a></li>
<li><a href="Reference/Errors/Cant_define_property_object_not_extensible.html" title="TypeError">TypeError: can't define property "x": "obj" is not extensible</a></li>
<li><a href="Reference/Errors/Non_configurable_array_element.html" title="TypeError">TypeError: can't delete non-configurable array element</a></li>
<li><a href="Reference/Errors/Cant_redefine_property.html" title="TypeError">TypeError: can't redefine non-configurable property "x"</a></li>
<li><a href="Reference/Errors/in_operator_no_object.html" title="TypeError">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li>
<li><a href="Reference/Errors/Cyclic_object_value.html" title="TypeError">TypeError: cyclic object value</a></li>
<li><a href="Reference/Errors/invalid_right_hand_side_instanceof_operand.html" title="TypeError">TypeError: invalid 'instanceof' operand 'x'</a></li>
<li><a href="Reference/Errors/Array_sort_argument.html" title="TypeError">TypeError: invalid Array.prototype.sort argument</a></li>
<li><a href="Reference/Errors/Typed_array_invalid_arguments.html" title="TypeError">TypeError: invalid arguments</a></li>
<li><a href="Reference/Errors/Invalid_const_assignment.html" title="TypeError">TypeError: invalid assignment to const "x"</a></li>
<li><a href="Reference/Errors/Cant_delete.html" title="TypeError in strict mode only.">TypeError: property "x" is non-configurable and can't be deleted</a></li>
<li><a href="Reference/Errors/Getter_only.html" title="TypeError in strict mode only.">TypeError: setting getter-only property "x"</a></li>
<li><a href="Reference/Errors/Var_hides_argument.html" title="TypeError warning in strict mode only.">TypeError: variable "x" redeclares argument</a></li>
<li><a href="Reference/Errors/Malformed_URI.html" title="URIError">URIError: malformed URI sequence</a></li>
<li><a href="Reference/Errors/Already_has_pragma.html" title="A warning. JavaScript execution won&#39;t be halted.">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li>
<li><a href="Reference/Errors/Bad_octal.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li>
<li><a href="Reference/Errors/Deprecated_toLocaleFormat.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: Date.prototype.toLocaleFormat is deprecated</a></li>
<li><a href="Reference/Errors/For-each-in_loops_are_deprecated.html" title="Warning">Warning: JavaScript 1.6's for-each-in loops are deprecated</a></li>
<li><a href="Reference/Errors/Deprecated_String_generics.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: String.x is deprecated; use String.prototype.x instead</a></li>
<li><a href="Reference/Errors/Deprecated_expression_closures.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: expression closures are deprecated</a></li>
<li><a href="Reference/Errors/Stmt_after_return.html" title="Warning">Warning: unreachable code after return statement</a></li>
</ol></li>
<li>Misc
<ol>
<li><a href="JavaScript_technologies_overview.html">JavaScript technologies overview</a></li>
<li><a href="Reference/Lexical_grammar.html">Lexical grammar</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Enumerability_and_ownership_of_properties.html">Enumerability and ownership of properties</a></li>
<li><a href="Reference/Iteration_protocols.html">Iteration protocols</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Reference/Strict_mode/Transitioning_to_strict_mode.html">Transitioning to strict mode</a></li>
<li><a href="Reference/Template_literals.html">Template literals</a></li>
<li><a href="Reference/Deprecated_and_obsolete_features.html">Deprecated features</a></li>
</ol></li>
</ol>
</div>
</div>
</div>
</div>
</div>
<section class="newsletter-container">
<div id="newsletter-form-container" class="newsletter">
<section class="newsletter-head">
<h2 id="learn-the-best-of-web-development-5" class="newsletter-teaser">Learn the best of web development</h2>
<p>Get the latest and greatest from MDN delivered straight to your inbox.</p>
<p>The newsletter is offered in English only at the moment.</p>
</section>
<div class="form-group newsletter-group-email">
E-mail
</div>
<div id="newsletter-privacy" class="form-group form-group-agree newsletter-group-privacy" data-aria-hidden="false">
I’m okay with Mozilla handling my info as explained in this <a href="../../../../../external.html?link=https://www.mozilla.org/privacy/">Privacy Policy</a>.
</div>
<div class="newsletter-group-submit">
Sign up now
</div>
<span>Hide Newsletter Sign-up</span>
</div>
</section>
<div class="content-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/" class="nav-footer-logo">MDN Web Docs</a>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Web Technologies</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn Web Development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/About">About MDN</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Feedback</a></li>
</ul>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/">About</a></li>
<li><a href="../../../../../external.html?link=https://shop.spreadshirt.com/mdn-store/">MDN Web Docs Store</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/contact/">Contact Us</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/firefox/?utm_source=developer.mozilla.org&amp;utm_campaign=footer&amp;utm_medium=referral">Firefox</a></li>
</ul>
<div class="social social-mdn">
<h4 id="mdn-5">MDN</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<div class="social social-moz">
<h4 id="mozilla-5">Mozilla</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<p>© 2005-2020 Mozilla and individual contributors. Content is available under <a href="../../../../../external.html?link=https://developer.mozilla.org/docs/MDN/About#Copyrights_and_licenses">these licenses</a>.</p>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/legal/terms/mozilla">Terms</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/">Privacy</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/#cookies">Cookies</a></li>
</ul>
</div>
</div>
<div id="auth-modal" class="modal hidden">
<section class="auth-providers" tabindex="-1" data-role="dialog" data-aria-modal="true" data-aria-labelledby="modal-main-heading">
<h2 id="modal-main-heading">Sign In</h2>
<p>Sign in to enjoy the benefits of an MDN account. If you haven’t already created an account, you will be prompted to do so after signing in.</p>
<div class="auth-button-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/users/github/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FEventLoop" class="github-auth">Sign in with Github</a> <a href="../../../../../external.html?link=https://developer.mozilla.org/users/google/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FEventLoop" class="google-auth">Sign in with Google</a>
</div>
<span>Close modal</span>
</section>
</div>
<div id="react-container" data-component-name="SPA">
<div class="loading-bar">

</div>
<ul>
<li><a href="#content" id="skip-main">Skip to main content</a></li>
<li><a href="#language" id="skip-language">Select language</a></li>
<li><a href="#main-q" id="skip-search">Skip to search</a></li>
</ul>
<ul>
<li>Technologies
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Technologies Overview</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide/Graphics">Graphics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API">APIs / DOM</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions">Browser Extensions</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/MathML">MathML</a></li>
</ul></li>
<li>References &amp; Guides
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn web development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Tutorials">Tutorials</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Reference">References</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide">Developer Guides</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Accessibility">Accessibility</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Games">Game development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">...more docs</a></li>
</ul></li>
<li>Feedback
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Send Feedback</a></li>
<li><a href="../../../../../external.html?link=https://support.mozilla.org/">Get Firefox help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://stackoverflow.com/">Get web development help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Community">Join the MDN community</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/sprints/issues/new?template=issue-template.md&amp;projects=mdn/sprints/2&amp;labels=user-report&amp;title=/en-US/docs/Web/JavaScript/Guide">Report a content problem 🌐</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/kuma/issues/new/choose">Report an issue 🌐</a></li>
</ul></li>
</ul>
<div class="header-search">
Search MDN
<span>Open search</span>
</div>
<div data-role="main">
<div class="titlebar-container">
<div class="titlebar">

</div>
</div>
<div class="full-width-row-container">
<div class="max-content-width-container">
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web" class="breadcrumb-chevron"><span class="pre-text">See </span><span data-property="name">Web technology for developers</span></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript" class="breadcrumb-previous"><span class="pre-text">See </span><span data-property="name">JavaScript</span></a></li>
<li><a href="Guide.html" class="crumb-current-page"><span data-property="name" data-aria-current="page">JavaScript Guide</span></a></li>
</ol>
<div class="dropdown-container language-menu">
English<span class="dropdown-arrow-down" data-aria-hidden="true">▼</span>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ar/docs/Web/JavaScript/Guide" title="Arabic">عربي</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/bg/docs/Web/JavaScript/Guide" title="Bulgarian">Български</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/bn/docs/Web/JavaScript/Guide" title="Bengali">বাংলা</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ca/docs/Web/JavaScript/Guide" title="Catalan">Català</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/de/docs/Web/JavaScript/Guide" title="German">Deutsch</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/es/docs/Web/JavaScript/Guide" title="Spanish">Español</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/fa/docs/Web/JavaScript/راهنما" title="Persian">فارسی</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide" title="French">Français</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/he/docs/Web/JavaScript/Guide" title="Hebrew">עברית</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/hu/docs/Web/JavaScript/Guide" title="Hungarian">magyar</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/id/docs/Web/JavaScript/Panduan" title="Indonesian">Bahasa Indonesia</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/it/docs/Web/JavaScript/Guida" title="Italian">Italiano</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ja/docs/Web/JavaScript/Guide" title="Japanese">日本語</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/kab/docs/Web/JavaScript/Amnir" title="Kabyle">Taqbaylit</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide" title="Korean">한국어</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/nl/docs/Web/JavaScript/Guide" title="Dutch">Nederlands</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pl/docs/Web/JavaScript/Guide" title="Polish">Polski</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide" title="Portuguese (Brazilian)">Português (do Brasil)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pt-PT/docs/Web/JavaScript/Guia" title="Portuguese (Portugal)">Português (Europeu)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide" title="Russian">Русский</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/sv-SE/docs/Web/JavaScript/Guide" title="Swedish">Svenska</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/tr/docs/Web/JavaScript/Guide" title="Turkish">Türkçe</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/uk/docs/Web/JavaScript/Guide" title="Ukrainian">Українська</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/vi/docs/Web/JavaScript/Guide" title="Vietnamese">Tiếng Việt</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide" title="Chinese (Simplified)">中文 (简体)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide" title="Chinese (Traditional)">正體中文 (繁體)</a></li>
<li><a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide$locales" id="translations-add">Add a translation</a></li>
</ul>
</div>
</div>
</div>
<div class="wiki-left-present content-layout">
<div id="content" class="article text-content">
<div>

</div>
<p>The JavaScript Guide shows you how to use <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a> and gives an overview of the language. If you need exhaustive information about a language feature, have a look at the <a href="Reference.html">JavaScript reference</a>.</p>
<h2 id="Chapters">Chapters</h2>
<p>This Guide is divided into several chapters:</p>
<ul>
<li><p><span><a href="Guide/Introduction.html">Introduction</a></span></p>
<p><a href="Guide/Introduction.html#Where_to_find_JavaScript_information">About this guide</a><br />
<a href="Guide/Introduction.html#What_is_JavaScript">About JavaScript</a><br />
<a href="Guide/Introduction.html#JavaScript_and_Java">JavaScript and Java</a><br />
<a href="Guide/Introduction.html#JavaScript_and_the_ECMAScript_Specification">ECMAScript</a><br />
<a href="Guide/Introduction.html#Getting_started_with_JavaScript">Tools</a><br />
<a href="Guide/Introduction.html#Hello_world">Hello World</a></p></li>
<li><p><span><a href="Guide/Grammar_and_types-2.html">Grammar and types</a></span></p>
<p><a href="Guide/Grammar_and_types-2.html#Basics">Basic syntax &amp; comments</a><br />
<a href="Guide/Grammar_and_types-2.html#Declarations">Declarations</a><br />
<a href="Guide/Grammar_and_types-2.html#Variable_scope">Variable scope</a><br />
<a href="Guide/Grammar_and_types-2.html#Variable_hoisting">Variable hoisting</a><br />
<a href="Guide/Grammar_and_types-2.html#Data_structures_and_types">Data structures and types</a><br />
<a href="Guide/Grammar_and_types-2.html#Literals">Literals</a></p></li>
<li><p><span><a href="Guide/Control_flow_and_error_handling.html">Control flow and error handling</a></span></p>
<p><code>if...else</code><br />
<code>switch</code><br />
<a href="Guide/Control_flow_and_error_handling.html#Exception_handling_statements"><code>try</code>/<code>catch</code>/<code>throw</code></a><br />
<a href="Guide/Control_flow_and_error_handling.html#Utilizing_Error_objects">Error objects</a></p></li>
<li><p><span><a href="Guide/Loops_and_iteration.html">Loops and iteration</a></span></p>
<p><code>for    while    do...while    break/continue    for..in    for..of</code></p></li>
</ul>
<ul>
<li><p><span><a href="Guide/Functions.html">Functions</a></span></p>
<p><a href="Guide/Functions.html#Defining_functions">Defining functions</a><br />
<a href="Guide/Functions.html#Calling_functions">Calling functions</a><br />
<a href="Guide/Functions.html#Function_scope">Function scope</a><br />
<a href="Guide/Functions.html#Closures">Closures</a><br />
<a href="Guide/Functions.html#Using_the_arguments_object">Arguments</a> &amp; <a href="Guide/Functions.html#Function_parameters">parameters</a><br />
<a href="Guide/Functions.html#Arrow_functions">Arrow functions</a></p></li>
<li><p><span><a href="Guide/Expressions_and_Operators.html">Expressions and operators</a></span></p>
<p><a href="Guide/Expressions_and_Operators.html#Assignment_operators">Assignment</a> &amp; <a href="Guide/Expressions_and_Operators.html#Comparison_operators">Comparisons</a><br />
<a href="Guide/Expressions_and_Operators.html#Arithmetic_operators">Arithmetic operators</a><br />
<a href="Guide/Expressions_and_Operators.html#Bitwise_operators">Bitwise</a> &amp; <a href="Guide/Expressions_and_Operators.html#Logical_operators">logical operators</a><br />
<a href="Guide/Expressions_and_Operators.html#Conditional_(ternary)_operator">Conditional (ternary) operator</a></p></li>
<li><p><span><a href="Guide/Numbers_and_dates.html">Numbers and dates</a></span> <a href="Guide/Numbers_and_dates.html#Numbers">Number literals</a></p>
<p><a href="Guide/Numbers_and_dates.html#Number_object"><code>Number</code> object</a><br />
<a href="Guide/Numbers_and_dates.html#Math_object"><code>Math</code> object</a><br />
<a href="Guide/Numbers_and_dates.html#Date_object"><code>Date</code> object</a></p></li>
<li><p><span><a href="Guide/Text_formatting.html">Text formatting</a></span></p>
<p><a href="Guide/Text_formatting.html#String_literals">String literals</a><br />
<a href="Guide/Text_formatting.html#String_objects"><code>String</code> object</a><br />
<a href="Guide/Text_formatting.html#Multi-line_template_literals">Template literals</a><br />
<a href="Guide/Text_formatting.html#Internationalization">Internationalization</a><br />
<a href="Guide/Regular_Expressions.html">Regular Expressions</a></p></li>
</ul>
<ul>
<li><p><span><a href="Guide/Indexed_collections.html">Indexed collections</a></span></p>
<p><a href="Guide/Indexed_collections.html#Array_object">Arrays</a><br />
<a href="Guide/Indexed_collections.html#Typed_Arrays">Typed arrays</a></p></li>
<li><p><span><a href="Guide/Keyed_collections.html">Keyed collections</a></span></p>
<p><code>Map</code><br />
<code>WeakMap</code><br />
<code>Set</code><br />
<code>WeakSet</code></p></li>
<li><p><span><a href="Guide/Working_with_Objects.html">Working with objects</a></span></p>
<p><a href="Guide/Working_with_Objects.html#Objects_and_properties">Objects and properties</a><br />
<a href="Guide/Working_with_Objects.html#Creating_new_objects">Creating objects</a><br />
<a href="Guide/Working_with_Objects.html#Defining_methods">Defining methods</a><br />
<a href="Guide/Working_with_Objects.html#Defining_getters_and_setters">Getter and setter</a></p></li>
<li><p><span><a href="Guide/Details_of_the_Object_Model.html">Details of the object model</a></span></p>
<p><a href="Guide/Details_of_the_Object_Model.html#Class-based_vs._prototype-based_languages">Prototype-based OOP</a><br />
<a href="Guide/Details_of_the_Object_Model.html#Creating_the_hierarchy">Creating object hierarchies</a><br />
<a href="Guide/Details_of_the_Object_Model.html#Property_inheritance_revisited">Inheritance</a></p></li>
</ul>
<ul>
<li><p><span><a href="Guide/Using_promises.html">Promises</a></span></p>
<p><a href="Guide/Using_promises.html#Guarantees">Guarantees</a><br />
<a href="Guide/Using_promises.html#Chaining">Chaining</a><br />
<a href="Guide/Using_promises.html#Error_propagation">Error propagation</a><br />
<a href="Guide/Using_promises.html#Composition">Composition</a><br />
<a href="Guide/Using_promises.html#Timing">Timing</a></p></li>
<li><p><span><a href="Guide/Iterators_and_Generators-2.html">Iterators and generators</a></span></p>
<p><a href="Guide/Iterators_and_Generators-2.html#Iterators">Iterators</a><br />
<a href="Guide/Iterators_and_Generators-2.html#Iterables">Iterables</a><br />
<a href="Guide/Iterators_and_Generators-2.html#Generators">Generators</a></p></li>
<li><p><span><a href="Guide/Meta_programming.html">Meta programming</a></span></p>
<p><code>Proxy</code><br />
<a href="Guide/Meta_programming.html#Handlers_and_traps">Handlers and traps</a><br />
<a href="Guide/Meta_programming.html#Revocable_Proxy">Revocable Proxy</a><br />
<code>Reflect</code></p></li>
<li><p><span><a href="Guide/Modules.html">JavaScript modules</a></span></p>
<p><a href="Guide/Modules.html#Exporting_module_features">Exporting</a><br />
<a href="Guide/Modules.html#Importing_features_into_your_script">Importing</a><br />
<a href="Guide/Modules.html#Default_exports_versus_named_exports">Default exports</a><br />
<a href="Guide/Modules.html#Renaming_imports_and_exports">Renaming features</a><br />
<a href="Guide/Modules.html#Aggregating_modules">Aggregating modules</a><br />
<a href="Guide/Modules.html#Dynamic_module_loading">Dynamic module loading</a></p></li>
</ul>
<div class="prevnext" style="text-align: right;">
<p><a href="Guide/Introduction.html">Next »</a></p>
</div>
<div class="metadata">
<section class="document-meta">
<h4 id="metadata-6">Metadata</h4>
<ul>
<li><strong>Last modified:</strong> Aug 21, 2019, <a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide$history">by MDN contributors</a></li>
</ul>
</section>
</div>
</div>
<div id="sidebar-quicklinks" class="sidebar">
<div class="quick-links">
<div class="quick-links-head sidebar-heading">
Related Topics
</div>
<div>
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong><em>JavaScript</em></strong></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Tutorials"><strong>Tutorials:</strong></a></li>
<li>Complete beginners
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics">JavaScript basics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps">JavaScript first steps</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks">JavaScript building blocks</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Introducing JavaScript objects</a></li>
</ol></li>
<li>JavaScript Guide
<ol>
<li><a href="Guide/Introduction.html">Introduction</a></li>
<li><a href="Guide/Grammar_and_Types.html">Grammar and types</a></li>
<li><a href="Guide/Control_flow_and_error_handling.html">Control flow and error handling</a></li>
<li><a href="Guide/Loops_and_iteration.html">Loops and iteration</a></li>
<li><a href="Guide/Functions.html">Functions</a></li>
<li><a href="Guide/Expressions_and_Operators.html">Expressions and operators</a></li>
<li><a href="Guide/Numbers_and_dates.html">Numbers and dates</a></li>
<li><a href="Guide/Text_formatting.html">Text formatting</a></li>
<li><a href="Guide/Regular_Expressions.html">Regular expressions</a></li>
<li><a href="Guide/Indexed_collections.html">Indexed collections</a></li>
<li><a href="Guide/Keyed_collections.html">Keyed collections</a></li>
<li><a href="Guide/Working_with_Objects.html">Working with objects</a></li>
<li><a href="Guide/Details_of_the_Object_Model.html">Details of the object model</a></li>
<li><a href="Guide/Using_promises.html">Using promises</a></li>
<li><a href="Guide/Iterators_and_generators.html">Iterators and generators</a></li>
<li><a href="Guide/Meta_programming.html">Meta programming</a></li>
<li><a href="Guide/Modules.html">JavaScript modules</a></li>
</ol></li>
<li>Intermediate
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Introducing JavaScript objects</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs">Client-side web APIs</a></li>
<li><a href="A_re-introduction_to_JavaScript.html">A re-introduction to JavaScript</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Equality_comparisons_and_sameness.html">Equality comparisons and sameness</a></li>
<li><a href="Closures.html">Closures</a></li>
</ol></li>
<li>Advanced
<ol>
<li><a href="Inheritance_and_the_prototype_chain.html">Inheritance and the prototype chain</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Typed_arrays.html">JavaScript typed arrays</a></li>
<li><a href="Memory_Management.html">Memory Management</a></li>
<li><a href="EventLoop.html">Concurrency model and Event Loop</a></li>
</ol></li>
<li><strong><a href="Reference.html">References:</a></strong></li>
<li>Built-in objects
<ol>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/AggregateError.html" title="The AggregateError object represents an error when several errors need to be wrapped in a single error.">AggregateError</a></li>
<li><a href="Reference/Global_Objects/Array.html" title="The JavaScript Array class is a global object that is used in the construction of arrays; which are high-level, list-like objects.">Array</a></li>
<li><a href="Reference/Global_Objects/ArrayBuffer.html" title="The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer.">ArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/AsyncFunction.html" title="The AsyncFunction constructor creates a new async function object. In JavaScript, every asynchronous function is actually an AsyncFunction object.">AsyncFunction</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/AsyncIterator.html" title="The AsyncIterator global object is an abstract class providing helper methods, similar to the ones exposed on Array instances.">AsyncIterator</a></li>
<li><a href="Reference/Global_Objects/Atomics.html" title="The Atomics object provides atomic operations as static methods. They are used with SharedArrayBuffer objects.">Atomics</a></li>
<li><a href="Reference/Global_Objects/BigInt.html" title="BigInt is a built-in object that provides a way to represent whole numbers larger than 253 - 1, which is the largest number JavaScript can reliably represent with the Number primitive and represented by the Number.MAX_SAFE_INTEGER constant. BigInt can be used for arbitrarily large integers.">BigInt</a></li>
<li><a href="Reference/Global_Objects/BigInt64Array.html" title="The BigInt64Array typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigInt64Array</a></li>
<li><a href="Reference/Global_Objects/BigUint64Array.html" title="The BigUint64Array typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigUint64Array</a></li>
<li><a href="Reference/Global_Objects/Boolean.html" title="The Boolean object is an object wrapper for a boolean value.">Boolean</a></li>
<li><a href="Reference/Global_Objects/DataView.html" title="The DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform&#39;s endianness.">DataView</a></li>
<li><a href="Reference/Global_Objects/Date.html" title="JavaScript Date objects represent a single moment in time in a platform-independent format.">Date</a></li>
<li><a href="Reference/Global_Objects/Error.html" title="Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.">Error</a></li>
<li><a href="Reference/Global_Objects/EvalError.html" title="The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.">EvalError</a></li>
<li><a href="Reference/Global_Objects/Float32Array.html" title="The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float32Array</a></li>
<li><a href="Reference/Global_Objects/Float64Array.html" title="The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float64Array</a></li>
<li><a href="Reference/Global_Objects/Function.html" title="Every JavaScript function is actually a Function object. This can be seen with the code (function(){}).constructor === Function which returns true.">Function</a></li>
<li><a href="Reference/Global_Objects/Generator.html" title="The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.">Generator</a></li>
<li><a href="Reference/Global_Objects/GeneratorFunction.html" title="The GeneratorFunction constructor creates a new generator function object. In JavaScript every generator function is actually a GeneratorFunction object.">GeneratorFunction</a></li>
<li><a href="Reference/Global_Objects/Infinity.html" title="The global property Infinity is a numeric value representing infinity.">Infinity</a></li>
<li><a href="Reference/Global_Objects/Int16Array.html" title="The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int16Array</a></li>
<li><a href="Reference/Global_Objects/Int32Array.html" title="The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int32Array</a></li>
<li><a href="Reference/Global_Objects/Int8Array.html" title="The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int8Array</a></li>
<li><a href="Reference/Global_Objects/InternalError.html" title="The InternalError object indicates an error that occurred internally in the JavaScript engine.">InternalError</a></li>
<li><a href="Reference/Global_Objects/Intl.html" title="The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The Intl object provides access to several constructors as well as functionality common to the internationalization constructors and other language sensitive functions.">Intl</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator" title="The Intl.Collator objects enable language sensitive string comparison.">Intl.Collator</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat" title="The Intl.DateTimeFormat object is a constructor for objects that enable language-sensitive date and time formatting.">Intl.DateTimeFormat</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DisplayNames" title="The Intl.DisplayNames object is a constructor for objects that enables the consistent translation of language, region and script display names.">Intl.DisplayNames</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ListFormat" title="The Intl.ListFormat object is a constructor for objects that enable language-sensitive list formatting.">Intl.ListFormat</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Locale" title="The Intl.Locale object is a standard built-in property of the Intl object that represents a Unicode locale identifier.">Intl.Locale</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat" title="The Intl.NumberFormat object is a constructor for objects that enable language sensitive number formatting.">Intl.NumberFormat</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules" title="The Intl.PluralRules object enables plural-sensitive formatting and plural-related language rules.">Intl.PluralRules</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat" title="The Intl.RelativeTimeFormat object enables language-sensitive relative time formatting.">Intl.RelativeTimeFormat</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/Iterator.html" title="The Iterator global object is an abstract class providing helper methods, similar to the ones exposed on Array instances.">Iterator</a></li>
<li><a href="Reference/Global_Objects/JSON.html" title="The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can&#39;t be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.">JSON</a></li>
<li><a href="Reference/Global_Objects/Map.html" title="The Map object holds key-value pairs and remembers the original insertion order of the keys.">Map</a></li>
<li><a href="Reference/Global_Objects/Math.html" title="Math is a built-in object that has properties and methods for mathematical constants and functions. Not a function object.">Math</a></li>
<li><a href="Reference/Global_Objects/NaN.html" title="The global NaN property is a value representing Not-A-Number.">NaN</a></li>
<li><a href="Reference/Global_Objects/Number.html" title="The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor. A primitive type object number is created using the Number() function.">Number</a></li>
<li><a href="Reference/Global_Objects/Object.html" title="The Object class represents one of JavaScript&#39;s data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.">Object</a></li>
<li><a href="Reference/Global_Objects/Promise.html" title="The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.">Promise</a></li>
<li><a href="Reference/Global_Objects/Proxy.html" title="The Proxy object is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc).">Proxy</a></li>
<li><a href="Reference/Global_Objects/RangeError.html" title="The RangeError object indicates an error when a value is not in the set or range of allowed values.">RangeError</a></li>
<li><a href="Reference/Global_Objects/ReferenceError.html" title="The ReferenceError object represents an error when a non-existent variable is referenced.">ReferenceError</a></li>
<li><a href="Reference/Global_Objects/Reflect.html" title="Reflect is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of proxy handlers. Reflect is not a function object, so it&#39;s not constructible.">Reflect</a></li>
<li><a href="Reference/Global_Objects/RegExp.html" title="The RegExp object is used for matching text with a pattern.">RegExp</a></li>
<li><a href="Reference/Global_Objects/Set.html" title="The Set object lets you store unique values of any type, whether primitive values or object references.">Set</a></li>
<li><a href="Reference/Global_Objects/SharedArrayBuffer.html" title="The SharedArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. Unlike an ArrayBuffer, a SharedArrayBuffer cannot become detached.">SharedArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/String.html" title="The String global object is a constructor for strings or a sequence of characters.">String</a></li>
<li><a href="Reference/Global_Objects/Symbol.html" title="The data type symbol is a primitive data type. The Symbol() function returns a value of type symbol, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class, but is incomplete as a constructor because it does not support the syntax &quot;new Symbol()&quot;.">Symbol</a></li>
<li><a href="Reference/Global_Objects/SyntaxError.html" title="The SyntaxError object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.">SyntaxError</a></li>
<li><a href="Reference/Global_Objects/TypeError.html" title="The TypeError object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.">TypeError</a></li>
<li><a href="Reference/Global_Objects/TypedArray.html" title="A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.">TypedArray</a></li>
<li><a href="Reference/Global_Objects/URIError.html" title="The URIError object represents an error when a global URI handling function was used in a wrong way.">URIError</a></li>
<li><a href="Reference/Global_Objects/Uint16Array.html" title="The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint16Array</a></li>
<li><a href="Reference/Global_Objects/Uint32Array.html" title="The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint32Array</a></li>
<li><a href="Reference/Global_Objects/Uint8Array.html" title="The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8Array</a></li>
<li><a href="Reference/Global_Objects/Uint8ClampedArray.html" title="The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8ClampedArray</a></li>
<li><a href="Reference/Global_Objects/WeakMap.html" title="The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.">WeakMap</a></li>
<li><a href="Reference/Global_Objects/WeakSet.html" title="The WeakSet object lets you store weakly held objects in a collection.">WeakSet</a></li>
<li><a href="Reference/Global_Objects/WebAssembly.html" title="The WebAssembly JavaScript object acts as the namespace for all WebAssembly-related functionality.">WebAssembly</a></li>
<li><a href="Reference/Global_Objects/decodeURI.html" title="The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or by a similar routine.">decodeURI()</a></li>
<li><a href="Reference/Global_Objects/decodeURIComponent.html" title="The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.">decodeURIComponent()</a></li>
<li><a href="Reference/Global_Objects/encodeURI.html" title="The encodeURI() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURI()</a></li>
<li><a href="Reference/Global_Objects/encodeURIComponent.html" title="The encodeURIComponent() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURIComponent()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/escape.html" title="The escape() function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.">escape()</a></li>
<li><a href="Reference/Global_Objects/eval.html" title="The eval() function evaluates JavaScript code represented as a string.">eval()</a></li>
<li><a href="Reference/Global_Objects/globalThis.html" title="The global globalThis property contains the global this value, which is akin to the global object.">globalThis</a></li>
<li><a href="Reference/Global_Objects/isFinite.html" title="The global isFinite() function determines whether the passed value is a finite number. If  needed, the parameter is first converted to a number.">isFinite()</a></li>
<li><a href="Reference/Global_Objects/isNaN.html" title="The isNaN() function determines whether a value is NaN or not. Note, coercion inside the isNaN function has interesting rules; you may alternatively want to use Number.isNaN(), as defined in ECMAScript 2015.">isNaN()</a></li>
<li><a href="Reference/Global_Objects/null.html" title="The value null represents the intentional absence of any object value. It is one of JavaScript&#39;s primitive values and is treated as falsy for boolean operations.">null</a></li>
<li><a href="Reference/Global_Objects/parseFloat.html" title="The parseFloat() function parses an argument (converting it to a string first if needed) and returns a floating point number.">parseFloat()</a></li>
<li><a href="Reference/Global_Objects/parseInt.html" title="The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).">parseInt()</a></li>
<li><a href="Reference/Global_Objects/undefined.html" title="The global undefined property represents the primitive value undefined. It is one of JavaScript&#39;s primitive types.">undefined</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/unescape.html" title="The unescape() function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Usually, decodeURI or decodeURIComponent are preferred over unescape.">unescape()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><a href="Reference/Global_Objects/uneval.html" title="The uneval() function creates a string representation of the source code of an Object.">uneval()</a></li>
</ol></li>
<li>Expressions &amp; operators
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators" title="Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).">Arithmetic operators</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Array_comprehensions" title="The array comprehension syntax was a JavaScript expression which allowed you to quickly assemble a new array based on an existing one. However, it has been removed from the standard and the Firefox implementation. Do not use it!">Array comprehensions</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators" title="An assignment operator assigns a value to its left operand based on the value of its right operand.">Assignment operators</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" title="Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.">Bitwise operators</a></li>
<li><a href="Reference/Operators/Comma_Operator.html" title="The comma operator evaluates each of its operands (from left to right) and returns the value of the last operand.">Comma operator</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators" title="JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., &lt;=), the operands are first converted to primitives, then to the same type, before comparison.">Comparison operators</a></li>
<li><a href="Reference/Operators/Conditional_Operator.html" title="The conditional (ternary) operator is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy.">Conditional (ternary) operator</a></li>
<li><a href="Reference/Operators/Destructuring_assignment.html" title="The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.">Destructuring assignment</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Expression_closures" title="Expression closures are a shorthand function syntax for writing simple functions.">Expression closures</a></li>
<li><a href="Reference/Operators/function.html" title="The function keyword can be used to define a function inside an expression.">Function expression</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Generator_comprehensions" title="The generator comprehension syntax was a JavaScript expression which allowed you to quickly assemble a new generator function based on an existing iterable object. However, it has been removed from the standard and the Firefox implementation. Do not use it!">Generator comprehensions</a></li>
<li><a href="Reference/Operators/Grouping.html" title="The grouping operator ( ) controls the precedence of evaluation in expressions.">Grouping operator</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Legacy_generator_function" title="The function keyword can be used to define a legacy generator function inside an expression. To make the function a legacy generator, the function body should contain at least one yield expression.">Legacy generator function expression</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators" title="Logical operators are typically used with Boolean (logical) values. When they are, they return a Boolean value. However, the &amp;&amp; and || operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they will return a non-Boolean value.">Logical operators</a></li>
<li><a href="Reference/Operators/Nullish_coalescing_operator.html" title="The nullish coalescing operator (??) is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.">Nullish coalescing operator</a></li>
<li><a href="Reference/Operators/Object_initializer.html" title="Objects can be initialized using new Object(), Object.create(), or using the literal notation (initializer notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).">Object initializer</a></li>
<li><a href="Reference/Operators/Operator_Precedence.html" title="Operator precedence determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.">Operator precedence</a></li>
<li><a href="Reference/Operators/Optional_chaining.html" title="The ?. operator functions similarly to the . chaining operator, except that instead of causing an error if a reference is nullish (null or undefined), the expression short-circuits with a return value of undefined.">Optional chaining</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Operators/Pipeline_operator.html" title="The experimental pipeline operator |&gt; (currently at stage 1) pipes the value of an expression into a function. This allows the creation of chained function calls in a readable manner. The result is syntactic sugar in which a function call with a single argument can be written like this:">Pipeline operator</a></li>
<li><a href="Reference/Operators/Property_Accessors-2.html" title="Property accessors provide access to an object&#39;s properties by using the dot notation or the bracket notation.">Property accessors</a></li>
<li><a href="Reference/Operators/Spread_syntax.html" title="Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.">Spread syntax</a></li>
<li><a href="Reference/Operators/async_function.html" title="The async function keyword can be used to define async functions inside expressions.">async function expression</a></li>
<li><a href="Reference/Operators/await.html" title="The await operator is used to wait for a Promise. It can only be used inside an async function.">await</a></li>
<li><a href="Reference/Operators/class.html" title="The class expression is one way to define a class in ECMAScript 2015. Similar to function expressions, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. ">class expression</a></li>
<li><a href="Reference/Operators/delete.html" title="The JavaScript delete operator removes a property from an object; if no more references to the same property are held, it is eventually released automatically.">delete operator</a></li>
<li><a href="Reference/Operators/function_.html" title="The function* keyword can be used to define a generator function inside an expression.">function* expression</a></li>
<li><a href="Reference/Operators/in.html" title="The in operator returns true if the specified property is in the specified object or its prototype chain.">in operator</a></li>
<li><a href="Reference/Operators/instanceof.html" title="The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object.">instanceof</a></li>
<li><a href="Reference/Operators/new.html" title="The new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.">new operator</a></li>
<li><a href="Reference/Operators/new-2.html" title="The new.target pseudo-property lets you detect whether a function or constructor was called using the new operator. In constructors and functions invoked using the new operator, new.target returns a reference to the constructor or function. In normal function calls, new.target is undefined.">new.target</a></li>
<li><a href="Reference/Operators/super.html" title="The super keyword is used to access and call functions on an object&#39;s parent.">super</a></li>
<li><a href="Reference/Operators/this.html" title="A function&#39;s this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode.">this</a></li>
<li><a href="Reference/Operators/typeof.html" title="The typeof operator returns a string indicating the type of the unevaluated operand.">typeof</a></li>
<li><a href="Reference/Operators/void.html" title="The void operator evaluates the given expression and then returns undefined.">void operator</a></li>
<li><a href="Reference/Operators/yield.html" title="The yield keyword is used to pause and resume a generator function (function* or legacy generator function).">yield</a></li>
<li><a href="Reference/Operators/yield_.html" title="The yield* expression is used to delegate to another generator or iterable object.">yield*</a></li>
</ol></li>
<li>Statements &amp; declarations
<ol>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Legacy_generator_function" title="The legacy generator function statement declares legacy generator functions with the specified parameters.">Legacy generator function</a></li>
<li><a href="Reference/Statements/async_function.html" title="The async function declaration defines an asynchronous function — a function that returns an AsyncFunction object.">async function</a></li>
<li><a href="Reference/Statements/block.html" title="A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of curly brackets and may optionally be labelled:">block</a></li>
<li><a href="Reference/Statements/break.html" title="The break statement terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.">break</a></li>
<li><a href="Reference/Statements/class.html" title="The class declaration creates a new class with a given name using prototype-based inheritance.">class</a></li>
<li><a href="Reference/Statements/const.html" title="Constants are block-scoped, much like variables defined using the let statement. The value of a constant can&#39;t be changed through reassignment, and it can&#39;t be redeclared.">const</a></li>
<li><a href="Reference/Statements/continue.html" title="The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.">continue</a></li>
<li><a href="Reference/Statements/debugger.html" title="The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.">debugger</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/default" title="The default keyword can be used in two situations in JavaScript: within a switch statement, or with an export statement.">default</a></li>
<li><a href="Reference/Statements/do...html" title="The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.">do...while</a></li>
<li><a href="Reference/Statements/Empty.html" title="An empty statement is used to provide no statement, although the JavaScript syntax would expect one.">empty</a></li>
<li><a href="Reference/Statements/export.html" title="The export statement is used when creating JavaScript modules to export functions, objects, or primitive values from the module so they can be used by other programs with the import statement.">export</a></li>
<li><a href="Reference/Statements/for.html" title="The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.">for</a></li>
<li><a href="Reference/Statements/for-await...html" title="The for await...of statement creates a loop iterating over async iterable objects as well as on sync iterables, including: built-in String, Array, Array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined async/sync iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.">for await...of</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in" title="The for each...in statement iterates a specified variable over all values of object&#39;s properties. For each distinct property, a specified statement is executed.">for each...in</a></li>
<li><a href="Reference/Statements/for...html" title="The for...in statement iterates over all enumerable properties of an object that are keyed by strings (ignoring ones keyed by Symbols), including inherited enumerable properties.">for...in</a></li>
<li><a href="Reference/Statements/for..-2.html" title="The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.">for...of</a></li>
<li><a href="Reference/Statements/function.html" title="The function declaration (function statement) defines a function with the specified parameters.">function declaration</a></li>
<li><a href="Reference/Statements/function_.html" title="The function* declaration (function keyword followed by an asterisk) defines a generator function, which returns a Generator object.">function*</a></li>
<li><a href="Reference/Statements/if...html" title="The if statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement can be executed.">if...else</a></li>
<li><a href="Reference/Statements/import.html" title="The static import statement is used to import bindings which are exported by another module. ">import</a></li>
<li><a href="Reference/Statements/import-2.html" title="The import.meta object exposes context-specific metadata to a JavaScript module. It contains information about the module, like the module&#39;s URL.">import.meta</a></li>
<li><a href="Reference/Statements/label.html" title="The labeled statement can be used with break or continue statements. It is prefixing a statement with an identifier which you can refer to.">label</a></li>
<li><a href="Reference/Statements/let.html" title="The let statement declares a block scope local variable, optionally initializing it to a value.">let</a></li>
<li><a href="Reference/Statements/return.html" title="The return statement ends function execution and specifies a value to be returned to the function caller.">return</a></li>
<li><a href="Reference/Statements/switch.html" title="The switch statement evaluates an expression, matching the expression&#39;s value to a case clause, and executes statements associated with that case, as well as statements in cases that follow the matching case.">switch</a></li>
<li><a href="Reference/Statements/throw.html" title="The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won&#39;t be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.">throw</a></li>
<li><a href="Reference/Statements/try...html" title="The try...catch statement marks a block of statements to try and specifies a response should an exception be thrown.">try...catch</a></li>
<li><a href="Reference/Statements/var.html" title="The var statement declares a variable, optionally initializing it to a value.">var</a></li>
<li><a href="Reference/Statements/while.html" title="The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.">while</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Statements/with.html" title="The with statement extends the scope chain for a statement.">with</a></li>
</ol></li>
<li>Functions
<ol>
<li><a href="Reference/Functions/Arrow_functions.html" title="An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords. Arrow function expressions are ill suited as methods, and they cannot be used as constructors.">Arrow function expressions</a></li>
<li><a href="Reference/Functions/Default_parameters.html" title="Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.">Default parameters</a></li>
<li><a href="Reference/Functions/Method_definitions.html" title="Starting with ECMAScript 2015, a shorter syntax for method definitions on objects initializers is introduced. It is a shorthand for a function assigned to the method&#39;s name.">Method definitions</a></li>
<li><a href="Reference/Functions/rest_parameters.html" title="The rest parameter syntax allows us to represent an indefinite number of arguments as an array.">Rest parameters</a></li>
<li><a href="Reference/Functions/arguments.html" title="arguments is an Array-like object accessible inside functions that contains the values of the arguments passed to that function.">The arguments object</a></li>
<li><a href="Reference/Functions/get.html" title="The get syntax binds an object property to a function that will be called when that property is looked up.">getter</a></li>
<li><a href="Reference/Functions/set.html" title="The set syntax binds an object property to a function to be called when there is an attempt to set that property.">setter</a></li>
</ol></li>
<li>Classes
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Class_fields" title="Both static and instance public fields are writable, enumerable, and configurable properties. As such, unlike their private counterparts, they participate in prototype inheritance.">Class fields</a></li>
<li><a href="Reference/Classes/constructor.html" title="The constructor method is a special method for creating and initializing an object created within a class.">constructor</a></li>
<li><a href="Reference/Classes/extends.html" title="The extends keyword is used in class declarations or class expressions to create a class which is a child of another class.">extends</a></li>
<li><a href="Reference/Classes/static.html" title="The static keyword defines a static method for a class. Static methods aren&#39;t called on instances of the class. Instead, they&#39;re called on the class itself.">static</a></li>
</ol></li>
<li>Errors
<ol>
<li><a href="Reference/Errors/Property_access_denied.html" title="There was attempt to access an object for which you have no permission. This is likely an &lt;iframe&gt; element loaded from a different domain for which you violated the same-origin policy.">Error: Permission denied to access property "x"</a></li>
<li><a href="Reference/Errors/Too_much_recursion.html" title="When there are too many function calls, or a function is missing a base case, JavaScript will throw this error.">InternalError: too much recursion</a></li>
<li><a href="Reference/Errors/Not_a_codepoint.html" title="String.fromCodePoint() throws this error when passed NaN values, negative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF (1114111).">RangeError: argument is not a valid code point</a></li>
<li><a href="Reference/Errors/Invalid_array_length.html" title="RangeError">RangeError: invalid array length</a></li>
<li><a href="Reference/Errors/Invalid_date.html" title="RangeError">RangeError: invalid date</a></li>
<li><a href="Reference/Errors/Precision_range.html" title="RangeError">RangeError: precision is out of range</a></li>
<li><a href="Reference/Errors/Bad_radix.html" title="RangeError">RangeError: radix must be an integer</a></li>
<li><a href="Reference/Errors/Resulting_string_too_large.html" title="RangeError">RangeError: repeat count must be less than infinity</a></li>
<li><a href="Reference/Errors/Negative_repetition_count.html" title="RangeError">RangeError: repeat count must be non-negative</a></li>
<li><a href="Reference/Errors/Not_defined.html" title="ReferenceError.">ReferenceError: "x" is not defined</a></li>
<li><a href="Reference/Errors/Undeclared_var.html" title="ReferenceError warning in strict mode only.">ReferenceError: assignment to undeclared variable "x"</a></li>
<li><a href="Reference/Errors/Cant_access_lexical_declaration_before_init.html" title="ReferenceError">ReferenceError: can't access lexical declaration`X' before initialization</a></li>
<li><a href="Reference/Errors/Deprecated_caller_or_arguments_usage.html" title="A strict-mode-only warning that a ReferenceError occurred. JavaScript execution won&#39;t be halted.">ReferenceError: deprecated caller or arguments usage</a></li>
<li><a href="Reference/Errors/Invalid_assignment_left-hand_side.html" title="ReferenceError.">ReferenceError: invalid assignment left-hand side</a></li>
<li><a href="Reference/Errors/Undefined_prop.html" title="(Firefox only) ReferenceError warning which is reported only if javascript.options.strict preference is set to true.">ReferenceError: reference to undefined property "x"</a></li>
<li><a href="Reference/Errors/Deprecated_octal.html" title="SyntaxError in strict mode only.">SyntaxError: "0"-prefixed octal literals and octal escape seq. are deprecated</a></li>
<li><a href="Reference/Errors/Strict_Non_Simple_Params.html" title="SyntaxError.">SyntaxError: "use strict" not allowed in function with non-simple parameters</a></li>
<li><a href="Reference/Errors/Reserved_identifier.html" title="SyntaxError">SyntaxError: "x" is a reserved identifier</a></li>
<li><a href="Reference/Errors/JSON_bad_parse.html" title="SyntaxError">SyntaxError: JSON.parse: bad parsing</a></li>
<li><a href="Reference/Errors/Malformed_formal_parameter.html" title="SyntaxError">SyntaxError: Malformed formal parameter</a></li>
<li><a href="Reference/Errors/Unexpected_token.html" title="SyntaxError">SyntaxError: Unexpected token</a></li>
<li><a href="Reference/Errors/Deprecated_source_map_pragma.html" title="A warning that a SyntaxError occurred. JavaScript execution won&#39;t be halted.">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li>
<li><a href="Reference/Errors/Invalid_for-of_initializer.html" title="SyntaxError">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li>
<li><a href="Reference/Errors/Delete_in_strict_mode.html" title="SyntaxError in strict mode only.">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li>
<li><a href="Reference/Errors/Invalid_for-in_initializer.html" title="SyntaxError in strict mode only.">SyntaxError: for-in loop head declarations may not have initializers</a></li>
<li><a href="Reference/Errors/Unnamed_function_statement.html" title="SyntaxError">SyntaxError: function statement requires a name</a></li>
<li><a href="Reference/Errors/Identifier_after_number.html" title="SyntaxError">SyntaxError: identifier starts immediately after numeric literal</a></li>
<li><a href="Reference/Errors/Illegal_character.html" title="SyntaxError">SyntaxError: illegal character</a></li>
<li><a href="Reference/Errors/Bad_regexp_flag.html" title="SyntaxError">SyntaxError: invalid regular expression flag "x"</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_argument_list.html" title="SyntaxError.">SyntaxError: missing ) after argument list</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_condition.html" title="SyntaxError">SyntaxError: missing ) after condition</a></li>
<li><a href="Reference/Errors/Missing_colon_after_property_id.html" title="SyntaxError">SyntaxError: missing : after property id</a></li>
<li><a href="Reference/Errors/Missing_semicolon_before_statement.html" title="SyntaxError.">SyntaxError: missing ; before statement</a></li>
<li><a href="Reference/Errors/Missing_initializer_in_const.html" title="SyntaxError">SyntaxError: missing = in const declaration</a></li>
<li><a href="Reference/Errors/Missing_bracket_after_list.html" title="SyntaxError.">SyntaxError: missing ] after element list</a></li>
<li><a href="Reference/Errors/Missing_formal_parameter.html" title="SyntaxError">SyntaxError: missing formal parameter</a></li>
<li><a href="Reference/Errors/Missing_name_after_dot_operator.html" title="SyntaxError">SyntaxError: missing name after . operator</a></li>
<li><a href="Reference/Errors/No_variable_name.html" title="SyntaxError">SyntaxError: missing variable name</a></li>
<li><a href="Reference/Errors/Missing_curly_after_function_body.html" title="SyntaxError">SyntaxError: missing } after function body</a></li>
<li><a href="Reference/Errors/Missing_curly_after_property_list.html" title="SyntaxError">SyntaxError: missing } after property list</a></li>
<li><a href="Reference/Errors/Redeclared_parameter.html" title="SyntaxError">SyntaxError: redeclaration of formal parameter "x"</a></li>
<li><a href="Reference/Errors/Bad_return_or_yield.html" title="SyntaxError.">SyntaxError: return not in function</a></li>
<li><a href="Reference/Errors/Equal_as_assign.html" title="(Firefox only) SyntaxError warning which is reported only if javascript.options.strict preference is set to true.">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li>
<li><a href="Reference/Errors/Unterminated_string_literal.html" title="SyntaxError">SyntaxError: unterminated string literal</a></li>
<li><a href="Reference/Errors/No_properties.html" title="TypeError.">TypeError: "x" has no properties</a></li>
<li><a href="Reference/Errors/Unexpected_type.html" title="TypeError.">TypeError: "x" is (not) "y"</a></li>
<li><a href="Reference/Errors/Not_a_constructor.html" title="TypeError">TypeError: "x" is not a constructor</a></li>
<li><a href="Reference/Errors/Not_a_function.html" title="TypeError.">TypeError: "x" is not a function</a></li>
<li><a href="Reference/Errors/No_non-null_object.html" title="TypeError">TypeError: "x" is not a non-null object</a></li>
<li><a href="Reference/Errors/Read-only.html" title="TypeError">TypeError: "x" is read-only</a></li>
<li><a href="Reference/Errors/is_not_iterable.html" title="TypeError">TypeError: 'x' is not iterable</a></li>
<li><a href="Reference/Errors/More_arguments_needed.html" title="TypeError.">TypeError: More arguments needed</a></li>
<li><a href="Reference/Errors/Reduce_of_empty_array_with_no_initial_value.html" title="TypeError">TypeError: Reduce of empty array with no initial value</a></li>
<li><a href="Reference/Errors/Called_on_incompatible_type.html" title="TypeError">TypeError: X.prototype.y called on incompatible type</a></li>
<li><a href="Reference/Errors/Dead_object.html" title="TypeError">TypeError: can't access dead object</a></li>
<li><a href="Reference/Errors/Cant_access_property.html" title="TypeError.">TypeError: can't access property "x" of "y"</a></li>
<li><a href="Reference/Errors/Cant_assign_to_property.html" title="TypeError.">TypeError: can't assign to property "x" on "y": not an object</a></li>
<li><a href="Reference/Errors/Cant_define_property_object_not_extensible.html" title="TypeError">TypeError: can't define property "x": "obj" is not extensible</a></li>
<li><a href="Reference/Errors/Non_configurable_array_element.html" title="TypeError">TypeError: can't delete non-configurable array element</a></li>
<li><a href="Reference/Errors/Cant_redefine_property.html" title="TypeError">TypeError: can't redefine non-configurable property "x"</a></li>
<li><a href="Reference/Errors/in_operator_no_object.html" title="TypeError">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li>
<li><a href="Reference/Errors/Cyclic_object_value.html" title="TypeError">TypeError: cyclic object value</a></li>
<li><a href="Reference/Errors/invalid_right_hand_side_instanceof_operand.html" title="TypeError">TypeError: invalid 'instanceof' operand 'x'</a></li>
<li><a href="Reference/Errors/Array_sort_argument.html" title="TypeError">TypeError: invalid Array.prototype.sort argument</a></li>
<li><a href="Reference/Errors/Typed_array_invalid_arguments.html" title="TypeError">TypeError: invalid arguments</a></li>
<li><a href="Reference/Errors/Invalid_const_assignment.html" title="TypeError">TypeError: invalid assignment to const "x"</a></li>
<li><a href="Reference/Errors/Cant_delete.html" title="TypeError in strict mode only.">TypeError: property "x" is non-configurable and can't be deleted</a></li>
<li><a href="Reference/Errors/Getter_only.html" title="TypeError in strict mode only.">TypeError: setting getter-only property "x"</a></li>
<li><a href="Reference/Errors/Var_hides_argument.html" title="TypeError warning in strict mode only.">TypeError: variable "x" redeclares argument</a></li>
<li><a href="Reference/Errors/Malformed_URI.html" title="URIError">URIError: malformed URI sequence</a></li>
<li><a href="Reference/Errors/Already_has_pragma.html" title="A warning. JavaScript execution won&#39;t be halted.">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li>
<li><a href="Reference/Errors/Bad_octal.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li>
<li><a href="Reference/Errors/Deprecated_toLocaleFormat.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: Date.prototype.toLocaleFormat is deprecated</a></li>
<li><a href="Reference/Errors/For-each-in_loops_are_deprecated.html" title="Warning">Warning: JavaScript 1.6's for-each-in loops are deprecated</a></li>
<li><a href="Reference/Errors/Deprecated_String_generics.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: String.x is deprecated; use String.prototype.x instead</a></li>
<li><a href="Reference/Errors/Deprecated_expression_closures.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: expression closures are deprecated</a></li>
<li><a href="Reference/Errors/Stmt_after_return.html" title="Warning">Warning: unreachable code after return statement</a></li>
</ol></li>
<li>Misc
<ol>
<li><a href="JavaScript_technologies_overview.html">JavaScript technologies overview</a></li>
<li><a href="Reference/Lexical_grammar.html">Lexical grammar</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Enumerability_and_ownership_of_properties.html">Enumerability and ownership of properties</a></li>
<li><a href="Reference/Iteration_protocols.html">Iteration protocols</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Reference/Strict_mode/Transitioning_to_strict_mode.html">Transitioning to strict mode</a></li>
<li><a href="Reference/Template_literals.html">Template literals</a></li>
<li><a href="Reference/Deprecated_and_obsolete_features.html">Deprecated features</a></li>
</ol></li>
</ol>
</div>
</div>
</div>
</div>
</div>
<section class="newsletter-container">
<div id="newsletter-form-container" class="newsletter">
<section class="newsletter-head">
<h2 id="learn-the-best-of-web-development-6" class="newsletter-teaser">Learn the best of web development</h2>
<p>Get the latest and greatest from MDN delivered straight to your inbox.</p>
<p>The newsletter is offered in English only at the moment.</p>
</section>
<div class="form-group newsletter-group-email">
E-mail
</div>
<div id="newsletter-privacy" class="form-group form-group-agree newsletter-group-privacy" data-aria-hidden="false">
I’m okay with Mozilla handling my info as explained in this <a href="../../../../../external.html?link=https://www.mozilla.org/privacy/">Privacy Policy</a>.
</div>
<div class="newsletter-group-submit">
Sign up now
</div>
<span>Hide Newsletter Sign-up</span>
</div>
</section>
<div class="content-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/" class="nav-footer-logo">MDN Web Docs</a>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Web Technologies</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn Web Development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/About">About MDN</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Feedback</a></li>
</ul>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/">About</a></li>
<li><a href="../../../../../external.html?link=https://shop.spreadshirt.com/mdn-store/">MDN Web Docs Store</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/contact/">Contact Us</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/firefox/?utm_source=developer.mozilla.org&amp;utm_campaign=footer&amp;utm_medium=referral">Firefox</a></li>
</ul>
<div class="social social-mdn">
<h4 id="mdn-6">MDN</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<div class="social social-moz">
<h4 id="mozilla-6">Mozilla</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<p>© 2005-2020 Mozilla and individual contributors. Content is available under <a href="../../../../../external.html?link=https://developer.mozilla.org/docs/MDN/About#Copyrights_and_licenses">these licenses</a>.</p>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/legal/terms/mozilla">Terms</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/">Privacy</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/#cookies">Cookies</a></li>
</ul>
</div>
</div>
<div id="auth-modal" class="modal hidden">
<section class="auth-providers" tabindex="-1" data-role="dialog" data-aria-modal="true" data-aria-labelledby="modal-main-heading">
<h2 id="modal-main-heading">Sign In</h2>
<p>Sign in to enjoy the benefits of an MDN account. If you haven’t already created an account, you will be prompted to do so after signing in.</p>
<div class="auth-button-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/users/github/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FGuide" class="github-auth">Sign in with Github</a> <a href="../../../../../external.html?link=https://developer.mozilla.org/users/google/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FGuide" class="google-auth">Sign in with Google</a>
</div>
<span>Close modal</span>
</section>
</div>
<div id="react-container" data-component-name="SPA">
<div class="loading-bar">

</div>
<ul>
<li><a href="#content" id="skip-main">Skip to main content</a></li>
<li><a href="#language" id="skip-language">Select language</a></li>
<li><a href="#main-q" id="skip-search">Skip to search</a></li>
</ul>
<ul>
<li>Technologies
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Technologies Overview</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide/Graphics">Graphics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API">APIs / DOM</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions">Browser Extensions</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/MathML">MathML</a></li>
</ul></li>
<li>References &amp; Guides
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn web development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Tutorials">Tutorials</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Reference">References</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide">Developer Guides</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Accessibility">Accessibility</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Games">Game development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">...more docs</a></li>
</ul></li>
<li>Feedback
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Send Feedback</a></li>
<li><a href="../../../../../external.html?link=https://support.mozilla.org/">Get Firefox help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://stackoverflow.com/">Get web development help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Community">Join the MDN community</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/sprints/issues/new?template=issue-template.md&amp;projects=mdn/sprints/2&amp;labels=user-report&amp;title=/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">Report a content problem 🌐</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/kuma/issues/new/choose">Report an issue 🌐</a></li>
</ul></li>
</ul>
<div class="header-search">
Search MDN
<span>Open search</span>
</div>
<div data-role="main">
<div class="titlebar-container">
<div class="titlebar">

</div>
</div>
<div class="full-width-row-container">
<div class="max-content-width-container">
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web" class="breadcrumb-chevron"><span class="pre-text">See </span><span data-property="name">Web technology for developers</span></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript" class="breadcrumb-previous"><span class="pre-text">See </span><span data-property="name">JavaScript</span></a></li>
<li><a href="Inheritance_and_the_prototype_chain.html" class="crumb-current-page"><span data-property="name" data-aria-current="page">Inheritance and the prototype chain</span></a></li>
</ol>
<div class="dropdown-container language-menu">
English<span class="dropdown-arrow-down" data-aria-hidden="true">▼</span>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/bg/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" title="Bulgarian">Български</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/bn/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" title="Bengali">বাংলা</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ca/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" title="Catalan">Català</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/de/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" title="German">Deutsch</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/es/docs/Web/JavaScript/Herencia_y_la_cadena_de_protipos" title="Spanish">Español</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/fa/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" title="Persian">فارسی</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/fr/docs/Web/JavaScript/Héritage_et_chaîne_de_prototypes" title="French">Français</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/id/docs/Web/JavaScript/Inheritance_dan_prototype_chain" title="Indonesian">Bahasa Indonesia</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/it/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" title="Italian">Italiano</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ja/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" title="Japanese">日本語</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain" title="Korean">한국어</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pl/docs/Web/JavaScript/dziedziczenie_lancuch_prototypow" title="Polish">Polski</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain" title="Portuguese (Brazilian)">Português (do Brasil)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ru/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" title="Russian">Русский</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/tr/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" title="Turkish">Türkçe</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/uk/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" title="Ukrainian">Українська</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" title="Chinese (Simplified)">中文 (简体)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" title="Chinese (Traditional)">正體中文 (繁體)</a></li>
<li><a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain$locales" id="translations-add">Add a translation</a></li>
</ul>
</div>
</div>
</div>
<div class="wiki-left-present content-layout">
<div id="content" class="article text-content">
<div>

</div>
<p>JavaScript is a bit confusing for developers experienced in class-based languages (like Java or C++), as it is dynamic and does not provide a <code>class</code> implementation per se (the <code>class</code> keyword is introduced in ES2015, but is syntactical sugar, JavaScript remains prototype-based).</p>
<p>When it comes to inheritance, JavaScript only has one construct: objects. Each object has a private property which holds a link to another object called its <strong>prototype</strong>. That prototype object has a prototype of its own, and so on until an object is reached with <code>null</code> as its prototype. By definition, <code>null</code> has no prototype, and acts as the final link in this <strong>prototype chain</strong>.</p>
<p>Nearly all objects in JavaScript are instances of <a href="Reference/Global_Objects/Object.html"><code>Object</code></a> which sits on the top of a prototype chain.</p>
<p>While this confusion is often considered to be one of JavaScript's weaknesses, the prototypal inheritance model itself is, in fact, more powerful than the classic model. It is, for example, fairly trivial to build a classic model on top of a prototypal model.</p>
<h2 id="Inheritance_with_the_prototype_chain">Inheritance with the prototype chain</h2>
<h3 id="Inheriting_properties">Inheriting properties</h3>
<p>JavaScript objects are dynamic "bags" of properties (referred to as <strong>own properties</strong>). JavaScript objects have a link to a prototype object. When trying to access a property of an object, the property will not only be sought on the object but on the prototype of the object, the prototype of the prototype, and so on until either a property with a matching name is found or the end of the prototype chain is reached.</p>
<div class="note">
<p>Following the ECMAScript standard, the notation <code>someObject.[[Prototype]]</code> is used to designate the prototype of <code>someObject</code>. Since ECMAScript 2015, the <code>[[Prototype]]</code> is accessed using the accessors <a href="Reference/Global_Objects/Object/getPrototypeOf.html"><code>Object.getPrototypeOf()</code></a> and <a href="Reference/Global_Objects/Object/setPrototypeOf.html"><code>Object.setPrototypeOf()</code></a>. This is equivalent to the JavaScript property <code>__proto__</code> which is non-standard but de-facto implemented by many browsers.</p>
<p>It should not be confused with the <code>func.prototype</code> property of functions, which instead specifies the <code>[[Prototype]]</code> to be assigned to all <em>instances</em> of objects created by the given function when used as a constructor. The <code>Object.prototype</code> property represents the <a href="Reference/Global_Objects/Object.html"><code>Object</code></a> prototype object.</p>
</div>
<p>Here is what happens when trying to access a property:</p>
<div class="sourceCode" id="cb114"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb114-1" title="1"><span class="co">// Let&#39;s create an object o from function f with its own properties a and b:</span></a>
<a class="sourceLine" id="cb114-2" title="2"><span class="kw">let</span> f <span class="op">=</span> <span class="kw">function</span> () <span class="op">{</span></a>
<a class="sourceLine" id="cb114-3" title="3">   <span class="kw">this</span>.<span class="at">a</span> <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></a>
<a class="sourceLine" id="cb114-4" title="4">   <span class="kw">this</span>.<span class="at">b</span> <span class="op">=</span> <span class="dv">2</span><span class="op">;</span></a>
<a class="sourceLine" id="cb114-5" title="5"><span class="op">}</span></a>
<a class="sourceLine" id="cb114-6" title="6"><span class="kw">let</span> o <span class="op">=</span> <span class="kw">new</span> <span class="at">f</span>()<span class="op">;</span> <span class="co">// {a: 1, b: 2}</span></a>
<a class="sourceLine" id="cb114-7" title="7"></a>
<a class="sourceLine" id="cb114-8" title="8"><span class="co">// add properties in f function&#39;s prototype</span></a>
<a class="sourceLine" id="cb114-9" title="9"><span class="va">f</span>.<span class="va">prototype</span>.<span class="at">b</span> <span class="op">=</span> <span class="dv">3</span><span class="op">;</span></a>
<a class="sourceLine" id="cb114-10" title="10"><span class="va">f</span>.<span class="va">prototype</span>.<span class="at">c</span> <span class="op">=</span> <span class="dv">4</span><span class="op">;</span></a>
<a class="sourceLine" id="cb114-11" title="11"></a>
<a class="sourceLine" id="cb114-12" title="12"><span class="co">// do not set the prototype f.prototype = {b:3,c:4}; this will break the prototype chain</span></a>
<a class="sourceLine" id="cb114-13" title="13"><span class="co">// o.[[Prototype]] has properties b and c.</span></a>
<a class="sourceLine" id="cb114-14" title="14"><span class="co">// o.[[Prototype]].[[Prototype]] is Object.prototype.</span></a>
<a class="sourceLine" id="cb114-15" title="15"><span class="co">// Finally, o.[[Prototype]].[[Prototype]].[[Prototype]] is null.</span></a>
<a class="sourceLine" id="cb114-16" title="16"><span class="co">// This is the end of the prototype chain, as null,</span></a>
<a class="sourceLine" id="cb114-17" title="17"><span class="co">// by definition, has no [[Prototype]].</span></a>
<a class="sourceLine" id="cb114-18" title="18"><span class="co">// Thus, the full prototype chain looks like:</span></a>
<a class="sourceLine" id="cb114-19" title="19"><span class="co">// {a: 1, b: 2} ---&gt; {b: 3, c: 4} ---&gt; Object.prototype ---&gt; null</span></a>
<a class="sourceLine" id="cb114-20" title="20"></a>
<a class="sourceLine" id="cb114-21" title="21"><span class="va">console</span>.<span class="at">log</span>(<span class="va">o</span>.<span class="at">a</span>)<span class="op">;</span> <span class="co">// 1</span></a>
<a class="sourceLine" id="cb114-22" title="22"><span class="co">// Is there an &#39;a&#39; own property on o? Yes, and its value is 1.</span></a>
<a class="sourceLine" id="cb114-23" title="23"></a>
<a class="sourceLine" id="cb114-24" title="24"><span class="va">console</span>.<span class="at">log</span>(<span class="va">o</span>.<span class="at">b</span>)<span class="op">;</span> <span class="co">// 2</span></a>
<a class="sourceLine" id="cb114-25" title="25"><span class="co">// Is there a &#39;b&#39; own property on o? Yes, and its value is 2.</span></a>
<a class="sourceLine" id="cb114-26" title="26"><span class="co">// The prototype also has a &#39;b&#39; property, but it&#39;s not visited. </span></a>
<a class="sourceLine" id="cb114-27" title="27"><span class="co">// This is called Property Shadowing</span></a>
<a class="sourceLine" id="cb114-28" title="28"></a>
<a class="sourceLine" id="cb114-29" title="29"><span class="va">console</span>.<span class="at">log</span>(<span class="va">o</span>.<span class="at">c</span>)<span class="op">;</span> <span class="co">// 4</span></a>
<a class="sourceLine" id="cb114-30" title="30"><span class="co">// Is there a &#39;c&#39; own property on o? No, check its prototype.</span></a>
<a class="sourceLine" id="cb114-31" title="31"><span class="co">// Is there a &#39;c&#39; own property on o.[[Prototype]]? Yes, its value is 4.</span></a>
<a class="sourceLine" id="cb114-32" title="32"></a>
<a class="sourceLine" id="cb114-33" title="33"><span class="va">console</span>.<span class="at">log</span>(<span class="va">o</span>.<span class="at">d</span>)<span class="op">;</span> <span class="co">// undefined</span></a>
<a class="sourceLine" id="cb114-34" title="34"><span class="co">// Is there a &#39;d&#39; own property on o? No, check its prototype.</span></a>
<a class="sourceLine" id="cb114-35" title="35"><span class="co">// Is there a &#39;d&#39; own property on o.[[Prototype]]? No, check its prototype.</span></a>
<a class="sourceLine" id="cb114-36" title="36"><span class="co">// o.[[Prototype]].[[Prototype]] is Object.prototype and there is no &#39;d&#39; property by default, check its prototype.</span></a>
<a class="sourceLine" id="cb114-37" title="37"><span class="co">// o.[[Prototype]].[[Prototype]].[[Prototype]] is null, stop searching,</span></a>
<a class="sourceLine" id="cb114-38" title="38"><span class="co">// no property found, return undefined.</span></a></code></pre></div>
<p><a href="../../../../../external.html?link=https://repl.it/@khaled_hossain_code/prototype" class="external">Code Link</a></p>
<p>Setting a property to an object creates an own property. The only exception to the getting and setting behavior rules is when there is an inherited property with a <a href="Guide/Working_with_Objects.html#Defining_getters_and_setters">getter or a setter</a>.</p>
<h3 id="Inheriting_methods">Inheriting "methods"</h3>
<p>JavaScript does not have "methods" in the form that class-based languages define them. In JavaScript, any function can be added to an object in the form of a property. An inherited function acts just as any other property, including property shadowing as shown above (in this case, a form of <em>method overriding</em>).</p>
<p>When an inherited function is executed, the value of <a href="Reference/Operators/this.html"><code>this</code></a> points to the inheriting object, not to the prototype object where the function is an own property.</p>
<div class="sourceCode" id="cb115"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb115-1" title="1"><span class="kw">var</span> o <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb115-2" title="2">  <span class="dt">a</span><span class="op">:</span> <span class="dv">2</span><span class="op">,</span></a>
<a class="sourceLine" id="cb115-3" title="3">  <span class="dt">m</span><span class="op">:</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb115-4" title="4">    <span class="cf">return</span> <span class="kw">this</span>.<span class="at">a</span> <span class="op">+</span> <span class="dv">1</span><span class="op">;</span></a>
<a class="sourceLine" id="cb115-5" title="5">  <span class="op">}</span></a>
<a class="sourceLine" id="cb115-6" title="6"><span class="op">};</span></a>
<a class="sourceLine" id="cb115-7" title="7"></a>
<a class="sourceLine" id="cb115-8" title="8"><span class="va">console</span>.<span class="at">log</span>(<span class="va">o</span>.<span class="at">m</span>())<span class="op">;</span> <span class="co">// 3</span></a>
<a class="sourceLine" id="cb115-9" title="9"><span class="co">// When calling o.m in this case, &#39;this&#39; refers to o</span></a>
<a class="sourceLine" id="cb115-10" title="10"></a>
<a class="sourceLine" id="cb115-11" title="11"><span class="kw">var</span> p <span class="op">=</span> <span class="va">Object</span>.<span class="at">create</span>(o)<span class="op">;</span></a>
<a class="sourceLine" id="cb115-12" title="12"><span class="co">// p is an object that inherits from o</span></a>
<a class="sourceLine" id="cb115-13" title="13"></a>
<a class="sourceLine" id="cb115-14" title="14"><span class="va">p</span>.<span class="at">a</span> <span class="op">=</span> <span class="dv">4</span><span class="op">;</span> <span class="co">// creates a property &#39;a&#39; on p</span></a>
<a class="sourceLine" id="cb115-15" title="15"><span class="va">console</span>.<span class="at">log</span>(<span class="va">p</span>.<span class="at">m</span>())<span class="op">;</span> <span class="co">// 5</span></a>
<a class="sourceLine" id="cb115-16" title="16"><span class="co">// when p.m is called, &#39;this&#39; refers to p.</span></a>
<a class="sourceLine" id="cb115-17" title="17"><span class="co">// So when p inherits the function m of o, </span></a>
<a class="sourceLine" id="cb115-18" title="18"><span class="co">// &#39;this.a&#39; means p.a, the property &#39;a&#39; of p</span></a>
<a class="sourceLine" id="cb115-19" title="19"></a></code></pre></div>
<h2 id="Using_prototypes_in_JavaScript">Using prototypes in JavaScript</h2>
<p>Let's look at what happens behind the scenes in a bit more detail.</p>
<p>In JavaScript, as mentioned above, functions are able to have properties. All functions have a special property named <code>prototype</code>. Please note that the code below is free-standing (it is safe to assume there is no other JavaScript on the webpage other than the below code). For the best learning experience, it is highly recommended that you open a console, navigate to the "console" tab, copy-and-paste in the below JavaScript code, and run it by pressing the Enter/Return key. (The console is included in most web browser's Developer Tools. More information is available for <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Tools">Firefox Developer Tools</a>, <a href="../../../../../external.html?link=https://developers.google.com/web/tools/chrome-devtools/" class="external">Chrome DevTools</a>, and <a href="../../../../../external.html?link=https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide" class="external">Edge DevTools</a>.)</p>
<div class="sourceCode" id="cb116"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb116-1" title="1"><span class="kw">function</span> <span class="at">doSomething</span>()<span class="op">{}</span></a>
<a class="sourceLine" id="cb116-2" title="2"><span class="va">console</span>.<span class="at">log</span>( <span class="va">doSomething</span>.<span class="at">prototype</span> )<span class="op">;</span></a>
<a class="sourceLine" id="cb116-3" title="3"><span class="co">//  It does not matter how you declare the function, a</span></a>
<a class="sourceLine" id="cb116-4" title="4"><span class="co">//  function in JavaScript will always have a default</span></a>
<a class="sourceLine" id="cb116-5" title="5"><span class="co">//  prototype property.</span></a>
<a class="sourceLine" id="cb116-6" title="6"><span class="co">//  (Ps: There is one exception that arrow function doesn&#39;t have a default prototype property)</span></a>
<a class="sourceLine" id="cb116-7" title="7"><span class="kw">var</span> doSomething <span class="op">=</span> <span class="kw">function</span>()<span class="op">{};</span> </a>
<a class="sourceLine" id="cb116-8" title="8"><span class="va">console</span>.<span class="at">log</span>( <span class="va">doSomething</span>.<span class="at">prototype</span> )<span class="op">;</span></a></code></pre></div>
<p>As seen above, <code>doSomething()</code> has a default <code>prototype</code> property, as demonstrated by the console. After running this code, the console should have displayed an object that looks similar to this.</p>
<div class="sourceCode" id="cb117"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb117-1" title="1"><span class="op">{</span></a>
<a class="sourceLine" id="cb117-2" title="2">    <span class="dt">constructor</span><span class="op">:</span> ƒ <span class="at">doSomething</span>()<span class="op">,</span></a>
<a class="sourceLine" id="cb117-3" title="3">    <span class="dt">__proto__</span><span class="op">:</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb117-4" title="4">        <span class="dt">constructor</span><span class="op">:</span> ƒ <span class="at">Object</span>()<span class="op">,</span></a>
<a class="sourceLine" id="cb117-5" title="5">        <span class="dt">hasOwnProperty</span><span class="op">:</span> ƒ <span class="at">hasOwnProperty</span>()<span class="op">,</span></a>
<a class="sourceLine" id="cb117-6" title="6">        <span class="dt">isPrototypeOf</span><span class="op">:</span> ƒ <span class="at">isPrototypeOf</span>()<span class="op">,</span></a>
<a class="sourceLine" id="cb117-7" title="7">        <span class="dt">propertyIsEnumerable</span><span class="op">:</span> ƒ <span class="at">propertyIsEnumerable</span>()<span class="op">,</span></a>
<a class="sourceLine" id="cb117-8" title="8">        <span class="dt">toLocaleString</span><span class="op">:</span> ƒ <span class="at">toLocaleString</span>()<span class="op">,</span></a>
<a class="sourceLine" id="cb117-9" title="9">        <span class="dt">toString</span><span class="op">:</span> ƒ <span class="at">toString</span>()<span class="op">,</span></a>
<a class="sourceLine" id="cb117-10" title="10">        <span class="dt">valueOf</span><span class="op">:</span> ƒ <span class="at">valueOf</span>()</a>
<a class="sourceLine" id="cb117-11" title="11">    <span class="op">}</span></a>
<a class="sourceLine" id="cb117-12" title="12"><span class="op">}</span></a></code></pre></div>
<p>We can add properties to the prototype of <code>doSomething()</code>, as shown below.</p>
<div class="sourceCode" id="cb118"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb118-1" title="1"><span class="kw">function</span> <span class="at">doSomething</span>()<span class="op">{}</span></a>
<a class="sourceLine" id="cb118-2" title="2"><span class="va">doSomething</span>.<span class="va">prototype</span>.<span class="at">foo</span> <span class="op">=</span> <span class="st">&quot;bar&quot;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb118-3" title="3"><span class="va">console</span>.<span class="at">log</span>( <span class="va">doSomething</span>.<span class="at">prototype</span> )<span class="op">;</span></a></code></pre></div>
<p>This results in:</p>
<div class="sourceCode" id="cb119"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb119-1" title="1"><span class="op">{</span></a>
<a class="sourceLine" id="cb119-2" title="2">    <span class="dt">foo</span><span class="op">:</span> <span class="st">&quot;bar&quot;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb119-3" title="3">    <span class="dt">constructor</span><span class="op">:</span> ƒ <span class="at">doSomething</span>()<span class="op">,</span></a>
<a class="sourceLine" id="cb119-4" title="4">    <span class="dt">__proto__</span><span class="op">:</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb119-5" title="5">        <span class="dt">constructor</span><span class="op">:</span> ƒ <span class="at">Object</span>()<span class="op">,</span></a>
<a class="sourceLine" id="cb119-6" title="6">        <span class="dt">hasOwnProperty</span><span class="op">:</span> ƒ <span class="at">hasOwnProperty</span>()<span class="op">,</span></a>
<a class="sourceLine" id="cb119-7" title="7">        <span class="dt">isPrototypeOf</span><span class="op">:</span> ƒ <span class="at">isPrototypeOf</span>()<span class="op">,</span></a>
<a class="sourceLine" id="cb119-8" title="8">        <span class="dt">propertyIsEnumerable</span><span class="op">:</span> ƒ <span class="at">propertyIsEnumerable</span>()<span class="op">,</span></a>
<a class="sourceLine" id="cb119-9" title="9">        <span class="dt">toLocaleString</span><span class="op">:</span> ƒ <span class="at">toLocaleString</span>()<span class="op">,</span></a>
<a class="sourceLine" id="cb119-10" title="10">        <span class="dt">toString</span><span class="op">:</span> ƒ <span class="at">toString</span>()<span class="op">,</span></a>
<a class="sourceLine" id="cb119-11" title="11">        <span class="dt">valueOf</span><span class="op">:</span> ƒ <span class="at">valueOf</span>()</a>
<a class="sourceLine" id="cb119-12" title="12">    <span class="op">}</span></a>
<a class="sourceLine" id="cb119-13" title="13"><span class="op">}</span></a></code></pre></div>
<p>We can now use the <code>new</code> operator to create an instance of <code>doSomething()</code> based on this prototype. To use the new operator, simply call the function normally except prefix it with <code>new</code>. Calling a function with the <code>new</code> operator returns an object that is an instance of the function. Properties can then be added onto this object.</p>
<p>Try the following code:</p>
<div class="sourceCode" id="cb120"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb120-1" title="1"><span class="kw">function</span> <span class="at">doSomething</span>()<span class="op">{}</span></a>
<a class="sourceLine" id="cb120-2" title="2"><span class="va">doSomething</span>.<span class="va">prototype</span>.<span class="at">foo</span> <span class="op">=</span> <span class="st">&quot;bar&quot;</span><span class="op">;</span> <span class="co">// add a property onto the prototype</span></a>
<a class="sourceLine" id="cb120-3" title="3"><span class="kw">var</span> doSomeInstancing <span class="op">=</span> <span class="kw">new</span> <span class="at">doSomething</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb120-4" title="4"><span class="va">doSomeInstancing</span>.<span class="at">prop</span> <span class="op">=</span> <span class="st">&quot;some value&quot;</span><span class="op">;</span> <span class="co">// add a property onto the object</span></a>
<a class="sourceLine" id="cb120-5" title="5"><span class="va">console</span>.<span class="at">log</span>( doSomeInstancing )<span class="op">;</span></a></code></pre></div>
<p>This results in an output similar to the following:</p>
<div class="sourceCode" id="cb121"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb121-1" title="1"><span class="op">{</span></a>
<a class="sourceLine" id="cb121-2" title="2">    <span class="dt">prop</span><span class="op">:</span> <span class="st">&quot;some value&quot;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb121-3" title="3">    <span class="dt">__proto__</span><span class="op">:</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb121-4" title="4">        <span class="dt">foo</span><span class="op">:</span> <span class="st">&quot;bar&quot;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb121-5" title="5">        <span class="dt">constructor</span><span class="op">:</span> ƒ <span class="at">doSomething</span>()<span class="op">,</span></a>
<a class="sourceLine" id="cb121-6" title="6">        <span class="dt">__proto__</span><span class="op">:</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb121-7" title="7">            <span class="dt">constructor</span><span class="op">:</span> ƒ <span class="at">Object</span>()<span class="op">,</span></a>
<a class="sourceLine" id="cb121-8" title="8">            <span class="dt">hasOwnProperty</span><span class="op">:</span> ƒ <span class="at">hasOwnProperty</span>()<span class="op">,</span></a>
<a class="sourceLine" id="cb121-9" title="9">            <span class="dt">isPrototypeOf</span><span class="op">:</span> ƒ <span class="at">isPrototypeOf</span>()<span class="op">,</span></a>
<a class="sourceLine" id="cb121-10" title="10">            <span class="dt">propertyIsEnumerable</span><span class="op">:</span> ƒ <span class="at">propertyIsEnumerable</span>()<span class="op">,</span></a>
<a class="sourceLine" id="cb121-11" title="11">            <span class="dt">toLocaleString</span><span class="op">:</span> ƒ <span class="at">toLocaleString</span>()<span class="op">,</span></a>
<a class="sourceLine" id="cb121-12" title="12">            <span class="dt">toString</span><span class="op">:</span> ƒ <span class="at">toString</span>()<span class="op">,</span></a>
<a class="sourceLine" id="cb121-13" title="13">            <span class="dt">valueOf</span><span class="op">:</span> ƒ <span class="at">valueOf</span>()</a>
<a class="sourceLine" id="cb121-14" title="14">        <span class="op">}</span></a>
<a class="sourceLine" id="cb121-15" title="15">    <span class="op">}</span></a>
<a class="sourceLine" id="cb121-16" title="16"><span class="op">}</span></a></code></pre></div>
<p>As seen above, the <code>__proto__</code> of <code>doSomeInstancing</code> is <code>doSomething.prototype</code>. But, what does this do? When you access a property of <code>doSomeInstancing</code>, the browser first looks to see if <code>doSomeInstancing</code> has that property.</p>
<p>If <code>doSomeInstancing</code> does not have the property, then the browser looks for the property in the <code>__proto__</code> of <code>doSomeInstancing</code> (a.k.a. doSomething.prototype). If the <code>__proto__</code> of doSomeInstancing has the property being looked for, then that property on the <code>__proto__</code> of doSomeInstancing is used.</p>
<p>Otherwise, if the <code>__proto__</code> of doSomeInstancing does not have the property, then the <code>__proto__</code> of the <code>__proto__</code> of doSomeInstancing is checked for the property. By default, the <code>__proto__</code> of any function's prototype property is <code>window.Object.prototype</code>. So, the <code>__proto__</code> of the <code>__proto__</code> of doSomeInstancing (a.k.a. the <code>__proto__</code> of doSomething.prototype (a.k.a. <code>Object.prototype</code>)) is then looked through for the property being searched for.</p>
<p>If the property is not found in the <code>__proto__</code> of the <code>__proto__</code> of doSomeInstancing, then the <code>__proto__</code> of the <code>__proto__</code> of the <code>__proto__</code> of doSomeInstancing is looked through. However, there is a problem: the <code>__proto__</code> of the <code>__proto__</code> of the <code>__proto__</code> of doSomeInstancing does not exist. Then, and only then, after the entire prototype chain of <code>__proto__</code>'s is looked through, and there are no more <code>__proto__</code>s does the browser assert that the property does not exist and conclude that the value at the property is <code>undefined</code>.</p>
<p>Let's try entering some more code into the console:</p>
<div class="sourceCode" id="cb122"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb122-1" title="1"><span class="kw">function</span> <span class="at">doSomething</span>()<span class="op">{}</span></a>
<a class="sourceLine" id="cb122-2" title="2"><span class="va">doSomething</span>.<span class="va">prototype</span>.<span class="at">foo</span> <span class="op">=</span> <span class="st">&quot;bar&quot;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb122-3" title="3"><span class="kw">var</span> doSomeInstancing <span class="op">=</span> <span class="kw">new</span> <span class="at">doSomething</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb122-4" title="4"><span class="va">doSomeInstancing</span>.<span class="at">prop</span> <span class="op">=</span> <span class="st">&quot;some value&quot;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb122-5" title="5"><span class="va">console</span>.<span class="at">log</span>(<span class="st">&quot;doSomeInstancing.prop:      &quot;</span> <span class="op">+</span> <span class="va">doSomeInstancing</span>.<span class="at">prop</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb122-6" title="6"><span class="va">console</span>.<span class="at">log</span>(<span class="st">&quot;doSomeInstancing.foo:       &quot;</span> <span class="op">+</span> <span class="va">doSomeInstancing</span>.<span class="at">foo</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb122-7" title="7"><span class="va">console</span>.<span class="at">log</span>(<span class="st">&quot;doSomething.prop:           &quot;</span> <span class="op">+</span> <span class="va">doSomething</span>.<span class="at">prop</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb122-8" title="8"><span class="va">console</span>.<span class="at">log</span>(<span class="st">&quot;doSomething.foo:            &quot;</span> <span class="op">+</span> <span class="va">doSomething</span>.<span class="at">foo</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb122-9" title="9"><span class="va">console</span>.<span class="at">log</span>(<span class="st">&quot;doSomething.prototype.prop: &quot;</span> <span class="op">+</span> <span class="va">doSomething</span>.<span class="va">prototype</span>.<span class="at">prop</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb122-10" title="10"><span class="va">console</span>.<span class="at">log</span>(<span class="st">&quot;doSomething.prototype.foo:  &quot;</span> <span class="op">+</span> <span class="va">doSomething</span>.<span class="va">prototype</span>.<span class="at">foo</span>)<span class="op">;</span></a></code></pre></div>
<p>This results in the following:</p>
<div class="sourceCode" id="cb123"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb123-1" title="1"><span class="va">doSomeInstancing</span>.<span class="at">prop</span><span class="op">:</span>      some value</a>
<a class="sourceLine" id="cb123-2" title="2"><span class="va">doSomeInstancing</span>.<span class="at">foo</span><span class="op">:</span>       bar</a>
<a class="sourceLine" id="cb123-3" title="3"><span class="va">doSomething</span>.<span class="at">prop</span><span class="op">:</span>           <span class="kw">undefined</span></a>
<a class="sourceLine" id="cb123-4" title="4"><span class="va">doSomething</span>.<span class="at">foo</span><span class="op">:</span>            <span class="kw">undefined</span></a>
<a class="sourceLine" id="cb123-5" title="5"><span class="va">doSomething</span>.<span class="va">prototype</span>.<span class="at">prop</span><span class="op">:</span> <span class="kw">undefined</span></a>
<a class="sourceLine" id="cb123-6" title="6"><span class="va">doSomething</span>.<span class="va">prototype</span>.<span class="at">foo</span><span class="op">:</span>  bar</a></code></pre></div>
<h2 id="Different_ways_to_create_objects_and_the_resulting_prototype_chain">Different ways to create objects and the resulting prototype chain</h2>
<h3 id="Objects_created_with_syntax_constructs">Objects created with syntax constructs</h3>
<div class="sourceCode" id="cb124"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb124-1" title="1"><span class="kw">var</span> o <span class="op">=</span> <span class="op">{</span><span class="dt">a</span><span class="op">:</span> <span class="dv">1</span><span class="op">};</span></a>
<a class="sourceLine" id="cb124-2" title="2"></a>
<a class="sourceLine" id="cb124-3" title="3"><span class="co">// The newly created object o has Object.prototype as its [[Prototype]]</span></a>
<a class="sourceLine" id="cb124-4" title="4"><span class="co">// o has no own property named &#39;hasOwnProperty&#39;</span></a>
<a class="sourceLine" id="cb124-5" title="5"><span class="co">// hasOwnProperty is an own property of Object.prototype. </span></a>
<a class="sourceLine" id="cb124-6" title="6"><span class="co">// So o inherits hasOwnProperty from Object.prototype</span></a>
<a class="sourceLine" id="cb124-7" title="7"><span class="co">// Object.prototype has null as its prototype.</span></a>
<a class="sourceLine" id="cb124-8" title="8"><span class="co">// o ---&gt; Object.prototype ---&gt; null</span></a>
<a class="sourceLine" id="cb124-9" title="9"></a>
<a class="sourceLine" id="cb124-10" title="10"><span class="kw">var</span> b <span class="op">=</span> [<span class="st">&#39;yo&#39;</span><span class="op">,</span> <span class="st">&#39;whadup&#39;</span><span class="op">,</span> <span class="st">&#39;?&#39;</span>]<span class="op">;</span></a>
<a class="sourceLine" id="cb124-11" title="11"></a>
<a class="sourceLine" id="cb124-12" title="12"><span class="co">// Arrays inherit from Array.prototype </span></a>
<a class="sourceLine" id="cb124-13" title="13"><span class="co">// (which has methods indexOf, forEach, etc.)</span></a>
<a class="sourceLine" id="cb124-14" title="14"><span class="co">// The prototype chain looks like:</span></a>
<a class="sourceLine" id="cb124-15" title="15"><span class="co">// b ---&gt; Array.prototype ---&gt; Object.prototype ---&gt; null</span></a>
<a class="sourceLine" id="cb124-16" title="16"></a>
<a class="sourceLine" id="cb124-17" title="17"><span class="kw">function</span> <span class="at">f</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb124-18" title="18">  <span class="cf">return</span> <span class="dv">2</span><span class="op">;</span></a>
<a class="sourceLine" id="cb124-19" title="19"><span class="op">}</span></a>
<a class="sourceLine" id="cb124-20" title="20"></a>
<a class="sourceLine" id="cb124-21" title="21"><span class="co">// Functions inherit from Function.prototype </span></a>
<a class="sourceLine" id="cb124-22" title="22"><span class="co">// (which has methods call, bind, etc.)</span></a>
<a class="sourceLine" id="cb124-23" title="23"><span class="co">// f ---&gt; Function.prototype ---&gt; Object.prototype ---&gt; null</span></a></code></pre></div>
<h3 id="With_a_constructor">With a constructor</h3>
<p>A "constructor" in JavaScript is "just" a function that happens to be called with the <a href="Reference/Operators/new.html">new operator</a>.</p>
<div class="sourceCode" id="cb125"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb125-1" title="1"><span class="kw">function</span> <span class="at">Graph</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb125-2" title="2">  <span class="kw">this</span>.<span class="at">vertices</span> <span class="op">=</span> []<span class="op">;</span></a>
<a class="sourceLine" id="cb125-3" title="3">  <span class="kw">this</span>.<span class="at">edges</span> <span class="op">=</span> []<span class="op">;</span></a>
<a class="sourceLine" id="cb125-4" title="4"><span class="op">}</span></a>
<a class="sourceLine" id="cb125-5" title="5"></a>
<a class="sourceLine" id="cb125-6" title="6"><span class="va">Graph</span>.<span class="at">prototype</span> <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb125-7" title="7">  <span class="dt">addVertex</span><span class="op">:</span> <span class="kw">function</span>(v) <span class="op">{</span></a>
<a class="sourceLine" id="cb125-8" title="8">    <span class="kw">this</span>.<span class="va">vertices</span>.<span class="at">push</span>(v)<span class="op">;</span></a>
<a class="sourceLine" id="cb125-9" title="9">  <span class="op">}</span></a>
<a class="sourceLine" id="cb125-10" title="10"><span class="op">};</span></a>
<a class="sourceLine" id="cb125-11" title="11"></a>
<a class="sourceLine" id="cb125-12" title="12"><span class="kw">var</span> g <span class="op">=</span> <span class="kw">new</span> <span class="at">Graph</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb125-13" title="13"><span class="co">// g is an object with own properties &#39;vertices&#39; and &#39;edges&#39;.</span></a>
<a class="sourceLine" id="cb125-14" title="14"><span class="co">// g.[[Prototype]] is the value of Graph.prototype when new Graph() is executed.</span></a></code></pre></div>
<h3 id="With_Object.create">With <code>Object.create</code></h3>
<p>ECMAScript 5 introduced a new method: <a href="Reference/Global_Objects/Object/create.html"><code>Object.create()</code></a>. Calling this method creates a new object. The prototype of this object is the first argument of the function:</p>
<div class="sourceCode" id="cb126"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb126-1" title="1"><span class="kw">var</span> a <span class="op">=</span> <span class="op">{</span><span class="dt">a</span><span class="op">:</span> <span class="dv">1</span><span class="op">};</span> </a>
<a class="sourceLine" id="cb126-2" title="2"><span class="co">// a ---&gt; Object.prototype ---&gt; null</span></a>
<a class="sourceLine" id="cb126-3" title="3"></a>
<a class="sourceLine" id="cb126-4" title="4"><span class="kw">var</span> b <span class="op">=</span> <span class="va">Object</span>.<span class="at">create</span>(a)<span class="op">;</span></a>
<a class="sourceLine" id="cb126-5" title="5"><span class="co">// b ---&gt; a ---&gt; Object.prototype ---&gt; null</span></a>
<a class="sourceLine" id="cb126-6" title="6"><span class="va">console</span>.<span class="at">log</span>(<span class="va">b</span>.<span class="at">a</span>)<span class="op">;</span> <span class="co">// 1 (inherited)</span></a>
<a class="sourceLine" id="cb126-7" title="7"></a>
<a class="sourceLine" id="cb126-8" title="8"><span class="kw">var</span> c <span class="op">=</span> <span class="va">Object</span>.<span class="at">create</span>(b)<span class="op">;</span></a>
<a class="sourceLine" id="cb126-9" title="9"><span class="co">// c ---&gt; b ---&gt; a ---&gt; Object.prototype ---&gt; null</span></a>
<a class="sourceLine" id="cb126-10" title="10"></a>
<a class="sourceLine" id="cb126-11" title="11"><span class="kw">var</span> d <span class="op">=</span> <span class="va">Object</span>.<span class="at">create</span>(<span class="kw">null</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb126-12" title="12"><span class="co">// d ---&gt; null</span></a>
<a class="sourceLine" id="cb126-13" title="13"><span class="va">console</span>.<span class="at">log</span>(<span class="va">d</span>.<span class="at">hasOwnProperty</span>)<span class="op">;</span> </a>
<a class="sourceLine" id="cb126-14" title="14"><span class="co">// undefined, because d doesn&#39;t inherit from Object.prototype</span></a></code></pre></div>
<h3 id="delete_Operator_with_Object.create_and_new_operator"><code>delete</code> Operator with <code>Object.create</code> and <code>new</code> operator</h3>
<p>Using <code>Object.create</code> of another object demonstrates prototypical inheritance with the <code>delete</code> operation:</p>
<div class="sourceCode" id="cb127"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb127-1" title="1"><span class="kw">var</span> a <span class="op">=</span> <span class="op">{</span><span class="dt">a</span><span class="op">:</span> <span class="dv">1</span><span class="op">};</span></a>
<a class="sourceLine" id="cb127-2" title="2"></a>
<a class="sourceLine" id="cb127-3" title="3"><span class="kw">var</span> b <span class="op">=</span> <span class="va">Object</span>.<span class="at">create</span>(a)<span class="op">;</span> </a>
<a class="sourceLine" id="cb127-4" title="4"></a>
<a class="sourceLine" id="cb127-5" title="5"><span class="va">console</span>.<span class="at">log</span>(<span class="va">a</span>.<span class="at">a</span>)<span class="op">;</span> <span class="co">// print 1 </span></a>
<a class="sourceLine" id="cb127-6" title="6"><span class="va">console</span>.<span class="at">log</span>(<span class="va">b</span>.<span class="at">a</span>)<span class="op">;</span> <span class="co">// print 1</span></a>
<a class="sourceLine" id="cb127-7" title="7"><span class="va">b</span>.<span class="at">a</span><span class="op">=</span><span class="dv">5</span><span class="op">;</span></a>
<a class="sourceLine" id="cb127-8" title="8"><span class="va">console</span>.<span class="at">log</span>(<span class="va">a</span>.<span class="at">a</span>)<span class="op">;</span> <span class="co">// print 1</span></a>
<a class="sourceLine" id="cb127-9" title="9"><span class="va">console</span>.<span class="at">log</span>(<span class="va">b</span>.<span class="at">a</span>)<span class="op">;</span> <span class="co">// print 5</span></a>
<a class="sourceLine" id="cb127-10" title="10"><span class="kw">delete</span> <span class="va">b</span>.<span class="at">a</span><span class="op">;</span></a>
<a class="sourceLine" id="cb127-11" title="11"><span class="va">console</span>.<span class="at">log</span>(<span class="va">a</span>.<span class="at">a</span>)<span class="op">;</span> <span class="co">// print 1</span></a>
<a class="sourceLine" id="cb127-12" title="12"><span class="va">console</span>.<span class="at">log</span>(<span class="va">b</span>.<span class="at">a</span>)<span class="op">;</span> <span class="co">// print 1(b.a value 5 is deleted but it showing value from its prototype chain)</span></a>
<a class="sourceLine" id="cb127-13" title="13"><span class="kw">delete</span> <span class="va">a</span>.<span class="at">a</span><span class="op">;</span>       <span class="co">// This can also be done via &#39;delete b.__proto__.a&#39;</span></a>
<a class="sourceLine" id="cb127-14" title="14"><span class="va">console</span>.<span class="at">log</span>(<span class="va">a</span>.<span class="at">a</span>)<span class="op">;</span> <span class="co">// print undefined</span></a>
<a class="sourceLine" id="cb127-15" title="15"><span class="va">console</span>.<span class="at">log</span>(<span class="va">b</span>.<span class="at">a</span>)<span class="op">;</span> <span class="co">// print undefined</span></a></code></pre></div>
<p>The <code>new</code> operator has a shorter chain in this example:</p>
<div class="sourceCode" id="cb128"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb128-1" title="1"><span class="kw">function</span> <span class="at">Graph</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb128-2" title="2">  <span class="kw">this</span>.<span class="at">vertices</span> <span class="op">=</span> [<span class="dv">4</span><span class="op">,</span><span class="dv">4</span>]<span class="op">;</span></a>
<a class="sourceLine" id="cb128-3" title="3"><span class="op">}</span></a>
<a class="sourceLine" id="cb128-4" title="4"></a>
<a class="sourceLine" id="cb128-5" title="5"><span class="kw">var</span> g <span class="op">=</span> <span class="kw">new</span> <span class="at">Graph</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb128-6" title="6"><span class="va">console</span>.<span class="at">log</span>(<span class="va">g</span>.<span class="at">vertices</span>)<span class="op">;</span> <span class="co">// print [4,4]</span></a>
<a class="sourceLine" id="cb128-7" title="7"><span class="va">g</span>.<span class="at">vertices</span> <span class="op">=</span> <span class="dv">25</span><span class="op">;</span></a>
<a class="sourceLine" id="cb128-8" title="8"><span class="va">console</span>.<span class="at">log</span>(<span class="va">g</span>.<span class="at">vertices</span>)<span class="op">;</span> <span class="co">// print 25</span></a>
<a class="sourceLine" id="cb128-9" title="9"><span class="kw">delete</span> <span class="va">g</span>.<span class="at">vertices</span><span class="op">;</span></a>
<a class="sourceLine" id="cb128-10" title="10"><span class="va">console</span>.<span class="at">log</span>(<span class="va">g</span>.<span class="at">vertices</span>)<span class="op">;</span> <span class="co">// print undefined</span></a></code></pre></div>
<h3 id="With_the_class_keyword">With the <code>class</code> keyword</h3>
<p>ECMAScript 2015 introduced a new set of keywords implementing <a href="Reference/Classes.html">classes</a>. The new keywords include <a href="Reference/Statements/class.html"><code>class</code></a>, <a href="Reference/Classes/constructor.html"><code>constructor</code></a>, <a href="Reference/Classes/static.html"><code>static</code></a>, <a href="Reference/Classes/extends.html"><code>extends</code></a>, and <a href="Reference/Operators/super.html"><code>super</code></a>.</p>
<div class="sourceCode" id="cb129"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb129-1" title="1"><span class="st">&#39;use strict&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb129-2" title="2"></a>
<a class="sourceLine" id="cb129-3" title="3"><span class="kw">class</span> Polygon <span class="op">{</span></a>
<a class="sourceLine" id="cb129-4" title="4">  <span class="at">constructor</span>(height<span class="op">,</span> width) <span class="op">{</span></a>
<a class="sourceLine" id="cb129-5" title="5">    <span class="kw">this</span>.<span class="at">height</span> <span class="op">=</span> height<span class="op">;</span></a>
<a class="sourceLine" id="cb129-6" title="6">    <span class="kw">this</span>.<span class="at">width</span> <span class="op">=</span> width<span class="op">;</span></a>
<a class="sourceLine" id="cb129-7" title="7">  <span class="op">}</span></a>
<a class="sourceLine" id="cb129-8" title="8"><span class="op">}</span></a>
<a class="sourceLine" id="cb129-9" title="9"></a>
<a class="sourceLine" id="cb129-10" title="10"><span class="kw">class</span> Square <span class="kw">extends</span> Polygon <span class="op">{</span></a>
<a class="sourceLine" id="cb129-11" title="11">  <span class="at">constructor</span>(sideLength) <span class="op">{</span></a>
<a class="sourceLine" id="cb129-12" title="12">    <span class="kw">super</span>(sideLength<span class="op">,</span> sideLength)<span class="op">;</span></a>
<a class="sourceLine" id="cb129-13" title="13">  <span class="op">}</span></a>
<a class="sourceLine" id="cb129-14" title="14">  get <span class="at">area</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb129-15" title="15">    <span class="cf">return</span> <span class="kw">this</span>.<span class="at">height</span> <span class="op">*</span> <span class="kw">this</span>.<span class="at">width</span><span class="op">;</span></a>
<a class="sourceLine" id="cb129-16" title="16">  <span class="op">}</span></a>
<a class="sourceLine" id="cb129-17" title="17">  set <span class="at">sideLength</span>(newLength) <span class="op">{</span></a>
<a class="sourceLine" id="cb129-18" title="18">    <span class="kw">this</span>.<span class="at">height</span> <span class="op">=</span> newLength<span class="op">;</span></a>
<a class="sourceLine" id="cb129-19" title="19">    <span class="kw">this</span>.<span class="at">width</span> <span class="op">=</span> newLength<span class="op">;</span></a>
<a class="sourceLine" id="cb129-20" title="20">  <span class="op">}</span></a>
<a class="sourceLine" id="cb129-21" title="21"><span class="op">}</span></a>
<a class="sourceLine" id="cb129-22" title="22"></a>
<a class="sourceLine" id="cb129-23" title="23"><span class="kw">var</span> square <span class="op">=</span> <span class="kw">new</span> <span class="at">Square</span>(<span class="dv">2</span>)<span class="op">;</span></a></code></pre></div>
<h3 id="Performance">Performance</h3>
<p>The lookup time for properties that are high up on the prototype chain can have a negative impact on the performance, and this may be significant in the code where performance is critical. Additionally, trying to access nonexistent properties will always traverse the full prototype chain.</p>
<p>Also, when iterating over the properties of an object, <strong>every</strong> enumerable property that is on the prototype chain will be enumerated. To check whether an object has a property defined on <em>itself</em> and not somewhere on its prototype chain, it is necessary to use the <a href="Reference/Global_Objects/Object/hasOwnProperty.html"><code>hasOwnProperty</code></a> method which all objects inherit from <code>Object.prototype</code>. To give you a concrete example, let's take the above graph example code to illustrate it:</p>
<div class="sourceCode" id="cb130"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb130-1" title="1"><span class="va">console</span>.<span class="at">log</span>(<span class="va">g</span>.<span class="at">hasOwnProperty</span>(<span class="st">&#39;vertices&#39;</span>))<span class="op">;</span></a>
<a class="sourceLine" id="cb130-2" title="2"><span class="co">// true</span></a>
<a class="sourceLine" id="cb130-3" title="3"></a>
<a class="sourceLine" id="cb130-4" title="4"><span class="va">console</span>.<span class="at">log</span>(<span class="va">g</span>.<span class="at">hasOwnProperty</span>(<span class="st">&#39;nope&#39;</span>))<span class="op">;</span></a>
<a class="sourceLine" id="cb130-5" title="5"><span class="co">// false</span></a>
<a class="sourceLine" id="cb130-6" title="6"></a>
<a class="sourceLine" id="cb130-7" title="7"><span class="va">console</span>.<span class="at">log</span>(<span class="va">g</span>.<span class="at">hasOwnProperty</span>(<span class="st">&#39;addVertex&#39;</span>))<span class="op">;</span></a>
<a class="sourceLine" id="cb130-8" title="8"><span class="co">// false</span></a>
<a class="sourceLine" id="cb130-9" title="9"></a>
<a class="sourceLine" id="cb130-10" title="10"><span class="va">console</span>.<span class="at">log</span>(<span class="va">g</span>.<span class="va">__proto__</span>.<span class="at">hasOwnProperty</span>(<span class="st">&#39;addVertex&#39;</span>))<span class="op">;</span></a>
<a class="sourceLine" id="cb130-11" title="11"><span class="co">// true</span></a></code></pre></div>
<p><a href="Reference/Global_Objects/Object/hasOwnProperty.html"><code>hasOwnProperty</code></a> is the only thing in JavaScript which deals with properties and does <strong>not</strong> traverse the prototype chain.</p>
<p>Note: It is <strong>not</strong> enough to check whether a property is <a href="Reference/Global_Objects/undefined.html"><code>undefined</code></a>. The property might very well exist, but its value just happens to be set to <code>undefined</code>.</p>
<h3 id="Bad_practice_Extension_of_native_prototypes">Bad practice: Extension of native prototypes</h3>
<p>One misfeature that is often used is to extend <code>Object.prototype</code> or one of the other built-in prototypes.</p>
<p>This technique is called monkey patching and breaks <em>encapsulation</em>. While used by popular frameworks such as Prototype.js, there is still no good reason for cluttering built-in types with additional <em>non-standard</em> functionality.</p>
<p>The <strong>only</strong> good reason for extending a built-in prototype is to backport the features of newer JavaScript engines, like <code>Array.forEach</code>.</p>
<h3 id="Summary_of_methods_for_extending_the_prototype_chain">Summary of methods for extending the prototype chain</h3>
<p>Here are all 4 ways and their pros/cons. All of the examples listed below create exactly the same resulting <code>inst</code> object (thus logging the same results to the console), except in different ways for the purpose of illustration.</p>
<table>
<colgroup>
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
</colgroup>
<tbody>
<tr class="odd">
<td>Name</td>
<td>Example(s)</td>
<td>Pro(s)</td>
<td>Con(s)</td>
</tr>
<tr class="even">
<td>New-initialization</td>
<td><div class="sourceCode" id="cb131"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb131-1" title="1"><span class="kw">function</span> <span class="at">foo</span>()<span class="op">{}</span></a>
<a class="sourceLine" id="cb131-2" title="2"><span class="va">foo</span>.<span class="at">prototype</span> <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb131-3" title="3">  <span class="dt">foo_prop</span><span class="op">:</span> <span class="st">&quot;foo val&quot;</span></a>
<a class="sourceLine" id="cb131-4" title="4"><span class="op">};</span></a>
<a class="sourceLine" id="cb131-5" title="5"><span class="kw">function</span> <span class="at">bar</span>()<span class="op">{}</span></a>
<a class="sourceLine" id="cb131-6" title="6"><span class="kw">var</span> proto <span class="op">=</span> <span class="kw">new</span> foo<span class="op">;</span></a>
<a class="sourceLine" id="cb131-7" title="7"><span class="va">proto</span>.<span class="at">bar_prop</span> <span class="op">=</span> <span class="st">&quot;bar val&quot;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb131-8" title="8"><span class="va">bar</span>.<span class="at">prototype</span> <span class="op">=</span> proto<span class="op">;</span></a>
<a class="sourceLine" id="cb131-9" title="9"><span class="kw">var</span> inst <span class="op">=</span> <span class="kw">new</span> bar<span class="op">;</span></a>
<a class="sourceLine" id="cb131-10" title="10"><span class="va">console</span>.<span class="at">log</span>(<span class="va">inst</span>.<span class="at">foo_prop</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb131-11" title="11"><span class="va">console</span>.<span class="at">log</span>(<span class="va">inst</span>.<span class="at">bar_prop</span>)<span class="op">;</span></a></code></pre></div></td>
<td>Supported in every browser imaginable (support goes all the way back to IE 5.5!). Also, it is very fast, very standard, and very JIT-optimizable.</td>
<td>In order to use this method, the function in question must be initialized. During this initialization, the constructor may store unique information that must be generated per-object. However, this unique information would only be generated once, potentially leading to problems. Additionally, the initialization of the constructor may put unwanted methods onto the object. However, both these are generally not problems at all (in fact, usually beneficial) if it is all your own code and you know what does what where.</td>
</tr>
<tr class="odd">
<td>Object.create</td>
<td><div class="sourceCode" id="cb132"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb132-1" title="1"><span class="kw">function</span> <span class="at">foo</span>()<span class="op">{}</span></a>
<a class="sourceLine" id="cb132-2" title="2"><span class="va">foo</span>.<span class="at">prototype</span> <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb132-3" title="3">  <span class="dt">foo_prop</span><span class="op">:</span> <span class="st">&quot;foo val&quot;</span></a>
<a class="sourceLine" id="cb132-4" title="4"><span class="op">};</span></a>
<a class="sourceLine" id="cb132-5" title="5"><span class="kw">function</span> <span class="at">bar</span>()<span class="op">{}</span></a>
<a class="sourceLine" id="cb132-6" title="6"><span class="kw">var</span> proto <span class="op">=</span> <span class="va">Object</span>.<span class="at">create</span>(</a>
<a class="sourceLine" id="cb132-7" title="7">  <span class="va">foo</span>.<span class="at">prototype</span></a>
<a class="sourceLine" id="cb132-8" title="8">)<span class="op">;</span></a>
<a class="sourceLine" id="cb132-9" title="9"><span class="va">proto</span>.<span class="at">bar_prop</span> <span class="op">=</span> <span class="st">&quot;bar val&quot;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb132-10" title="10"><span class="va">bar</span>.<span class="at">prototype</span> <span class="op">=</span> proto<span class="op">;</span></a>
<a class="sourceLine" id="cb132-11" title="11"><span class="kw">var</span> inst <span class="op">=</span> <span class="kw">new</span> bar<span class="op">;</span></a>
<a class="sourceLine" id="cb132-12" title="12"><span class="va">console</span>.<span class="at">log</span>(<span class="va">inst</span>.<span class="at">foo_prop</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb132-13" title="13"><span class="va">console</span>.<span class="at">log</span>(<span class="va">inst</span>.<span class="at">bar_prop</span>)<span class="op">;</span></a></code></pre></div>
<div class="sourceCode" id="cb133"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb133-1" title="1"><span class="kw">function</span> <span class="at">foo</span>()<span class="op">{}</span></a>
<a class="sourceLine" id="cb133-2" title="2"><span class="va">foo</span>.<span class="at">prototype</span> <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb133-3" title="3">  <span class="dt">foo_prop</span><span class="op">:</span> <span class="st">&quot;foo val&quot;</span></a>
<a class="sourceLine" id="cb133-4" title="4"><span class="op">};</span></a>
<a class="sourceLine" id="cb133-5" title="5"><span class="kw">function</span> <span class="at">bar</span>()<span class="op">{}</span></a>
<a class="sourceLine" id="cb133-6" title="6"><span class="kw">var</span> proto <span class="op">=</span> <span class="va">Object</span>.<span class="at">create</span>(</a>
<a class="sourceLine" id="cb133-7" title="7">  <span class="va">foo</span>.<span class="at">prototype</span><span class="op">,</span></a>
<a class="sourceLine" id="cb133-8" title="8">  <span class="op">{</span></a>
<a class="sourceLine" id="cb133-9" title="9">    <span class="dt">bar_prop</span><span class="op">:</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb133-10" title="10">      <span class="dt">value</span><span class="op">:</span> <span class="st">&quot;bar val&quot;</span></a>
<a class="sourceLine" id="cb133-11" title="11">    <span class="op">}</span></a>
<a class="sourceLine" id="cb133-12" title="12">  <span class="op">}</span></a>
<a class="sourceLine" id="cb133-13" title="13">)<span class="op">;</span></a>
<a class="sourceLine" id="cb133-14" title="14"><span class="va">bar</span>.<span class="at">prototype</span> <span class="op">=</span> proto<span class="op">;</span></a>
<a class="sourceLine" id="cb133-15" title="15"><span class="kw">var</span> inst <span class="op">=</span> <span class="kw">new</span> bar<span class="op">;</span></a>
<a class="sourceLine" id="cb133-16" title="16"><span class="va">console</span>.<span class="at">log</span>(<span class="va">inst</span>.<span class="at">foo_prop</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb133-17" title="17"><span class="va">console</span>.<span class="at">log</span>(<span class="va">inst</span>.<span class="at">bar_prop</span>)</a></code></pre></div></td>
<td>Support in all in-use-today browsers which are all non-microsoft browsers plus IE9 and up. Allows the direct setting of __proto__ in a way that is one-time-only so that the browser can better optimize the object. Also allows the creation of objects without a prototype via <code>Object.create(null)</code>.</td>
<td>Not supported in IE8 and below. However, as Microsoft has discontinued extended support for systems running these old browsers, this should not be a concern for most applications. Additionally, the slow object initialization can be a performance black hole if using the second argument because each object-descriptor property has its own separate descriptor object. When dealing with hundreds of thousands of object descriptors in the form of object, there can arise a serious issue with lag.</td>
</tr>
<tr class="even">
<td><p>Object.setPrototypeOf</p></td>
<td><div class="sourceCode" id="cb134"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb134-1" title="1"><span class="kw">function</span> <span class="at">foo</span>()<span class="op">{}</span></a>
<a class="sourceLine" id="cb134-2" title="2"><span class="va">foo</span>.<span class="at">prototype</span> <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb134-3" title="3">  <span class="dt">foo_prop</span><span class="op">:</span> <span class="st">&quot;foo val&quot;</span></a>
<a class="sourceLine" id="cb134-4" title="4"><span class="op">};</span></a>
<a class="sourceLine" id="cb134-5" title="5"><span class="kw">function</span> <span class="at">bar</span>()<span class="op">{}</span></a>
<a class="sourceLine" id="cb134-6" title="6"><span class="kw">var</span> proto <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb134-7" title="7">  <span class="dt">bar_prop</span><span class="op">:</span> <span class="st">&quot;bar val&quot;</span></a>
<a class="sourceLine" id="cb134-8" title="8"><span class="op">};</span></a>
<a class="sourceLine" id="cb134-9" title="9"><span class="va">Object</span>.<span class="at">setPrototypeOf</span>(</a>
<a class="sourceLine" id="cb134-10" title="10">  proto<span class="op">,</span> <span class="va">foo</span>.<span class="at">prototype</span></a>
<a class="sourceLine" id="cb134-11" title="11">)<span class="op">;</span></a>
<a class="sourceLine" id="cb134-12" title="12"><span class="va">bar</span>.<span class="at">prototype</span> <span class="op">=</span> proto<span class="op">;</span></a>
<a class="sourceLine" id="cb134-13" title="13"><span class="kw">var</span> inst <span class="op">=</span> <span class="kw">new</span> bar<span class="op">;</span></a>
<a class="sourceLine" id="cb134-14" title="14"><span class="va">console</span>.<span class="at">log</span>(<span class="va">inst</span>.<span class="at">foo_prop</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb134-15" title="15"><span class="va">console</span>.<span class="at">log</span>(<span class="va">inst</span>.<span class="at">bar_prop</span>)<span class="op">;</span></a></code></pre></div>
<div class="sourceCode" id="cb135"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb135-1" title="1"><span class="kw">function</span> <span class="at">foo</span>()<span class="op">{}</span></a>
<a class="sourceLine" id="cb135-2" title="2"><span class="va">foo</span>.<span class="at">prototype</span> <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb135-3" title="3">  <span class="dt">foo_prop</span><span class="op">:</span> <span class="st">&quot;foo val&quot;</span></a>
<a class="sourceLine" id="cb135-4" title="4"><span class="op">};</span></a>
<a class="sourceLine" id="cb135-5" title="5"><span class="kw">function</span> <span class="at">bar</span>()<span class="op">{}</span></a>
<a class="sourceLine" id="cb135-6" title="6"><span class="kw">var</span> proto<span class="op">;</span></a>
<a class="sourceLine" id="cb135-7" title="7">proto<span class="op">=</span><span class="va">Object</span>.<span class="at">setPrototypeOf</span>(</a>
<a class="sourceLine" id="cb135-8" title="8">  <span class="op">{</span> <span class="dt">bar_prop</span><span class="op">:</span> <span class="st">&quot;bar val&quot;</span> <span class="op">},</span></a>
<a class="sourceLine" id="cb135-9" title="9">  <span class="va">foo</span>.<span class="at">prototype</span></a>
<a class="sourceLine" id="cb135-10" title="10">)<span class="op">;</span></a>
<a class="sourceLine" id="cb135-11" title="11"><span class="va">bar</span>.<span class="at">prototype</span> <span class="op">=</span> proto<span class="op">;</span></a>
<a class="sourceLine" id="cb135-12" title="12"><span class="kw">var</span> inst <span class="op">=</span> <span class="kw">new</span> bar<span class="op">;</span></a>
<a class="sourceLine" id="cb135-13" title="13"><span class="va">console</span>.<span class="at">log</span>(<span class="va">inst</span>.<span class="at">foo_prop</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb135-14" title="14"><span class="va">console</span>.<span class="at">log</span>(<span class="va">inst</span>.<span class="at">bar_prop</span>)</a></code></pre></div></td>
<td>Support in all in-use-today browsers which are all non-microsoft browsers plus IE9 and up. Allows the dynamic manipulation of an objects prototype and can even force a prototype on a prototype-less object created with <code>Object.create(null)</code>.</td>
<td>Should-be-deprecated and ill-performant. Making your Javascript run fast is completely out of the question if you dare use this in the final production code because many browsers optimize the prototype and try to guess the location of the method in the memory when calling an instance in advance, but setting the prototype dynamically disrupts all these optimizations and can even force some browsers to recompile for deoptimization your code just to make it work according to the specs. Not supported in IE8 and below.</td>
</tr>
<tr class="odd">
<td>__proto__</td>
<td><div class="sourceCode" id="cb136"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb136-1" title="1"><span class="kw">function</span> <span class="at">foo</span>()<span class="op">{}</span></a>
<a class="sourceLine" id="cb136-2" title="2"><span class="va">foo</span>.<span class="at">prototype</span> <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb136-3" title="3">  <span class="dt">foo_prop</span><span class="op">:</span> <span class="st">&quot;foo val&quot;</span></a>
<a class="sourceLine" id="cb136-4" title="4"><span class="op">};</span></a>
<a class="sourceLine" id="cb136-5" title="5"><span class="kw">function</span> <span class="at">bar</span>()<span class="op">{}</span></a>
<a class="sourceLine" id="cb136-6" title="6"><span class="kw">var</span> proto <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb136-7" title="7">  <span class="dt">bar_prop</span><span class="op">:</span> <span class="st">&quot;bar val&quot;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb136-8" title="8">  <span class="dt">__proto__</span><span class="op">:</span> <span class="va">foo</span>.<span class="at">prototype</span></a>
<a class="sourceLine" id="cb136-9" title="9"><span class="op">};</span></a>
<a class="sourceLine" id="cb136-10" title="10"><span class="va">bar</span>.<span class="at">prototype</span> <span class="op">=</span> proto<span class="op">;</span></a>
<a class="sourceLine" id="cb136-11" title="11"><span class="kw">var</span> inst <span class="op">=</span> <span class="kw">new</span> bar<span class="op">;</span></a>
<a class="sourceLine" id="cb136-12" title="12"><span class="va">console</span>.<span class="at">log</span>(<span class="va">inst</span>.<span class="at">foo_prop</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb136-13" title="13"><span class="va">console</span>.<span class="at">log</span>(<span class="va">inst</span>.<span class="at">bar_prop</span>)<span class="op">;</span></a></code></pre></div>
<div class="sourceCode" id="cb137"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb137-1" title="1"><span class="kw">var</span> inst <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb137-2" title="2">  <span class="dt">__proto__</span><span class="op">:</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb137-3" title="3">    <span class="dt">bar_prop</span><span class="op">:</span> <span class="st">&quot;bar val&quot;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb137-4" title="4">    <span class="dt">__proto__</span><span class="op">:</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb137-5" title="5">      <span class="dt">foo_prop</span><span class="op">:</span> <span class="st">&quot;foo val&quot;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb137-6" title="6">      <span class="dt">__proto__</span><span class="op">:</span> <span class="va">Object</span>.<span class="at">prototype</span></a>
<a class="sourceLine" id="cb137-7" title="7">    <span class="op">}</span></a>
<a class="sourceLine" id="cb137-8" title="8">  <span class="op">}</span></a>
<a class="sourceLine" id="cb137-9" title="9"><span class="op">};</span></a>
<a class="sourceLine" id="cb137-10" title="10"><span class="va">console</span>.<span class="at">log</span>(<span class="va">inst</span>.<span class="at">foo_prop</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb137-11" title="11"><span class="va">console</span>.<span class="at">log</span>(<span class="va">inst</span>.<span class="at">bar_prop</span>)</a></code></pre></div></td>
<td>Support in all in-use-today browsers which are all non-microsoft browsers plus IE11 and up. Setting __proto__ to something that is not an object only fails silently. It does not throw an exception.</td>
<td>Grossly deprecated and non-performant. Making your Javascript run fast is completely out of the question if you dare use this in the final production code because many browsers optimize the prototype and try to guess the location of the method in the memory when calling an instance in advance, but setting the prototype dynamically disrupts all these optimizations and can even force some browsers to recompile for deoptimization your code just to make it work according to the specs. Not supported in IE10 and below.</td>
</tr>
</tbody>
</table>
<h2 id="prototype_and_Object.getPrototypeOf"><code>prototype</code> and <code>Object.getPrototypeOf</code></h2>
<p>JavaScript is a bit confusing for developers coming from Java or C++, as it's all dynamic, all runtime, and it has no classes at all. It's all just instances (objects). Even the "classes" we simulate are just a function object.</p>
<p>You probably already noticed that our <code>function A</code> has a special property called <code>prototype</code>. This special property works with the JavaScript <code>new </code>operator. The reference to the prototype object is copied to the internal <code>[[Prototype]]</code> property of the new instance. For example, when you do <code>var a1 = new A()</code>, JavaScript (after creating the object in memory and before running function <code>A()</code> with <code>this</code> defined to it) sets <code>a1.[[Prototype]] = A.prototype</code>. When you then access properties of the instance, JavaScript first checks whether they exist on that object directly, and if not, it looks in <code>[[Prototype]]</code>. This means that all the stuff you define in <code>prototype</code> is effectively shared by all instances, and you can even later change parts of <code>prototype</code> and have the changes appear in all existing instances, if you wanted to.</p>
<p>If, in the example above, you do <code>var a1 = new A(); var a2 = new A();</code> then <code>a1.doSomething</code> would actually refer to <code>Object.getPrototypeOf(a1).doSomething</code>, which is the same as the <code>A.prototype.doSomething</code> you defined, i.e. <code>Object.getPrototypeOf(a1).doSomething == Object.getPrototypeOf(a2).doSomething == A.prototype.doSomething</code>.</p>
<p>In short, <code>prototype</code> is for types, while <code>Object.getPrototypeOf()</code> is the same for instances.</p>
<p><code>[[Prototype]]</code> is looked at <em>recursively</em>, i.e. <code>a1.doSomething</code>, <code>Object.getPrototypeOf(a1).doSomething</code>, <code>Object.getPrototypeOf(Object.getPrototypeOf(a1)).doSomething</code> etc., until it's found or <code>Object.getPrototypeOf </code>returns null.</p>
<p>So, when you call</p>
<div class="sourceCode" id="cb138"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb138-1" title="1"><span class="kw">var</span> o <span class="op">=</span> <span class="kw">new</span> <span class="at">Foo</span>()<span class="op">;</span></a></code></pre></div>
<p>JavaScript actually just does</p>
<div class="sourceCode" id="cb139"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb139-1" title="1"><span class="kw">var</span> o <span class="op">=</span> <span class="kw">new</span> <span class="at">Object</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb139-2" title="2"><span class="va">o</span>.[[Prototype]] <span class="op">=</span> <span class="va">Foo</span>.<span class="at">prototype</span><span class="op">;</span></a>
<a class="sourceLine" id="cb139-3" title="3"><span class="va">Foo</span>.<span class="at">call</span>(o)<span class="op">;</span></a></code></pre></div>
<p>(or something like that) and when you later do</p>
<div class="sourceCode" id="cb140"><pre class="sourceCode brush: js notranslate"><code class="sourceCode javascript"><a class="sourceLine" id="cb140-1" title="1"><span class="va">o</span>.<span class="at">someProp</span><span class="op">;</span></a></code></pre></div>
<p>it checks whether <code>o</code> has a property <code>someProp</code>. If not, it checks <code>Object.getPrototypeOf(o).someProp</code>, and if that doesn't exist it checks <code>Object.getPrototypeOf(Object.getPrototypeOf(o)).someProp</code>, and so on.</p>
<h2 id="In_conclusion">In conclusion</h2>
<p>It is essential to understand the prototypal inheritance model before writing complex code that makes use of it. Also, be aware of the length of the prototype chains in your code and break them up if necessary to avoid possible performance problems. Further, the native prototypes should <strong>never</strong> be extended unless it is for the sake of compatibility with newer JavaScript features.</p>
<div class="metadata">
<section class="document-meta">
<h4 id="metadata-7">Metadata</h4>
<ul>
<li><strong>Last modified:</strong> Oct 19, 2020, <a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain$history">by MDN contributors</a></li>
</ul>
</section>
</div>
</div>
<div id="sidebar-quicklinks" class="sidebar">
<div class="quick-links">
<div class="quick-links-head sidebar-heading">
Related Topics
</div>
<div>
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong><em>JavaScript</em></strong></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong>Tutorials:</strong></a></li>
<li>Complete beginners
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics">JavaScript basics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps">JavaScript first steps</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks">JavaScript building blocks</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Introducing JavaScript objects</a></li>
</ol></li>
<li>JavaScript Guide
<ol>
<li><a href="Guide/Introduction.html">Introduction</a></li>
<li><a href="Guide/Grammar_and_Types.html">Grammar and types</a></li>
<li><a href="Guide/Control_flow_and_error_handling.html">Control flow and error handling</a></li>
<li><a href="Guide/Loops_and_iteration.html">Loops and iteration</a></li>
<li><a href="Guide/Functions.html">Functions</a></li>
<li><a href="Guide/Expressions_and_Operators.html">Expressions and operators</a></li>
<li><a href="Guide/Numbers_and_dates.html">Numbers and dates</a></li>
<li><a href="Guide/Text_formatting.html">Text formatting</a></li>
<li><a href="Guide/Regular_Expressions.html">Regular expressions</a></li>
<li><a href="Guide/Indexed_collections.html">Indexed collections</a></li>
<li><a href="Guide/Keyed_collections.html">Keyed collections</a></li>
<li><a href="Guide/Working_with_Objects.html">Working with objects</a></li>
<li><a href="Guide/Details_of_the_Object_Model.html">Details of the object model</a></li>
<li><a href="Guide/Using_promises.html">Using promises</a></li>
<li><a href="Guide/Iterators_and_generators.html">Iterators and generators</a></li>
<li><a href="Guide/Meta_programming.html">Meta programming</a></li>
<li><a href="Guide/Modules.html">JavaScript modules</a></li>
</ol></li>
<li>Intermediate
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks">Client-side JavaScript frameworks</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs">Client-side web APIs</a></li>
<li><a href="A_re-introduction_to_JavaScript.html">A re-introduction to JavaScript</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Equality_comparisons_and_sameness.html">Equality comparisons and sameness</a></li>
<li><a href="Closures.html">Closures</a></li>
</ol></li>
<li>Advanced
<ol>
<li><a href="Inheritance_and_the_prototype_chain.html">Inheritance and the prototype chain</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Typed_arrays.html">JavaScript typed arrays</a></li>
<li><a href="Memory_Management.html">Memory Management</a></li>
<li><a href="EventLoop.html">Concurrency model and Event Loop</a></li>
</ol></li>
<li><strong><a href="Reference.html">References:</a></strong></li>
<li>Built-in objects
<ol>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/AggregateError.html" title="The AggregateError object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by Promise.any(), when all promises passed to it reject.">AggregateError</a></li>
<li><a href="Reference/Global_Objects/Array.html" title="The JavaScript Array class is a global object that is used in the construction of arrays; which are high-level, list-like objects.">Array</a></li>
<li><a href="Reference/Global_Objects/ArrayBuffer.html" title="The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer.">ArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/AsyncFunction.html" title="The AsyncFunction constructor creates a new async function object. In JavaScript, every asynchronous function is actually an AsyncFunction object.">AsyncFunction</a></li>
<li><a href="Reference/Global_Objects/Atomics.html" title="The Atomics object provides atomic operations as static methods. They are used with SharedArrayBuffer and ArrayBuffer objects.">Atomics</a></li>
<li><a href="Reference/Global_Objects/BigInt.html" title="BigInt is a built-in object that provides a way to represent whole numbers larger than 253 - 1, which is the largest number JavaScript can reliably represent with the Number primitive and represented by the Number.MAX_SAFE_INTEGER constant. BigInt can be used for arbitrarily large integers.">BigInt</a></li>
<li><a href="Reference/Global_Objects/BigInt64Array.html" title="The BigInt64Array typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigInt64Array</a></li>
<li><a href="Reference/Global_Objects/BigUint64Array.html" title="The BigUint64Array typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigUint64Array</a></li>
<li><a href="Reference/Global_Objects/Boolean.html" title="The Boolean object is an object wrapper for a boolean value.">Boolean</a></li>
<li><a href="Reference/Global_Objects/DataView.html" title="The DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform&#39;s endianness.">DataView</a></li>
<li><a href="Reference/Global_Objects/Date.html" title="JavaScript Date objects represent a single moment in time in a platform-independent format.">Date</a></li>
<li><a href="Reference/Global_Objects/Error.html" title="Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.">Error</a></li>
<li><a href="Reference/Global_Objects/EvalError.html" title="The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.">EvalError</a></li>
<li><a href="Reference/Global_Objects/FinalizationRegistry.html" title="A FinalizationRegistry object lets you request a callback when an object is garbage-collected.">FinalizationRegistry</a></li>
<li><a href="Reference/Global_Objects/Float32Array.html" title="The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float32Array</a></li>
<li><a href="Reference/Global_Objects/Float64Array.html" title="The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float64Array</a></li>
<li><a href="Reference/Global_Objects/Function.html" title="Every JavaScript function is actually a Function object. This can be seen with the code (function(){}).constructor === Function, which returns true.">Function</a></li>
<li><a href="Reference/Global_Objects/Generator.html" title="The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.">Generator</a></li>
<li><a href="Reference/Global_Objects/GeneratorFunction.html" title="The GeneratorFunction constructor creates a new generator function object. In JavaScript, every generator function is actually a GeneratorFunction object.">GeneratorFunction</a></li>
<li><a href="Reference/Global_Objects/Infinity.html" title="The global property Infinity is a numeric value representing infinity.">Infinity</a></li>
<li><a href="Reference/Global_Objects/Int16Array.html" title="The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int16Array</a></li>
<li><a href="Reference/Global_Objects/Int32Array.html" title="The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int32Array</a></li>
<li><a href="Reference/Global_Objects/Int8Array.html" title="The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int8Array</a></li>
<li><a href="Reference/Global_Objects/InternalError.html" title="The InternalError object indicates an error that occurred internally in the JavaScript engine.">InternalError</a></li>
<li><a href="Reference/Global_Objects/Intl.html" title="The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The Intl object provides access to several constructors as well as functionality common to the internationalization constructors and other language sensitive functions.">Intl</a></li>
<li><a href="Reference/Global_Objects/JSON.html" title="The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can&#39;t be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.">JSON</a></li>
<li><a href="Reference/Global_Objects/Map.html" title="The Map object holds key-value pairs and remembers the original insertion order of the keys.">Map</a></li>
<li><a href="Reference/Global_Objects/Math.html" title="Math is a built-in object that has properties and methods for mathematical constants and functions. It’s not a function object.">Math</a></li>
<li><a href="Reference/Global_Objects/NaN.html" title="The global NaN property is a value representing Not-A-Number.">NaN</a></li>
<li><a href="Reference/Global_Objects/Number.html" title="The Number constructor contains constants and methods for working with numbers. Values of other types can be converted to numbers using the Number() function.">Number</a></li>
<li><a href="Reference/Global_Objects/Object.html" title="The Object class represents one of JavaScript&#39;s data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.">Object</a></li>
<li><a href="Reference/Global_Objects/Promise.html" title="The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.">Promise</a></li>
<li><a href="Reference/Global_Objects/Proxy.html" title="The Proxy object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.">Proxy</a></li>
<li><a href="Reference/Global_Objects/RangeError.html" title="The RangeError object indicates an error when a value is not in the set or range of allowed values.">RangeError</a></li>
<li><a href="Reference/Global_Objects/ReferenceError.html" title="The ReferenceError object represents an error when a non-existent variable is referenced.">ReferenceError</a></li>
<li><a href="Reference/Global_Objects/Reflect.html" title="Reflect is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of proxy handlers. Reflect is not a function object, so it&#39;s not constructible.">Reflect</a></li>
<li><a href="Reference/Global_Objects/RegExp.html" title="The RegExp object is used for matching text with a pattern.">RegExp</a></li>
<li><a href="Reference/Global_Objects/Set.html" title="The Set object lets you store unique values of any type, whether primitive values or object references.">Set</a></li>
<li><a href="Reference/Global_Objects/SharedArrayBuffer.html" title="The SharedArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. Unlike an ArrayBuffer, a SharedArrayBuffer cannot become detached.">SharedArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/String.html" title="The String object is used to represent and manipulate a sequence of characters.">String</a></li>
<li><a href="Reference/Global_Objects/Symbol.html" title="The data type symbol is a primitive data type. The Symbol() function returns a value of type symbol, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class, but is incomplete as a constructor because it does not support the syntax &quot;new Symbol()&quot;.">Symbol</a></li>
<li><a href="Reference/Global_Objects/SyntaxError.html" title="The SyntaxError object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.">SyntaxError</a></li>
<li><a href="Reference/Global_Objects/TypeError.html" title="The TypeError object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.">TypeError</a></li>
<li><a href="Reference/Global_Objects/TypedArray.html" title="A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.">TypedArray</a></li>
<li><a href="Reference/Global_Objects/URIError.html" title="The URIError object represents an error when a global URI handling function was used in a wrong way.">URIError</a></li>
<li><a href="Reference/Global_Objects/Uint16Array.html" title="The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint16Array</a></li>
<li><a href="Reference/Global_Objects/Uint32Array.html" title="The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint32Array</a></li>
<li><a href="Reference/Global_Objects/Uint8Array.html" title="The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8Array</a></li>
<li><a href="Reference/Global_Objects/Uint8ClampedArray.html" title="The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8ClampedArray</a></li>
<li><a href="Reference/Global_Objects/WeakMap.html" title="The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.">WeakMap</a></li>
<li><a href="Reference/Global_Objects/WeakRef.html" title="A WeakRef object lets you hold a weak reference to another object, without preventing that object from getting garbage-collected.">WeakRef</a></li>
<li><a href="Reference/Global_Objects/WeakSet.html" title="The WeakSet object lets you store weakly held objects in a collection.">WeakSet</a></li>
<li><a href="Reference/Global_Objects/WebAssembly.html" title="The WebAssembly JavaScript object acts as the namespace for all WebAssembly-related functionality.">WebAssembly</a></li>
<li><a href="Reference/Global_Objects/decodeURI.html" title="The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or by a similar routine.">decodeURI()</a></li>
<li><a href="Reference/Global_Objects/decodeURIComponent.html" title="The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.">decodeURIComponent()</a></li>
<li><a href="Reference/Global_Objects/encodeURI.html" title="The encodeURI() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURI()</a></li>
<li><a href="Reference/Global_Objects/encodeURIComponent.html" title="The encodeURIComponent() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURIComponent()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/escape.html" title="The escape() function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.">escape()</a></li>
<li><a href="Reference/Global_Objects/eval.html" title="The eval() function evaluates JavaScript code represented as a string.">eval()</a></li>
<li><a href="Reference/Global_Objects/globalThis.html" title="The global globalThis property contains the global this value, which is akin to the global object.">globalThis</a></li>
<li><a href="Reference/Global_Objects/isFinite.html" title="The global isFinite() function determines whether the passed value is a finite number. If  needed, the parameter is first converted to a number.">isFinite()</a></li>
<li><a href="Reference/Global_Objects/isNaN.html" title="The isNaN() function determines whether a value is NaN or not. Note, coercion inside the isNaN function has interesting rules; you may alternatively want to use Number.isNaN(), as defined in ECMAScript 2015.">isNaN()</a></li>
<li><a href="Reference/Global_Objects/null.html" title="The value null represents the intentional absence of any object value. It is one of JavaScript&#39;s primitive values and is treated as falsy for boolean operations.">null</a></li>
<li><a href="Reference/Global_Objects/parseFloat.html" title="The parseFloat() function parses an argument (converting it to a string first if needed) and returns a floating point number.">parseFloat()</a></li>
<li><a href="Reference/Global_Objects/parseInt.html" title="The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).">parseInt()</a></li>
<li><a href="Reference/Global_Objects/undefined.html" title="The global undefined property represents the primitive value undefined. It is one of JavaScript&#39;s primitive types.">undefined</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/unescape.html" title="The unescape() function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Usually, decodeURI or decodeURIComponent are preferred over unescape.">unescape()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="Reference/Global_Objects/uneval.html" title="The uneval() function creates a string representation of the source code of an Object.">uneval()</a></li>
</ol></li>
<li>Expressions &amp; operators
<ol>
<li><a href="Reference/Operators/Addition.html" title="The addition operator (+) produces the sum of numeric operands or string concatenation.">Addition (+)</a></li>
<li><a href="Reference/Operators/Addition_assignment.html" title="The addition assignment operator (+=) adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible.">Addition assignment (+=)</a></li>
<li><a href="Reference/Operators/Assignment.html" title="The simple assignment operator (=) is used to assign a value to a variable. The assignment operation evaluates to the assigned value. Chaining the assignment operator is possible in order to assign a single value to multiple variables">Assignment (=)</a></li>
<li><a href="Reference/Operators/Bitwise_AND.html" title="The bitwise AND operator (&amp;) returns a 1 in each bit position for which the corresponding bits of both operands are 1s.">Bitwise AND (&amp;)</a></li>
<li><a href="Reference/Operators/Bitwise_AND_assignment.html" title="The bitwise AND assignment operator (&amp;=) uses the binary representation of both operands, does a bitwise AND operation on them and assigns the result to the variable.">Bitwise AND assignment (&amp;=)</a></li>
<li><a href="Reference/Operators/Bitwise_NOT.html" title="The bitwise NOT operator (~) inverts the bits of its operand.">Bitwise NOT (~)</a></li>
<li><a href="Reference/Operators/Bitwise_OR.html" title="The bitwise OR operator (|) returns a 1 in each bit position for which the corresponding bits of either or both operands are 1s.">Bitwise OR (|)</a></li>
<li><a href="Reference/Operators/Bitwise_OR_assignment.html" title="The bitwise OR assignment operator (|=) uses the binary representation of both operands, does a bitwise OR operation on them and assigns the result to the variable.">Bitwise OR assignment (|=)</a></li>
<li><a href="Reference/Operators/Bitwise_XOR.html" title="The bitwise XOR operator (^) returns a 1 in each bit position for which the corresponding bits of either but not both operands are 1s.">Bitwise XOR (^)</a></li>
<li><a href="Reference/Operators/Bitwise_XOR_assignment.html" title="The bitwise XOR assignment operator (^=) uses the binary representation of both operands, does a bitwise XOR operation on them and assigns the result to the variable.">Bitwise XOR assignment (^=)</a></li>
<li><a href="Reference/Operators/Comma_Operator.html" title="The comma operator (,) evaluates each of its operands (from left to right) and returns the value of the last operand. This lets you create a compound expression in which multiple expressions are evaluated, with the compound expression&#39;s final value being the value of the rightmost of its member expressions. This is commonly used to provide multiple parameters to a for loop.">Comma operator (,)</a></li>
<li><a href="Reference/Operators/Conditional_Operator.html" title="The conditional (ternary) operator is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy.">Conditional (ternary) operator</a></li>
<li><a href="Reference/Operators/Decrement.html" title="The decrement operator (--) decrements (subtracts one from) its operand and returns a value.">Decrement (--)</a></li>
<li><a href="Reference/Operators/Destructuring_assignment.html" title="The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.">Destructuring assignment</a></li>
<li><a href="Reference/Operators/Division.html" title="The division operator (/) produces the quotient of its operands where the left operand is the dividend and the right operand is the divisor.">Division (/)</a></li>
<li><a href="Reference/Operators/Division_assignment.html" title="The division assignment operator (/=) divides a variable by the value of the right operand and assigns the result to the variable.">Division assignment (/=)</a></li>
<li><a href="Reference/Operators/Equality.html" title="The equality operator (==) checks whether its two operands are equal, returning a Boolean result. Unlike the strict equality operator, it attempts to convert and compare operands that are of different types.">Equality (==)</a></li>
<li><a href="Reference/Operators/Exponentiation.html" title="The exponentiation operator (**) returns the result of raising the first operand to the power of the second operand. It is equivalent to Math.pow, except it also accepts BigInts as operands.">Exponentiation (**)</a></li>
<li><a href="Reference/Operators/Exponentiation_assignment.html" title="The exponentiation assignment operator (**=) raises the value of a variable to the power of the right operand.">Exponentiation assignment (**=)</a></li>
<li><a href="Reference/Operators/function.html" title="The function keyword can be used to define a function inside an expression.">Function expression</a></li>
<li><a href="Reference/Operators/Greater_than.html" title="The greater than operator (&gt;) returns true if the left operand is greater than the right operand, and false otherwise.">Greater than (&gt;)</a></li>
<li><a href="Reference/Operators/Greater_than_or_equal.html" title="The greater than or equal operator (&gt;=) returns true if the left operand is greater than or equal to the right operand, and false otherwise.">Greater than or equal (&gt;=)</a></li>
<li><a href="Reference/Operators/Grouping.html" title="The grouping operator ( ) controls the precedence of evaluation in expressions.">Grouping operator ( )</a></li>
<li><a href="Reference/Operators/Increment.html" title="The increment operator (++) increments (adds one to) its operand and returns a value.">Increment (++)</a></li>
<li><a href="Reference/Operators/Inequality.html" title="The inequality operator (!=) checks whether its two operands are not equal, returning a Boolean result. Unlike the strict inequality operator, it attempts to convert and compare operands that are of different types.">Inequality (!=)</a></li>
<li><a href="Reference/Operators/Left_shift.html" title="The left shift operator (&lt;&lt;) shifts the first operand the specified number of bits to the left. Excess bits shifted off to the left are discarded. Zero bits are shifted in from the right.">Left shift (&lt;&lt;)</a></li>
<li><a href="Reference/Operators/Left_shift_assignment.html" title="The left shift assignment operator (&lt;&lt;=) moves the specified amount of bits to the left and assigns the result to the variable.">Left shift assignment (&lt;&lt;=)</a></li>
<li><a href="Reference/Operators/Less_than.html" title="The less than operator (&lt;) returns true if the left operand is less than the right operand, and false otherwise.">Less than (&lt;)</a></li>
<li><a href="Reference/Operators/Less_than_or_equal.html" title="The less than or equal operator (&lt;=) returns true if the left operand is less than or equal to the right operand, and false otherwise.">Less than or equal (&lt;=)</a></li>
<li><a href="Reference/Operators/Logical_AND.html" title="The logical AND (&amp;&amp;) operator (logical conjunction) for a set of operands is true if and only if all of its operands are true. It is typically used with Boolean (logical) values. When it is, it returns a Boolean value. However, the &amp;&amp; operator actually returns the value of one of the specified operands, so if this operator is used with non-Boolean values, it will return a non-Boolean value.">Logical AND (&amp;&amp;)</a></li>
<li><a href="Reference/Operators/Logical_AND_assignment.html" title="The logical AND assignment (x &amp;&amp;= y) operator only assigns if x is truthy.">Logical AND assignment (&amp;&amp;=)</a></li>
<li><a href="Reference/Operators/Logical_NOT.html" title="The logical NOT (!) operator (logical complement, negation) takes truth to falsity and vice versa. It is typically used with Boolean (logical) values. When used with non-Boolean values, it returns false if its single operand can be converted to true; otherwise, returns true.">Logical NOT (!)</a></li>
<li><a href="Reference/Operators/Logical_OR.html" title="The logical OR (||) operator (logical disjunction) for a set of operands is true if and only if one or more of its operands is true. It is typically used with Boolean (logical) values. When it is, it returns a Boolean value. However, the || operator actually returns the value of one of the specified operands, so if this operator is used with non-Boolean values, it will return a non-Boolean value.">Logical OR (||)</a></li>
<li><a href="Reference/Operators/Logical_OR_assignment.html" title="The logical OR assignment (x ||= y) operator only assigns if x is falsy.">Logical OR assignment (||=)</a></li>
<li><a href="Reference/Operators/Logical_nullish_assignment.html" title="The logical nullish assignment (x ??= y) operator only assigns if x is nullish (null or undefined).">Logical nullish assignment (??=)</a></li>
<li><a href="Reference/Operators/Multiplication.html" title="The multiplication operator (*) produces the product of the operands.">Multiplication (*)</a></li>
<li><a href="Reference/Operators/Multiplication_assignment.html" title="The multiplication assignment operator (*=) multiplies a variable by the value of the right operand and assigns the result to the variable.">Multiplication assignment (*=)</a></li>
<li><a href="Reference/Operators/Nullish_coalescing_operator.html" title="The nullish coalescing operator (??) is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.">Nullish coalescing operator (??)</a></li>
<li><a href="Reference/Operators/Object_initializer.html" title="Objects can be initialized using new Object(), Object.create(), or using the literal notation (initializer notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).">Object initializer</a></li>
<li><a href="Reference/Operators/Operator_Precedence.html" title="Operator precedence determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.">Operator precedence</a></li>
<li><a href="Reference/Operators/Optional_chaining.html" title="The ?. operator functions similarly to the . chaining operator, except that instead of causing an error if a reference is nullish (null or undefined), the expression short-circuits with a return value of undefined.">Optional chaining (?.)</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Operators/Pipeline_operator.html" title="The experimental pipeline operator |&gt; (currently at stage 1) pipes the value of an expression into a function. This allows the creation of chained function calls in a readable manner. The result is syntactic sugar in which a function call with a single argument can be written like this:">Pipeline operator (|&gt;)</a></li>
<li><a href="Reference/Operators/Property_Accessors-2.html" title="Property accessors provide access to an object&#39;s properties by using the dot notation or the bracket notation.">Property accessors</a></li>
<li><a href="Reference/Operators/Remainder.html" title="The remainder operator (%) returns the remainder left over when one operand is divided by a second operand. It always takes the sign of the dividend.">Remainder (%)</a></li>
<li><a href="Reference/Operators/Remainder_assignment.html" title="The remainder assignment operator (%=) divides a variable by the value of the right operand and assigns the remainder to the variable.">Remainder assignment (%=)</a></li>
<li><a href="Reference/Operators/Right_shift.html" title="The right shift operator (&gt;&gt;) shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Copies of the leftmost bit are shifted in from the left. Since the new leftmost bit has the same value as the previous leftmost bit, the sign bit (the leftmost bit) does not change. Hence the name &quot;sign-propagating&quot;.">Right shift (&gt;&gt;)</a></li>
<li><a href="Reference/Operators/Right_shift_assignment.html" title="The right shift assignment operator (&gt;&gt;=) moves the specified amount of bits to the right and assigns the result to the variable.">Right shift assignment (&gt;&gt;=)</a></li>
<li><a href="Reference/Operators/Spread_syntax.html" title="Spread syntax (...) allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.">Spread syntax (...)</a></li>
<li><a href="Reference/Operators/Strict_equality.html" title="The strict equality operator (===) checks whether its two operands are equal, returning a Boolean result. Unlike the equality operator, the strict equality operator always considers operands of different types to be different.">Strict equality (===)</a></li>
<li><a href="Reference/Operators/Strict_inequality.html" title="The strict inequality operator (!==) checks whether its two operands are not equal, returning a Boolean result. Unlike the inequality operator, the strict inequality operator always considers operands of different types to be different.">Strict inequality (!==)</a></li>
<li><a href="Reference/Operators/Subtraction.html" title="The subtraction operator (-) subtracts the two operands, producing their difference.">Subtraction (-)</a></li>
<li><a href="Reference/Operators/Subtraction_assignment.html" title="The subtraction assignment operator (-=) subtracts the value of the right operand from a variable and assigns the result to the variable.">Subtraction assignment (-=)</a></li>
<li><a href="Reference/Operators/Unary_negation.html" title="The unary negation operator (-) precedes its operand and negates it.">Unary negation (-)</a></li>
<li><a href="Reference/Operators/Unary_plus.html" title="The unary plus operator (+) precedes its operand and evaluates to its operand but attempts to convert it into a number, if it isn&#39;t already.">Unary plus (+)</a></li>
<li><a href="Reference/Operators/Unsigned_right_shift.html" title="The unsigned right shift operator (&gt;&gt;&gt;) (zero-fill right shift) shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Zero bits are shifted in from the left. The sign bit becomes 0, so the result is always non-negative. Unlike the other bitwise operators, zero-fill right shift returns an unsigned 32-bit integer.">Unsigned right shift (&gt;&gt;&gt;)</a></li>
<li><a href="Reference/Operators/Unsigned_right_shift_assignment.html" title="The unsigned right shift assignment operator (&gt;&gt;&gt;=) moves the specified amount of bits to the right and assigns the result to the variable.">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li>
<li><a href="Reference/Operators/async_function.html" title="The async function keyword can be used to define async functions inside expressions.">async function expression</a></li>
<li><a href="Reference/Operators/await.html" title="The await operator is used to wait for a Promise. It can only be used inside an async function.">await</a></li>
<li><a href="Reference/Operators/class.html" title="The class expression is one way to define a class in ECMAScript 2015. Similar to function expressions, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. ">class expression</a></li>
<li><a href="Reference/Operators/delete.html" title="The JavaScript delete operator removes a property from an object; if no more references to the same property are held, it is eventually released automatically.">delete operator</a></li>
<li><a href="Reference/Operators/function_.html" title="The function* keyword can be used to define a generator function inside an expression.">function* expression</a></li>
<li><a href="Reference/Operators/in.html" title="The in operator returns true if the specified property is in the specified object or its prototype chain.">in operator</a></li>
<li><a href="Reference/Operators/instanceof.html" title="The instanceof operator tests to see if the prototype property of a constructor appears anywhere in the prototype chain of an object. The return value is a boolean value.">instanceof</a></li>
<li><a href="Reference/Operators/new.html" title="The new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.">new operator</a></li>
<li><a href="Reference/Operators/new-2.html" title="The new.target pseudo-property lets you detect whether a function or constructor was called using the new operator. In constructors and functions invoked using the new operator, new.target returns a reference to the constructor or function. In normal function calls, new.target is undefined.">new.target</a></li>
<li><a href="Reference/Operators/super.html" title="The super keyword is used to access and call functions on an object&#39;s parent.">super</a></li>
<li><a href="Reference/Operators/this.html" title="A function&#39;s this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode.">this</a></li>
<li><a href="Reference/Operators/typeof.html" title="The typeof operator returns a string indicating the type of the unevaluated operand.">typeof</a></li>
<li><a href="Reference/Operators/void.html" title="The void operator evaluates the given expression and then returns undefined.">void operator</a></li>
<li><a href="Reference/Operators/yield.html" title="The yield keyword is used to pause and resume a generator function (function* or legacy generator function).">yield</a></li>
<li><a href="Reference/Operators/yield_.html" title="The yield* expression is used to delegate to another generator or iterable object.">yield*</a></li>
</ol></li>
<li>Statements &amp; declarations
<ol>
<li><a href="Reference/Statements/async_function.html" title="An async function is a function declared with the async keyword. Async functions are instances of the AsyncFunction constructor, and the await keyword is permitted within them. The async and await keywords enable asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.">async function</a></li>
<li><a href="Reference/Statements/block.html" title="A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of braces (&quot;curly brackets&quot;) and may optionally be labelled:">block</a></li>
<li><a href="Reference/Statements/break.html" title="The break statement terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.">break</a></li>
<li><a href="Reference/Statements/class.html" title="The class declaration creates a new class with a given name using prototype-based inheritance.">class</a></li>
<li><a href="Reference/Statements/const.html" title="Constants are block-scoped, much like variables declared using the let keyword. The value of a constant can&#39;t be changed through reassignment, and it can&#39;t be redeclared.">const</a></li>
<li><a href="Reference/Statements/continue.html" title="The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.">continue</a></li>
<li><a href="Reference/Statements/debugger.html" title="The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.">debugger</a></li>
<li><a href="Reference/Statements/do...html" title="The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.">do...while</a></li>
<li><a href="Reference/Statements/Empty.html" title="An empty statement is used to provide no statement, although the JavaScript syntax would expect one.">empty</a></li>
<li><a href="Reference/Statements/export.html" title="The export statement is used when creating JavaScript modules to export live bindings to functions, objects, or primitive values from the module so they can be used by other programs with the import statement. Bindings that are exported can still be modified locally; when imported, although they can only be read by the importing module the value updates whenever it is updated by the exporting module.">export</a></li>
<li><a href="Reference/Statements/for.html" title="The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.">for</a></li>
<li><a href="Reference/Statements/for-await...html" title="The for await...of statement creates a loop iterating over async iterable objects as well as on sync iterables, including: built-in String, Array, Array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined async/sync iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object. Like the await operator, the statement can only be used inside an async function.">for await...of</a></li>
<li><a href="Reference/Statements/for...html" title="The for...in statement iterates over all enumerable properties of an object that are keyed by strings (ignoring ones keyed by Symbols), including inherited enumerable properties.">for...in</a></li>
<li><a href="Reference/Statements/for..-2.html" title="The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.">for...of</a></li>
<li><a href="Reference/Statements/function.html" title="The function declaration (function statement) defines a function with the specified parameters.">function declaration</a></li>
<li><a href="Reference/Statements/function_.html" title="The function* declaration (function keyword followed by an asterisk) defines a generator function, which returns a Generator object.">function*</a></li>
<li><a href="Reference/Statements/if...html" title="The if statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement can be executed.">if...else</a></li>
<li><a href="Reference/Statements/import.html" title="The static import statement is used to import read only live bindings which are exported by another module. ">import</a></li>
<li><a href="Reference/Statements/import-2.html" title="The import.meta object exposes context-specific metadata to a JavaScript module. It contains information about the module, like the module&#39;s URL.">import.meta</a></li>
<li><a href="Reference/Statements/label.html" title="The labeled statement can be used with break or continue statements. It is prefixing a statement with an identifier which you can refer to.">label</a></li>
<li><a href="Reference/Statements/let.html" title="The let statement declares a block-scoped local variable, optionally initializing it to a value.">let</a></li>
<li><a href="Reference/Statements/return.html" title="The return statement ends function execution and specifies a value to be returned to the function caller.">return</a></li>
<li><a href="Reference/Statements/switch.html" title="The switch statement evaluates an expression, matching the expression&#39;s value to a case clause, and executes statements associated with that case, as well as statements in cases that follow the matching case.">switch</a></li>
<li><a href="Reference/Statements/throw.html" title="The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won&#39;t be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.">throw</a></li>
<li><a href="Reference/Statements/try...html" title="The try...catch statement marks a block of statements to try and specifies a response should an exception be thrown.">try...catch</a></li>
<li><a href="Reference/Statements/var.html" title="The var statement declares a function-scoped or globally-scoped variable, optionally initializing it to a value.">var</a></li>
<li><a href="Reference/Statements/while.html" title="The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.">while</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Statements/with.html" title="The with statement extends the scope chain for a statement.">with</a></li>
</ol></li>
<li>Functions
<ol>
<li><a href="Reference/Functions/Arrow_functions.html" title="An arrow function expression is a compact alternative to a traditional function expression, but is limited and can&#39;t be used in all situations.">Arrow function expressions</a></li>
<li><a href="Reference/Functions/Default_parameters.html" title="Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.">Default parameters</a></li>
<li><a href="Reference/Functions/Method_definitions.html" title="Starting with ECMAScript 2015, a shorter syntax for method definitions on objects initializers is introduced. It is a shorthand for a function assigned to the method&#39;s name.">Method definitions</a></li>
<li><a href="Reference/Functions/rest_parameters.html" title="The rest parameter syntax allows us to represent an indefinite number of arguments as an array.">Rest parameters</a></li>
<li><a href="Reference/Functions/arguments.html" title="arguments is an Array-like object accessible inside functions that contains the values of the arguments passed to that function.">The arguments object</a></li>
<li><a href="Reference/Functions/get.html" title="The get syntax binds an object property to a function that will be called when that property is looked up.">getter</a></li>
<li><a href="Reference/Functions/set.html" title="The set syntax binds an object property to a function to be called when there is an attempt to set that property.">setter</a></li>
</ol></li>
<li>Classes
<ol>
<li><a href="Reference/Classes/Private_class_fields.html" title="Class properties are public by default and can be examined or modified outside the class. There is however an experimental proposal to allow defining private class fields using a hash # prefix is added.">Private class fields</a></li>
<li><a href="Reference/Classes/Public_class_fields.html" title="Both static and instance public fields are writable, enumerable, and configurable properties. As such, unlike their private counterparts, they participate in prototype inheritance.">Public class fields</a></li>
<li><a href="Reference/Classes/constructor.html" title="The constructor method is a special method of a class for creating and initializing an object of that class.">constructor</a></li>
<li><a href="Reference/Classes/extends.html" title="The extends keyword is used in class declarations or class expressions to create a class that is a child of another class.">extends</a></li>
<li><a href="Reference/Classes/static.html" title="The static keyword defines a static method or property for a class. Neither static methods nor static properties can be called on instances of the class. Instead, they&#39;re called on the class itself.">static</a></li>
</ol></li>
<li>Errors
<ol>
<li><a href="Reference/Errors/Property_access_denied.html" title="The JavaScript exception &quot;Permission denied to access property&quot; occurs when there was an attempt to access an object for which you have no permission.">Error: Permission denied to access property "x"</a></li>
<li><a href="Reference/Errors/Too_much_recursion.html" title="The JavaScript exception &quot;too much recursion&quot; or &quot;Maximum call stack size exceeded&quot; occurs when there are too many function calls, or a function is missing a base case.">InternalError: too much recursion</a></li>
<li><a href="Reference/Errors/Not_a_codepoint.html" title="The JavaScript exception &quot;Invalid code point&quot; occurs when NaN values, negative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF (1114111) are used with String.fromCodePoint().">RangeError: argument is not a valid code point</a></li>
<li><a href="Reference/Errors/Invalid_array_length.html" title="The JavaScript exception &quot;Invalid array length&quot; occurs when creating an Array or an ArrayBuffer which has a length which is either negative or larger or equal to 232, or when setting the Array.length property to a value which is either negative or larger or equal to 232.">RangeError: invalid array length</a></li>
<li><a href="Reference/Errors/Invalid_date.html" title="The JavaScript exception &quot;invalid date&quot; occurs when a string leading to an invalid date has been provided to Date or Date.parse().">RangeError: invalid date</a></li>
<li><a href="Reference/Errors/Precision_range.html" title="The JavaScript exception &quot;precision is out of range&quot; occurs when a number that&#39;s outside of the range of 0 and 20 (or 21) was passed into toFixed or toPrecision.">RangeError: precision is out of range</a></li>
<li><a href="Reference/Errors/Bad_radix.html" title="The JavaScript exception &quot;radix must be an integer at least 2 and no greater than 36&quot; occurs when the optional radix parameter of the Number.prototype.toString() or the BigInt.prototype.toString() method was specified and is not between 2 and 36.">RangeError: radix must be an integer</a></li>
<li><a href="Reference/Errors/Resulting_string_too_large.html" title="The JavaScript exception &quot;repeat count must be less than infinity&quot; occurs when the String.prototype.repeat() method is used with a count argument that is infinity.">RangeError: repeat count must be less than infinity</a></li>
<li><a href="Reference/Errors/Negative_repetition_count.html" title="The JavaScript exception &quot;repeat count must be non-negative&quot; occurs when the String.prototype.repeat() method is used with a count argument that is a negative number.">RangeError: repeat count must be non-negative</a></li>
<li><a href="Reference/Errors/Not_defined.html" title="The JavaScript exception &quot;variable is not defined&quot; occurs when there is a non-existent variable referenced somewhere.">ReferenceError: "x" is not defined</a></li>
<li><a href="Reference/Errors/Undeclared_var.html" title="The JavaScript strict mode-only exception &quot;Assignment to undeclated variable&quot; occurs when the value has been assigned to an undeclared variable.">ReferenceError: assignment to undeclared variable "x"</a></li>
<li><a href="Reference/Errors/Cant_access_lexical_declaration_before_init.html" title="The JavaScript exception &quot;can&#39;t access lexical declaration `variable&#39; before initialization&quot; occurs when a lexical variable was accessed before it was initialized. This happens within any block statement, when let or const declarations are accessed before they are defined.">ReferenceError: can't access lexical declaration`X' before initialization</a></li>
<li><a href="Reference/Errors/Deprecated_caller_or_arguments_usage.html" title="The JavaScript strict mode-only exception &quot;deprecated caller or arguments usage&quot; occurs when the deprecated Function.caller or Function.arguments properties are used.">ReferenceError: deprecated caller or arguments usage</a></li>
<li><a href="Reference/Errors/Invalid_assignment_left-hand_side.html" title="The JavaScript exception &quot;invalid assignment left-hand side&quot; occurs when there was an unexpected assignment somewhere. For example, a single &quot;=&quot; sign was used instead of &quot;==&quot; or &quot;===&quot;.">ReferenceError: invalid assignment left-hand side</a></li>
<li><a href="Reference/Errors/Undefined_prop.html" title="The JavaScript warning &quot;reference to undefined property&quot; occurs when a script attempted to access an object property which doesn&#39;t exist.">ReferenceError: reference to undefined property "x"</a></li>
<li><a href="Reference/Errors/Deprecated_octal.html" title="The JavaScript strict mode-only exception &quot;0-prefixed octal literals and octal escape sequences are deprecated; for octal literals use the &quot;0o&quot; prefix instead&quot; occurs when deprecated octal literals and octal escape sequences are used.">SyntaxError: "0"-prefixed octal literals and octal escape seq. are deprecated</a></li>
<li><a href="Reference/Errors/Strict_Non_Simple_Params.html" title="The JavaScript exception &quot;&#39;use strict&#39; not allowed in function&quot; occurs when a &quot;use strict&quot; directive is used at the top of a function with default parameters, rest parameters, or destructuring parameters.">SyntaxError: "use strict" not allowed in function with non-simple parameters</a></li>
<li><a href="Reference/Errors/Reserved_identifier.html" title="The JavaScript exception &quot;variable is a reserved identifier&quot; occurs when reserved keywords are used as identifiers.">SyntaxError: "x" is a reserved identifier</a></li>
<li><a href="Reference/Errors/JSON_bad_parse.html" title="The JavaScript exceptions thrown by JSON.parse() occur when string failed to be parsed as JSON.">SyntaxError: JSON.parse: bad parsing</a></li>
<li><a href="Reference/Errors/Malformed_formal_parameter.html" title="The JavaScript exception &quot;malformed formal parameter&quot; occurs when the argument list of a Function() constructor call is invalid somehow.">SyntaxError: Malformed formal parameter</a></li>
<li><a href="Reference/Errors/Unexpected_token.html" title="The JavaScript exceptions &quot;unexpected token&quot; occur when a specific language construct was expected, but something else was provided. This might be a simple typo.">SyntaxError: Unexpected token</a></li>
<li><a href="Reference/Errors/Deprecated_source_map_pragma.html" title="The JavaScript warning &quot;Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead&quot; occurs when there is a deprecated source map syntax in a JavaScript source.">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li>
<li><a href="Reference/Errors/Invalid_for-of_initializer.html" title="The JavaScript exception &quot;a declaration in the head of a for-of loop can&#39;t have an initializer&quot; occurs when the head of a for...of loop contains an initializer expression such as |for (var i = 0 of iterable)|. This is not allowed in for-of loops.">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li>
<li><a href="Reference/Errors/Delete_in_strict_mode.html" title="The JavaScript strict mode-only exception &quot;applying the &#39;delete&#39; operator to an unqualified name is deprecated&quot; occurs when variables are attempted to be deleted using the delete operator.">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li>
<li><a href="Reference/Errors/Invalid_for-in_initializer.html" title="The JavaScript strict mode-only exception &quot;for-in loop head declarations may not have initializers&quot; occurs when the head of a for...in contains an initializer expression, such as |for (var i = 0 in obj)|. This is not allowed in for-of loops in strict mode.">SyntaxError: for-in loop head declarations may not have initializers</a></li>
<li><a href="Reference/Errors/Unnamed_function_statement.html" title="The JavaScript exception &quot;function statement requires a name&quot; occurs when there is a function statement in the code that requires a name.">SyntaxError: function statement requires a name</a></li>
<li><a href="Reference/Errors/Identifier_after_number.html" title="The JavaScript exception &quot;identifier starts immediately after numeric literal&quot; occurs when an identifier started with a digit. Identifiers can only start with a letter, underscore (_), or dollar sign ($).">SyntaxError: identifier starts immediately after numeric literal</a></li>
<li><a href="Reference/Errors/Illegal_character.html" title="The JavaScript exception &quot;illegal character&quot; occurs when there is an invalid or unexpected token that doesn&#39;t belong at this position in the code.">SyntaxError: illegal character</a></li>
<li><a href="Reference/Errors/Bad_regexp_flag.html" title="The JavaScript exception &quot;invalid regular expression flag&quot; occurs when the flags, defined after the second slash in regular expression literal, are not one of g, i, m, s, u, or y.">SyntaxError: invalid regular expression flag "x"</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_argument_list.html" title="The JavaScript exception &quot;missing ) after argument list&quot; occurs when there is an error with how a function is called. This might be a typo, a missing operator, or an unescaped string.">SyntaxError: missing ) after argument list</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_condition.html" title="The JavaScript exception &quot;missing ) after condition&quot; occurs when there is an error with how an if condition is written. It must appear in parenthesis after the if keyword.">SyntaxError: missing ) after condition</a></li>
<li><a href="Reference/Errors/Missing_colon_after_property_id.html" title="The JavaScript exception &quot;missing : after property id&quot; occurs when objects are created using the object initializer syntax. A colon (:) separates keys and values for the object&#39;s properties. Somehow, this colon is missing or misplaced.">SyntaxError: missing : after property id</a></li>
<li><a href="Reference/Errors/Missing_semicolon_before_statement.html" title="The JavaScript exception &quot;missing ; before statement&quot; occurs when there is a semicolon (;) missing somewhere and can&#39;t be added by automatic semicolon insertion (ASI). You need to provide a semicolon, so that JavaScript can parse the source code correctly.">SyntaxError: missing ; before statement</a></li>
<li><a href="Reference/Errors/Missing_initializer_in_const.html" title="The JavaScript exception &quot;missing = in const declaration&quot; occurs when a const declaration was not given a value in the same statement (like const RED_FLAG;). You need to provide one (const RED_FLAG = &#39;#ff0&#39;).">SyntaxError: missing = in const declaration</a></li>
<li><a href="Reference/Errors/Missing_bracket_after_list.html" title="The JavaScript exception &quot;missing ] after element list&quot; occurs when there is an error with the array initializer syntax somewhere. Likely there is a closing bracket (&quot;]&quot;) or a comma (&quot;,&quot;) missing.">SyntaxError: missing ] after element list</a></li>
<li><a href="Reference/Errors/Missing_formal_parameter.html" title="The JavaScript exception &quot;missing formal parameter&quot; occurs when your function declaration is missing valid parameters.">SyntaxError: missing formal parameter</a></li>
<li><a href="Reference/Errors/Missing_name_after_dot_operator.html" title="The JavaScript exception &quot;missing name after . operator&quot; occurs when there is a problem with how the dot operator (.) is used for property access.">SyntaxError: missing name after . operator</a></li>
<li><a href="Reference/Errors/No_variable_name.html" title="The JavaScript exception &quot;missing variable name&quot; occurs way too often as naming things is so hard. Or maybe a comma is wrong. Check for typos!">SyntaxError: missing variable name</a></li>
<li><a href="Reference/Errors/Missing_curly_after_function_body.html" title="The JavaScript exception &quot;missing } after function body&quot; occurs when there is a syntax mistake when creating a function somewhere. Check if any closing curly brackets or parenthesis are in the correct order.">SyntaxError: missing } after function body</a></li>
<li><a href="Reference/Errors/Missing_curly_after_property_list.html" title="The JavaScript exception &quot;missing } after property list&quot; occurs when there is a mistake in the object initializer syntax somewhere. Might be in fact a missing curly bracket, but could also be a missing comma.">SyntaxError: missing } after property list</a></li>
<li><a href="Reference/Errors/Redeclared_parameter.html" title="The JavaScript exception &quot;redeclaration of formal parameter&quot; occurs when the same variable name occurs as a function parameter and is then redeclared using a let assignment in a function body again.">SyntaxError: redeclaration of formal parameter "x"</a></li>
<li><a href="Reference/Errors/Bad_return_or_yield.html" title="The JavaScript exception &quot;return (or yield) not in function&quot; occurs when a return or yield statement is called outside of a function.">SyntaxError: return not in function</a></li>
<li><a href="Reference/Errors/Equal_as_assign.html" title="The JavaScript warning &quot;test for equality (==) mistyped as assignment (=)?&quot; occurs when there was an assignment (=) when you would normally expect a test for equality (==).">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li>
<li><a href="Reference/Errors/Unterminated_string_literal.html" title="The JavaScript error &quot;unterminated string literal&quot; occurs when there is an unterminated String somewhere. String literals must be enclosed by single (&#39;) or double (&quot;) quotes.">SyntaxError: unterminated string literal</a></li>
<li><a href="Reference/Errors/No_properties.html" title="The JavaScript exception &quot;null (or undefined) has no properties&quot; occurs when you attempt to access properties of null and undefined. They don&#39;t have any.">TypeError: "x" has no properties</a></li>
<li><a href="Reference/Errors/Unexpected_type.html" title="The JavaScript exception &quot;x is (not) y&quot; occurs when there was an unexpected type. Oftentimes, unexpected undefined or null values.">TypeError: "x" is (not) "y"</a></li>
<li><a href="Reference/Errors/Not_a_constructor.html" title="The JavaScript exception &quot;is not a constructor&quot; occurs when there was an attempt to use an object or a variable as a constructor, but that object or variable is not a constructor.">TypeError: "x" is not a constructor</a></li>
<li><a href="Reference/Errors/Not_a_function.html" title="The JavaScript exception &quot;is not a function&quot; occurs when there was an attempt to call a value from a function, but the value is not actually a function.">TypeError: "x" is not a function</a></li>
<li><a href="Reference/Errors/No_non-null_object.html" title="The JavaScript exception &quot;is not a non-null object&quot; occurs when an object is expected somewhere and wasn&#39;t provided. null is not an object and won&#39;t work.">TypeError: "x" is not a non-null object</a></li>
<li><a href="Reference/Errors/Read-only.html" title="The JavaScript strict mode-only exception &quot;is read-only&quot; occurs when a global variable or object property that was assigned to is a read-only property.">TypeError: "x" is read-only</a></li>
<li><a href="Reference/Errors/is_not_iterable.html" title="The JavaScript exception &quot;is not iterable&quot; occurs when the value which is given as the right hand-side of for…of or as argument of a function such as Promise.all or TypedArray.from, is not an iterable object.">TypeError: 'x' is not iterable</a></li>
<li><a href="Reference/Errors/More_arguments_needed.html" title="The JavaScript exception &quot;more arguments needed&quot; occurs when there is an error with how a function is called. More arguments need to be provided.">TypeError: More arguments needed</a></li>
<li><a href="Reference/Errors/Reduce_of_empty_array_with_no_initial_value.html" title="The JavaScript exception &quot;reduce of empty array with no initial value&quot; occurs when a reduce function is used.">TypeError: Reduce of empty array with no initial value</a></li>
<li><a href="Reference/Errors/Called_on_incompatible_type.html" title="The JavaScript exception &quot;called on incompatible target (or object)&quot; occurs when a function (on a given object), is called with a this not corresponding to the type expected by the function.">TypeError: X.prototype.y called on incompatible type</a></li>
<li><a href="Reference/Errors/Dead_object.html" title="The JavaScript exception &quot;can&#39;t access dead object&quot; occurs when Firefox disallows add-ons to keep strong references to DOM objects after their parent document has been destroyed to improve in memory usage and to prevent memory leaks.">TypeError: can't access dead object</a></li>
<li><a href="Reference/Errors/Cant_access_property.html" title="The JavaScript exception &quot;can&#39;t access property&quot; occurs when property access was operated on undefined or null values.">TypeError: can't access property "x" of "y"</a></li>
<li><a href="Reference/Errors/Cant_assign_to_property.html" title="The JavaScript strict mode exception &quot;can&#39;t assign to property&quot; occurs when attempting to create a property on primitive value such as a symbol, a string, a number or a boolean. Primitive values cannot hold any property.">TypeError: can't assign to property "x" on "y": not an object</a></li>
<li><a href="Reference/Errors/Cant_define_property_object_not_extensible.html" title="The JavaScript exception &quot;can&#39;t define property &quot;x&quot;: &quot;obj&quot; is not extensible&quot; occurs when Object.preventExtensions() marked an object as no longer extensible, so that it will never have properties beyond the ones it had at the time it was marked as non-extensible.">TypeError: can't define property "x": "obj" is not extensible</a></li>
<li><a href="Reference/Errors/Non_configurable_array_element.html" title="The JavaScript exception &quot;can&#39;t delete non-configurable array element&quot; occurs when it was attempted to shorten the length of an array, but one of the array&#39;s elements is non-configurable.">TypeError: can't delete non-configurable array element</a></li>
<li><a href="Reference/Errors/Cant_redefine_property.html" title="The JavaScript exception &quot;can&#39;t redefine non-configurable property&quot; occurs when it was attempted to redefine a property, but that property is non-configurable.">TypeError: can't redefine non-configurable property "x"</a></li>
<li><a href="Reference/Errors/in_operator_no_object.html" title="The JavaScript exception &quot;right-hand side of &#39;in&#39; should be an object&quot; occurs when the in operator was used to search in strings, or in numbers, or other primitive types. It can only be used to check if a property is in an object.">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li>
<li><a href="Reference/Errors/Cyclic_object_value.html" title="The JavaScript exception &quot;cyclic object value&quot; occurs when object references were found in JSON. JSON.stringify() doesn&#39;t try to solve them and fails accordingly.">TypeError: cyclic object value</a></li>
<li><a href="Reference/Errors/invalid_right_hand_side_instanceof_operand.html" title="The JavaScript exception &quot;invalid &#39;instanceof&#39; operand&quot; occurs when the right hand side operands of the instanceof operator isn&#39;t used with a constructor object, i.e. an object which has a prototype property and is callable.">TypeError: invalid 'instanceof' operand 'x'</a></li>
<li><a href="Reference/Errors/Array_sort_argument.html" title="The JavaScript exception &quot;invalid Array.prototype.sort argument&quot; occurs when the argument of Array.prototype.sort() isn&#39;t either undefined or a function which compares its operands.">TypeError: invalid Array.prototype.sort argument</a></li>
<li><a href="Reference/Errors/Typed_array_invalid_arguments.html" title="The JavaScript exception &quot;invalid arguments&quot; occurs when typed array constructors are provided with a wrong argument.">TypeError: invalid arguments</a></li>
<li><a href="Reference/Errors/Invalid_const_assignment.html" title="The JavaScript exception &quot;invalid assignment to const&quot; occurs when it was attempted to alter a constant value. JavaScript const declarations can&#39;t be re-assigned or redeclared.">TypeError: invalid assignment to const "x"</a></li>
<li><a href="Reference/Errors/Cant_delete.html" title="The JavaScript exception &quot;property is non-configurable and can&#39;t be deleted&quot; occurs when it was attempted to delete a property, but that property is non-configurable.">TypeError: property "x" is non-configurable and can't be deleted</a></li>
<li><a href="Reference/Errors/Getter_only.html" title="The JavaScript strict mode-only exception &quot;setting getter-only property&quot; occurs when there is an attempt to set a new value to a property for which only a getter is specified.">TypeError: setting getter-only property "x"</a></li>
<li><a href="Reference/Errors/Var_hides_argument.html" title="The JavaScript strict mode-only exception &quot;variable redeclares argument&quot; occurs when the same variable name occurs as a function parameter and is then redeclared using a var assignment in a function body again.">TypeError: variable "x" redeclares argument</a></li>
<li><a href="Reference/Errors/Malformed_URI.html" title="The JavaScript exception &quot;malformed URI sequence&quot; occurs when URI encoding or decoding wasn&#39;t successful.">URIError: malformed URI sequence</a></li>
<li><a href="Reference/Errors/Already_has_pragma.html" title="The JavaScript warning &quot;-file- is being assigned a //# sourceMappingURL, but already has one.&quot; occurs when a source map has been specified more than once for a given JavaScript source.">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li>
<li><a href="Reference/Errors/Bad_octal.html" title="The JavaScript warning &quot;08 (or 09) is not a legal ECMA-262 octal constant&quot; occurs when 08 or 09 number literals are used. They can&#39;t be interpreted as an octal number.">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li>
<li><a href="Reference/Errors/Deprecated_toLocaleFormat.html" title="The JavaScript warning &quot;Date.prototype.toLocaleFormat is deprecated; consider using Intl.DateTimeFormat instead&quot; occurs when the non-standard Date.prototype.toLocaleFormat method is used.">Warning: Date.prototype.toLocaleFormat is deprecated</a></li>
<li><a href="Reference/Errors/For-each-in_loops_are_deprecated.html" title="The JavaScript warning &quot;JavaScript 1.6&#39;s for-each-in loops are deprecated; consider using ES6 for-of instead&quot; occurs when a for each (variable in obj) statement is used.">Warning: JavaScript 1.6's for-each-in loops are deprecated</a></li>
<li><a href="Reference/Errors/Deprecated_String_generics.html" title="The JavaScript warning about string generics occurs in Firefox versions prior to 68. String generics have been removed starting with Firefox 68.">Warning: String.x is deprecated; use String.prototype.x instead</a></li>
<li><a href="Reference/Errors/Deprecated_expression_closures.html" title="The JavaScript warning &quot;expression closures are deprecated&quot; occurs when the non-standard expression closure syntax (shorthand function syntax) is used.">Warning: expression closures are deprecated</a></li>
<li><a href="Reference/Errors/Stmt_after_return.html" title="The JavaScript warning &quot;unreachable code after return statement&quot; occurs when using an expression after a return statement, or when using a semicolon-less return statement but including an expression directly after.">Warning: unreachable code after return statement</a></li>
</ol></li>
<li>Misc
<ol>
<li><a href="JavaScript_technologies_overview.html">JavaScript technologies overview</a></li>
<li><a href="Reference/Lexical_grammar.html">Lexical grammar</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Enumerability_and_ownership_of_properties.html">Enumerability and ownership of properties</a></li>
<li><a href="Reference/Iteration_protocols.html">Iteration protocols</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Reference/Strict_mode/Transitioning_to_strict_mode.html">Transitioning to strict mode</a></li>
<li><a href="Reference/Template_literals.html">Template literals</a></li>
<li><a href="Reference/Deprecated_and_obsolete_features.html">Deprecated features</a></li>
</ol></li>
</ol>
</div>
</div>
</div>
</div>
</div>
<section class="newsletter-container">
<div id="newsletter-form-container" class="newsletter">
<section class="newsletter-head">
<h2 id="learn-the-best-of-web-development-7" class="newsletter-teaser">Learn the best of web development</h2>
<p>Get the latest and greatest from MDN delivered straight to your inbox.</p>
<p>The newsletter is offered in English only at the moment.</p>
</section>
<div class="form-group newsletter-group-email">
E-mail
</div>
<div id="newsletter-privacy" class="form-group form-group-agree newsletter-group-privacy" data-aria-hidden="false">
I’m okay with Mozilla handling my info as explained in this <a href="../../../../../external.html?link=https://www.mozilla.org/privacy/">Privacy Policy</a>.
</div>
<div class="newsletter-group-submit">
Sign up now
</div>
<span>Hide Newsletter Sign-up</span>
</div>
</section>
<div class="content-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/" class="nav-footer-logo">MDN Web Docs</a>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Web Technologies</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn Web Development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/About">About MDN</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Feedback</a></li>
</ul>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/">About</a></li>
<li><a href="../../../../../external.html?link=https://shop.spreadshirt.com/mdn-store/">MDN Web Docs Store</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/contact/">Contact Us</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/firefox/?utm_source=developer.mozilla.org&amp;utm_campaign=footer&amp;utm_medium=referral">Firefox</a></li>
</ul>
<div class="social social-mdn">
<h4 id="mdn-7">MDN</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<div class="social social-moz">
<h4 id="mozilla-7">Mozilla</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<p>© 2005-2020 Mozilla and individual contributors. Content is available under <a href="../../../../../external.html?link=https://developer.mozilla.org/docs/MDN/About#Copyrights_and_licenses">these licenses</a>.</p>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/legal/terms/mozilla">Terms</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/">Privacy</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/#cookies">Cookies</a></li>
</ul>
</div>
</div>
<div id="auth-modal" class="modal hidden">
<section class="auth-providers" tabindex="-1" data-role="dialog" data-aria-modal="true" data-aria-labelledby="modal-main-heading">
<h2 id="modal-main-heading">Sign In</h2>
<p>Sign in to enjoy the benefits of an MDN account. If you haven’t already created an account, you will be prompted to do so after signing in.</p>
<div class="auth-button-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/users/github/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FInheritance_and_the_prototype_chain" class="github-auth">Sign in with Github</a> <a href="../../../../../external.html?link=https://developer.mozilla.org/users/google/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FInheritance_and_the_prototype_chain" class="google-auth">Sign in with Google</a>
</div>
<span>Close modal</span>
</section>
</div>
<div id="react-container" data-component-name="SPA">
<div class="loading-bar">

</div>
<ul>
<li><a href="#content" id="skip-main">Skip to main content</a></li>
<li><a href="#language" id="skip-language">Select language</a></li>
<li><a href="#main-q" id="skip-search">Skip to search</a></li>
</ul>
<ul>
<li>Technologies
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Technologies Overview</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide/Graphics">Graphics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API">APIs / DOM</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions">Browser Extensions</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/MathML">MathML</a></li>
</ul></li>
<li>References &amp; Guides
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn web development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Tutorials">Tutorials</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Reference">References</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide">Developer Guides</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Accessibility">Accessibility</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Games">Game development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">...more docs</a></li>
</ul></li>
<li>Feedback
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Send Feedback</a></li>
<li><a href="../../../../../external.html?link=https://support.mozilla.org/">Get Firefox help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://stackoverflow.com/">Get web development help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Community">Join the MDN community</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/sprints/issues/new?template=issue-template.md&amp;projects=mdn/sprints/2&amp;labels=user-report&amp;title=/en-US/docs/Web/JavaScript/JavaScript_technologies_overview">Report a content problem 🌐</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/kuma/issues/new/choose">Report an issue 🌐</a></li>
</ul></li>
</ul>
<div class="header-search">
Search MDN
<span>Open search</span>
</div>
<div data-role="main">
<div class="titlebar-container">
<div class="titlebar">

</div>
</div>
<div class="full-width-row-container">
<div class="max-content-width-container">
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web" class="breadcrumb-chevron"><span class="pre-text">See </span><span data-property="name">Web technology for developers</span></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript" class="breadcrumb-previous"><span class="pre-text">See </span><span data-property="name">JavaScript</span></a></li>
<li><a href="JavaScript_technologies_overview.html" class="crumb-current-page"><span data-property="name" data-aria-current="page">JavaScript technologies overview</span></a></li>
</ol>
<div class="dropdown-container language-menu">
English<span class="dropdown-arrow-down" data-aria-hidden="true">▼</span>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/de/docs/Web/JavaScript/JavaScript_technologieuebersicht" title="German">Deutsch</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/es/docs/Web/JavaScript/Descripción_de_las_tecnologías_JavaScript" title="Spanish">Español</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/fr/docs/Web/JavaScript/JavaScript_technologies_overview" title="French">Français</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/id/docs/Web/JavaScript/sekilas_teknologi_JavaScript" title="Indonesian">Bahasa Indonesia</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/it/docs/Web/JavaScript/Il_DOM_e_JavaScript" title="Italian">Italiano</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ja/docs/Web/JavaScript/JavaScript_technologies_overview" title="Japanese">日本語</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ko/docs/Web/JavaScript/JavaScript_technologies_overview" title="Korean">한국어</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/JavaScript_technologies_overview" title="Portuguese (Brazilian)">Português (do Brasil)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ru/docs/Web/JavaScript/JavaScript_technologies_overview" title="Russian">Русский</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/uk/docs/Web/JavaScript/oglyad_tehnologiy_JavaScript" title="Ukrainian">Українська</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/JavaScript_technologies_overview" title="Chinese (Simplified)">中文 (简体)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/JavaScript_technologies_overview" title="Chinese (Traditional)">正體中文 (繁體)</a></li>
<li><a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/JavaScript_technologies_overview$locales" id="translations-add">Add a translation</a></li>
</ul>
</div>
</div>
</div>
<div class="wiki-left-present content-layout">
<section class="document-toc">
<h2 id="on-this-page-1">On this Page</h2>
Jump to section
<ul>
<li><a href="#Introduction">Introduction</a></li>
<li><a href="#JavaScript_the_core_language_ECMAScript">JavaScript, the core language (ECMAScript)</a></li>
<li><a href="#DOM_APIs">DOM APIs</a></li>
<li><a href="#Other_notable_APIs">Other notable APIs</a></li>
<li><a href="#sidebar-quicklinks">Related topics</a></li>
</ul>
</section>
<div id="content" class="article text-content">
<div>

</div>
<h2 id="Introduction">Introduction</h2>
<p>Whereas <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</a> defines a webpage's structure and content and <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a> sets the formatting and appearance, <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a> adds interactivity to a webpage and creates rich web applications.</p>
<p>However, the umbrella term "JavaScript" as understood in a web browser context contains several very different elements. One of them is the core language (ECMAScript), another is the collection of the <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Reference/API">Web APIs</a>, including the DOM (Document Object Model).</p>
<h2 id="JavaScript_the_core_language_ECMAScript">JavaScript, the core language (ECMAScript)</h2>
<p>The core language of JavaScript is standardized by the ECMA TC39 committee as a language named <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/JavaScript/Language_Resources">ECMAScript</a>.</p>
<p>This core language is also used in non-browser environments, for example in <a href="../../../../../external.html?link=http://nodejs.org/" class="external">node.js</a>.</p>
<h3 id="What_falls_under_the_ECMAScript_scope">What falls under the ECMAScript scope?</h3>
<p>Among other things, ECMAScript defines:</p>
<ul>
<li>Language syntax (parsing rules, keywords, control flow, object literal initialization, ...)</li>
<li>Error handling mechanisms (<a href="Reference/Statements/throw.html"><code>throw</code></a>, <a href="Reference/Statements/try...html"><code>try...catch</code></a>, ability to create user-defined <a href="Reference/Global_Objects/Error.html"><code>Error</code></a> types)</li>
<li>Types (boolean, number, string, function, object, ...)</li>
<li>The global object. In a browser, this global object is the <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/Window" title="The Window interface represents a window containing a DOM document; the document property points to the DOM document loaded in that window."><code>window</code></a> object, but ECMAScript only defines the APIs not specific to browsers, e.g. <a href="Reference/Global_Objects/parseInt.html"><code>parseInt</code></a>, <a href="Reference/Global_Objects/parseFloat.html"><code>parseFloat</code></a>, <a href="Reference/Global_Objects/decodeURI.html"><code>decodeURI</code></a>, <a href="Reference/Global_Objects/encodeURI.html"><code>encodeURI</code></a>...</li>
<li>A prototype-based inheritance mechanism</li>
<li>Built-in objects and functions (<a href="Reference/Global_Objects/JSON.html"><code>JSON</code></a>, <a href="Reference/Global_Objects/Math.html"><code>Math</code></a>, <a href="Reference/Global_Objects/Array/prototype.html#Methods" class="new"><code>Array.prototype</code></a> methods, <a href="Reference/Global_Objects/Object.html"><code>Object</code></a> introspection methods, etc.)</li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
</ul>
<h3 id="Browser_support">Browser support</h3>
<p>As of October 2016, the current versions of the major Web browsers implement <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/New_in_JavaScript/ECMAScript_5_support_in_Mozilla">ECMAScript 5.1</a> and <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/New_in_JavaScript/ECMAScript_2015_support_in_Mozilla">ECMAScript 2015</a>, but older versions (still in use) implement ECMAScript 5 only.</p>
<h3 id="Future">Future</h3>
<p>The major 6th Edition of ECMAScript was officially approved and published as a standard on June 17, 2015 by the ECMA General Assembly. Since then ECMAScript Editions are published on a yearly basis.</p>
<h3 id="Internationalization_API">Internationalization API</h3>
<p>The <a href="../../../../../external.html?link=http://ecma-international.org/ecma-402/1.0/" class="external">ECMAScript Internationalization API Specification</a> is an addition to the ECMAScript Language Specification, also standardized by Ecma TC39. The internationalization API provides collation (string comparison), number formatting, and date-and-time formatting for JavaScript applications, letting the applications choose the language and tailor the functionality to their needs. The initial standard was approved in December 2012; the status of implementations in browsers is tracked in the documentation of the <a href="Reference/Global_Objects/Intl.html"><code>Intl</code></a> object. The Internationalization specification is nowadays also ratified on a yearly basis and browsers constantly improve their implementation.</p>
<h2 id="DOM_APIs">DOM APIs</h2>
<h3 id="WebIDL">WebIDL</h3>
<p>The <a href="../../../../../external.html?link=http://www.w3.org/TR/WebIDL/" class="external">WebIDL specification</a> provides the glue between the DOM technologies and ECMAScript.</p>
<h3 id="The_Core_of_the_DOM">The Core of the DOM</h3>
<p>The Document Object Model (DOM) is a cross-platform, <strong>language-independent convention</strong> for representing and interacting with objects in HTML, XHTML and XML documents. Objects in the <strong>DOM tree</strong> may be addressed and manipulated by using methods on the objects. The <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/W3C">W3C</a> standardizes the Core Document Object Model, which defines language-agnostic interfaces that abstract HTML and XML documents as objects, and also defines mechanisms to manipulate this abstraction. Among the things defined by the DOM, we can find:</p>
<ul>
<li>The document structure, a tree model, and the DOM Event architecture in <a href="../../../../../external.html?link=http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html" class="external">DOM core</a>: <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/Node" title="Node is an interface from which various types of DOM API objects inherit, allowing those types to be treated similarly; for example, inheriting the same set of methods, or being testable in the same way."><code>Node</code></a>, <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/Element" title="Element is the most general base class from which all element objects (i.e. objects that represent elements) in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element."><code>Element</code></a>, <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment" title="The DocumentFragment interface represents a minimal document object that has no parent. It is used as a lightweight version of Document that stores a segment of a document structure comprised of nodes just like a standard document."><code>DocumentFragment</code></a>, <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/Document" title="The Document interface represents any web page loaded in the browser and serves as an entry point into the web page&#39;s content, which is the DOM tree."><code>Document</code></a>, <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation" title="The DOMImplementation interface represents an object providing methods which are not dependent on any particular document. Such an object is returned by the Document.implementation property."><code>DOMImplementation</code></a>, <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/Event" title="The Event interface represents an event which takes place in the DOM."><code>Event</code></a>, <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/EventTarget" title="EventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them."><code>EventTarget</code></a>, …</li>
<li>A less rigorous definition of the DOM Event Architecture, as well as specific events in <a href="../../../../../external.html?link=http://dev.w3.org/2006/webapi/DOM-Level-3-Events/html/DOM3-Events.html" class="external">DOM events</a>.</li>
<li>Other things such as <a href="../../../../../external.html?link=http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html" class="external">DOM Traversal</a> and <a href="../../../../../external.html?link=http://html5.org/specs/dom-range.html" class="external">DOM Range</a>.</li>
</ul>
<p>From the ECMAScript point of view, objects defined in the DOM specification are called "host objects".</p>
<h3 id="HTML_DOM">HTML DOM</h3>
<p><a href="../../../../../external.html?link=http://www.whatwg.org/html" class="external">HTML</a>, the Web's markup language, is specified in terms of the DOM. Layered above the abstract concepts defined in DOM Core, HTML also defines the <em>meaning</em> of elements. The HTML DOM includes such things as the <code>className</code> property on HTML elements, or APIs such as <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/Document/body" title="The Document.body property represents the &lt;body&gt; or &lt;frameset&gt; node of the current document, or null if no such element exists."><code>document.body</code></a>.</p>
<p>The HTML specification also defines restrictions on documents; for example, it requires all children of a <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul" title="The HTML &lt;ul&gt; element represents an unordered list of items, typically rendered as a bulleted list."><code>&lt;ul&gt;</code></a> element, which represents an unordered list, to be <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li" title="The HTML &lt;li&gt; element is used to represent an item in a list."><code>&lt;li&gt;</code></a> elements, as those represent list items. In general, it also forbids using elements and attributes that aren't defined in a standard.</p>
<p>Looking for the <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/Document" title="The Document interface represents any web page loaded in the browser and serves as an entry point into the web page&#39;s content, which is the DOM tree."><code>Document</code></a> object, <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/Window" title="The Window interface represents a window containing a DOM document; the document property points to the DOM document loaded in that window."><code>Window</code></a> object, and the other DOM elements? Read the <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">DOM documentation</a>.</p>
<h2 id="Other_notable_APIs">Other notable APIs</h2>
<ul>
<li>The <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout" title="The documentation about this has not yet been written; please consider contributing!"><code>setTimeout</code></a> and <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval" title="The documentation about this has not yet been written; please consider contributing!"><code>setInterval</code></a> functions were first specified on the <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/Window" title="The Window interface represents a window containing a DOM document; the document property points to the DOM document loaded in that window."><code>Window</code></a> interface in HTML Standard.</li>
<li><a href="../../../../../external.html?link=https://dvcs.w3.org/hg/xhr/raw-file/tip/Overview.html" class="external">XMLHttpRequest</a> makes it possible to send asynchronous HTTP requests.</li>
<li>The <a href="../../../../../external.html?link=http://dev.w3.org/csswg/cssom/" class="external">CSS Object Model</a> abstract CSS rules as objects.</li>
<li><a href="../../../../../external.html?link=http://www.whatwg.org/specs/web-workers/current-work/" class="external">WebWorkers</a> allows parallel computation.</li>
<li><a href="../../../../../external.html?link=http://www.whatwg.org/C/#network" class="external">WebSockets</a> allows low-level bidirectional communication.</li>
<li><a href="../../../../../external.html?link=http://www.whatwg.org/html/#2dcontext" class="external">Canvas 2D Context</a> is a drawing API for <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas" title="Use the HTML &lt;canvas&gt; element with either the canvas scripting API or the WebGL API to draw graphics and animations."><code>&lt;canvas&gt;</code></a>.</li>
</ul>
<div class="metadata">
<section class="document-meta">
<h4 id="metadata-8">Metadata</h4>
<ul>
<li><strong>Last modified:</strong> Mar 13, 2020, <a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/JavaScript_technologies_overview$history">by MDN contributors</a></li>
</ul>
</section>
</div>
</div>
<div id="sidebar-quicklinks" class="sidebar">
<div class="quick-links">
<div class="quick-links-head sidebar-heading">
Related Topics
</div>
<div>
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong><em>JavaScript</em></strong></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong>Tutorials:</strong></a></li>
<li>Complete beginners
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics">JavaScript basics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps">JavaScript first steps</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks">JavaScript building blocks</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Introducing JavaScript objects</a></li>
</ol></li>
<li>JavaScript Guide
<ol>
<li><a href="Guide/Introduction.html">Introduction</a></li>
<li><a href="Guide/Grammar_and_Types.html">Grammar and types</a></li>
<li><a href="Guide/Control_flow_and_error_handling.html">Control flow and error handling</a></li>
<li><a href="Guide/Loops_and_iteration.html">Loops and iteration</a></li>
<li><a href="Guide/Functions.html">Functions</a></li>
<li><a href="Guide/Expressions_and_Operators.html">Expressions and operators</a></li>
<li><a href="Guide/Numbers_and_dates.html">Numbers and dates</a></li>
<li><a href="Guide/Text_formatting.html">Text formatting</a></li>
<li><a href="Guide/Regular_Expressions.html">Regular expressions</a></li>
<li><a href="Guide/Indexed_collections.html">Indexed collections</a></li>
<li><a href="Guide/Keyed_collections.html">Keyed collections</a></li>
<li><a href="Guide/Working_with_Objects.html">Working with objects</a></li>
<li><a href="Guide/Details_of_the_Object_Model.html">Details of the object model</a></li>
<li><a href="Guide/Using_promises.html">Using promises</a></li>
<li><a href="Guide/Iterators_and_generators.html">Iterators and generators</a></li>
<li><a href="Guide/Meta_programming.html">Meta programming</a></li>
<li><a href="Guide/Modules.html">JavaScript modules</a></li>
</ol></li>
<li>Intermediate
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Introducing JavaScript objects</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs">Client-side web APIs</a></li>
<li><a href="A_re-introduction_to_JavaScript.html">A re-introduction to JavaScript</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Equality_comparisons_and_sameness.html">Equality comparisons and sameness</a></li>
<li><a href="Closures.html">Closures</a></li>
</ol></li>
<li>Advanced
<ol>
<li><a href="Inheritance_and_the_prototype_chain.html">Inheritance and the prototype chain</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Typed_arrays.html">JavaScript typed arrays</a></li>
<li><a href="Memory_Management.html">Memory Management</a></li>
<li><a href="EventLoop.html">Concurrency model and Event Loop</a></li>
</ol></li>
<li><strong><a href="Reference.html">References:</a></strong></li>
<li>Built-in objects
<ol>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/AggregateError.html" title="The AggregateError object represents an error when several errors need to be wrapped in a single error.">AggregateError</a></li>
<li><a href="Reference/Global_Objects/Array.html" title="The JavaScript Array class is a global object that is used in the construction of arrays; which are high-level, list-like objects.">Array</a></li>
<li><a href="Reference/Global_Objects/ArrayBuffer.html" title="The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer.">ArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/AsyncFunction.html" title="The AsyncFunction constructor creates a new async function object. In JavaScript, every asynchronous function is actually an AsyncFunction object.">AsyncFunction</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/AsyncIterator.html" title="The AsyncIterator global object is an abstract class providing helper methods, similar to the ones exposed on Array instances.">AsyncIterator</a></li>
<li><a href="Reference/Global_Objects/Atomics.html" title="The Atomics object provides atomic operations as static methods. They are used with SharedArrayBuffer objects.">Atomics</a></li>
<li><a href="Reference/Global_Objects/BigInt.html" title="BigInt is a built-in object that provides a way to represent whole numbers larger than 253 - 1, which is the largest number JavaScript can reliably represent with the Number primitive and represented by the Number.MAX_SAFE_INTEGER constant. BigInt can be used for arbitrarily large integers.">BigInt</a></li>
<li><a href="Reference/Global_Objects/BigInt64Array.html" title="The BigInt64Array typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigInt64Array</a></li>
<li><a href="Reference/Global_Objects/BigUint64Array.html" title="The BigUint64Array typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigUint64Array</a></li>
<li><a href="Reference/Global_Objects/Boolean.html" title="The Boolean object is an object wrapper for a boolean value.">Boolean</a></li>
<li><a href="Reference/Global_Objects/DataView.html" title="The DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform&#39;s endianness.">DataView</a></li>
<li><a href="Reference/Global_Objects/Date.html" title="JavaScript Date objects represent a single moment in time in a platform-independent format.">Date</a></li>
<li><a href="Reference/Global_Objects/Error.html" title="Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.">Error</a></li>
<li><a href="Reference/Global_Objects/EvalError.html" title="The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.">EvalError</a></li>
<li><a href="Reference/Global_Objects/Float32Array.html" title="The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float32Array</a></li>
<li><a href="Reference/Global_Objects/Float64Array.html" title="The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float64Array</a></li>
<li><a href="Reference/Global_Objects/Function.html" title="Every JavaScript function is actually a Function object. This can be seen with the code (function(){}).constructor === Function which returns true.">Function</a></li>
<li><a href="Reference/Global_Objects/Generator.html" title="The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.">Generator</a></li>
<li><a href="Reference/Global_Objects/GeneratorFunction.html" title="The GeneratorFunction constructor creates a new generator function object. In JavaScript every generator function is actually a GeneratorFunction object.">GeneratorFunction</a></li>
<li><a href="Reference/Global_Objects/Infinity.html" title="The global property Infinity is a numeric value representing infinity.">Infinity</a></li>
<li><a href="Reference/Global_Objects/Int16Array.html" title="The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int16Array</a></li>
<li><a href="Reference/Global_Objects/Int32Array.html" title="The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int32Array</a></li>
<li><a href="Reference/Global_Objects/Int8Array.html" title="The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int8Array</a></li>
<li><a href="Reference/Global_Objects/InternalError.html" title="The InternalError object indicates an error that occurred internally in the JavaScript engine.">InternalError</a></li>
<li><a href="Reference/Global_Objects/Intl.html" title="The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The Intl object provides access to several constructors as well as functionality common to the internationalization constructors and other language sensitive functions.">Intl</a></li>
<li><a href="Reference/Global_Objects/Intl/Collator.html" title="The Intl.Collator objects enable language sensitive string comparison.">Intl.Collator</a></li>
<li><a href="Reference/Global_Objects/Intl/DateTimeFormat.html" title="The Intl.DateTimeFormat object is a constructor for objects that enable language-sensitive date and time formatting.">Intl.DateTimeFormat</a></li>
<li><a href="Reference/Global_Objects/Intl/DisplayNames.html" title="The Intl.DisplayNames object is a constructor for objects that enables the consistent translation of language, region and script display names.">Intl.DisplayNames</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/Intl/ListFormat.html" title="The Intl.ListFormat object is a constructor for objects that enable language-sensitive list formatting.">Intl.ListFormat</a></li>
<li><a href="Reference/Global_Objects/Intl/Locale.html" title="The Intl.Locale object is a standard built-in property of the Intl object that represents a Unicode locale identifier.">Intl.Locale</a></li>
<li><a href="Reference/Global_Objects/Intl/NumberFormat.html" title="The Intl.NumberFormat object is a constructor for objects that enable language sensitive number formatting.">Intl.NumberFormat</a></li>
<li><a href="Reference/Global_Objects/Intl/PluralRules.html" title="The Intl.PluralRules object enables plural-sensitive formatting and plural-related language rules.">Intl.PluralRules</a></li>
<li><a href="Reference/Global_Objects/Intl/RelativeTimeFormat.html" title="The Intl.RelativeTimeFormat object enables language-sensitive relative time formatting.">Intl.RelativeTimeFormat</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/Iterator.html" title="The Iterator global object is an abstract class providing helper methods, similar to the ones exposed on Array instances.">Iterator</a></li>
<li><a href="Reference/Global_Objects/JSON.html" title="The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can&#39;t be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.">JSON</a></li>
<li><a href="Reference/Global_Objects/Map.html" title="The Map object holds key-value pairs and remembers the original insertion order of the keys.">Map</a></li>
<li><a href="Reference/Global_Objects/Math.html" title="Math is a built-in object that has properties and methods for mathematical constants and functions. Not a function object.">Math</a></li>
<li><a href="Reference/Global_Objects/NaN.html" title="The global NaN property is a value representing Not-A-Number.">NaN</a></li>
<li><a href="Reference/Global_Objects/Number.html" title="The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor. A primitive type object number is created using the Number() function.">Number</a></li>
<li><a href="Reference/Global_Objects/Object.html" title="The Object class represents one of JavaScript&#39;s data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.">Object</a></li>
<li><a href="Reference/Global_Objects/Promise.html" title="The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.">Promise</a></li>
<li><a href="Reference/Global_Objects/Proxy.html" title="The Proxy object is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc).">Proxy</a></li>
<li><a href="Reference/Global_Objects/RangeError.html" title="The RangeError object indicates an error when a value is not in the set or range of allowed values.">RangeError</a></li>
<li><a href="Reference/Global_Objects/ReferenceError.html" title="The ReferenceError object represents an error when a non-existent variable is referenced.">ReferenceError</a></li>
<li><a href="Reference/Global_Objects/Reflect.html" title="Reflect is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of proxy handlers. Reflect is not a function object, so it&#39;s not constructible.">Reflect</a></li>
<li><a href="Reference/Global_Objects/RegExp.html" title="The RegExp object is used for matching text with a pattern.">RegExp</a></li>
<li><a href="Reference/Global_Objects/Set.html" title="The Set object lets you store unique values of any type, whether primitive values or object references.">Set</a></li>
<li><a href="Reference/Global_Objects/SharedArrayBuffer.html" title="The SharedArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. Unlike an ArrayBuffer, a SharedArrayBuffer cannot become detached.">SharedArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/String.html" title="The String global object is a constructor for strings or a sequence of characters.">String</a></li>
<li><a href="Reference/Global_Objects/Symbol.html" title="The data type symbol is a primitive data type. The Symbol() function returns a value of type symbol, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class, but is incomplete as a constructor because it does not support the syntax &quot;new Symbol()&quot;.">Symbol</a></li>
<li><a href="Reference/Global_Objects/SyntaxError.html" title="The SyntaxError object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.">SyntaxError</a></li>
<li><a href="Reference/Global_Objects/TypeError.html" title="The TypeError object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.">TypeError</a></li>
<li><a href="Reference/Global_Objects/TypedArray.html" title="A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.">TypedArray</a></li>
<li><a href="Reference/Global_Objects/URIError.html" title="The URIError object represents an error when a global URI handling function was used in a wrong way.">URIError</a></li>
<li><a href="Reference/Global_Objects/Uint16Array.html" title="The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint16Array</a></li>
<li><a href="Reference/Global_Objects/Uint32Array.html" title="The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint32Array</a></li>
<li><a href="Reference/Global_Objects/Uint8Array.html" title="The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8Array</a></li>
<li><a href="Reference/Global_Objects/Uint8ClampedArray.html" title="The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8ClampedArray</a></li>
<li><a href="Reference/Global_Objects/WeakMap.html" title="The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.">WeakMap</a></li>
<li><a href="Reference/Global_Objects/WeakSet.html" title="The WeakSet object lets you store weakly held objects in a collection.">WeakSet</a></li>
<li><a href="Reference/Global_Objects/WebAssembly.html" title="The WebAssembly JavaScript object acts as the namespace for all WebAssembly-related functionality.">WebAssembly</a></li>
<li><a href="Reference/Global_Objects/decodeURI.html" title="The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or by a similar routine.">decodeURI()</a></li>
<li><a href="Reference/Global_Objects/decodeURIComponent.html" title="The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.">decodeURIComponent()</a></li>
<li><a href="Reference/Global_Objects/encodeURI.html" title="The encodeURI() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURI()</a></li>
<li><a href="Reference/Global_Objects/encodeURIComponent.html" title="The encodeURIComponent() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURIComponent()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/escape.html" title="The escape() function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.">escape()</a></li>
<li><a href="Reference/Global_Objects/eval.html" title="The eval() function evaluates JavaScript code represented as a string.">eval()</a></li>
<li><a href="Reference/Global_Objects/globalThis.html" title="The global globalThis property contains the global this value, which is akin to the global object.">globalThis</a></li>
<li><a href="Reference/Global_Objects/isFinite.html" title="The global isFinite() function determines whether the passed value is a finite number. If  needed, the parameter is first converted to a number.">isFinite()</a></li>
<li><a href="Reference/Global_Objects/isNaN.html" title="The isNaN() function determines whether a value is NaN or not. Note, coercion inside the isNaN function has interesting rules; you may alternatively want to use Number.isNaN(), as defined in ECMAScript 2015.">isNaN()</a></li>
<li><a href="Reference/Global_Objects/null.html" title="The value null represents the intentional absence of any object value. It is one of JavaScript&#39;s primitive values and is treated as falsy for boolean operations.">null</a></li>
<li><a href="Reference/Global_Objects/parseFloat.html" title="The parseFloat() function parses an argument (converting it to a string first if needed) and returns a floating point number.">parseFloat()</a></li>
<li><a href="Reference/Global_Objects/parseInt.html" title="The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).">parseInt()</a></li>
<li><a href="Reference/Global_Objects/undefined.html" title="The global undefined property represents the primitive value undefined. It is one of JavaScript&#39;s primitive types.">undefined</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/unescape.html" title="The unescape() function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Usually, decodeURI or decodeURIComponent are preferred over unescape.">unescape()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><a href="Reference/Global_Objects/uneval.html" title="The uneval() function creates a string representation of the source code of an Object.">uneval()</a></li>
</ol></li>
<li>Expressions &amp; operators
<ol>
<li><a href="Reference/Operators.html" title="Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).">Arithmetic operators</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/Array_comprehensions" title="The array comprehension syntax was a JavaScript expression which allowed you to quickly assemble a new array based on an existing one. However, it has been removed from the standard and the Firefox implementation. Do not use it!">Array comprehensions</a></li>
<li><a href="Reference/Operators%23Assignment_operators.html" title="An assignment operator assigns a value to its left operand based on the value of its right operand.">Assignment operators</a></li>
<li><a href="Reference/Operators.html" title="Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.">Bitwise operators</a></li>
<li><a href="Reference/Operators/Comma_Operator.html" title="The comma operator evaluates each of its operands (from left to right) and returns the value of the last operand.">Comma operator</a></li>
<li><a href="Reference/Operators.html" title="JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., &lt;=), the operands are first converted to primitives, then to the same type, before comparison.">Comparison operators</a></li>
<li><a href="Reference/Operators/Conditional_Operator.html" title="The conditional (ternary) operator is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy.">Conditional (ternary) operator</a></li>
<li><a href="Reference/Operators/Destructuring_assignment.html" title="The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.">Destructuring assignment</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/Expression_closures" title="Expression closures are a shorthand function syntax for writing simple functions.">Expression closures</a></li>
<li><a href="Reference/Operators/function.html" title="The function keyword can be used to define a function inside an expression.">Function expression</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/Generator_comprehensions" title="The generator comprehension syntax was a JavaScript expression which allowed you to quickly assemble a new generator function based on an existing iterable object. However, it has been removed from the standard and the Firefox implementation. Do not use it!">Generator comprehensions</a></li>
<li><a href="Reference/Operators/Grouping.html" title="The grouping operator ( ) controls the precedence of evaluation in expressions.">Grouping operator</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/Legacy_generator_function" title="The function keyword can be used to define a legacy generator function inside an expression. To make the function a legacy generator, the function body should contain at least one yield expression.">Legacy generator function expression</a></li>
<li><a href="Reference/Operators.html" title="Logical operators are typically used with Boolean (logical) values. When they are, they return a Boolean value. However, the &amp;&amp; and || operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they will return a non-Boolean value.">Logical operators</a></li>
<li><a href="Reference/Operators/Nullish_coalescing_operator.html" title="The nullish coalescing operator (??) is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.">Nullish coalescing operator</a></li>
<li><a href="Reference/Operators/Object_initializer.html" title="Objects can be initialized using new Object(), Object.create(), or using the literal notation (initializer notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).">Object initializer</a></li>
<li><a href="Reference/Operators/Operator_Precedence.html" title="Operator precedence determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.">Operator precedence</a></li>
<li><a href="Reference/Operators/Optional_chaining.html" title="The ?. operator functions similarly to the . chaining operator, except that instead of causing an error if a reference is nullish (null or undefined), the expression short-circuits with a return value of undefined.">Optional chaining</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Operators/Pipeline_operator.html" title="The experimental pipeline operator |&gt; (currently at stage 1) pipes the value of an expression into a function. This allows the creation of chained function calls in a readable manner. The result is syntactic sugar in which a function call with a single argument can be written like this:">Pipeline operator</a></li>
<li><a href="Reference/Operators/Property_Accessors-2.html" title="Property accessors provide access to an object&#39;s properties by using the dot notation or the bracket notation.">Property accessors</a></li>
<li><a href="Reference/Operators/Spread_syntax.html" title="Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.">Spread syntax</a></li>
<li><a href="Reference/Operators/async_function.html" title="The async function keyword can be used to define async functions inside expressions.">async function expression</a></li>
<li><a href="Reference/Operators/await.html" title="The await operator is used to wait for a Promise. It can only be used inside an async function.">await</a></li>
<li><a href="Reference/Operators/class.html" title="The class expression is one way to define a class in ECMAScript 2015. Similar to function expressions, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. ">class expression</a></li>
<li><a href="Reference/Operators/delete.html" title="The JavaScript delete operator removes a property from an object; if no more references to the same property are held, it is eventually released automatically.">delete operator</a></li>
<li><a href="Reference/Operators/function_.html" title="The function* keyword can be used to define a generator function inside an expression.">function* expression</a></li>
<li><a href="Reference/Operators/in.html" title="The in operator returns true if the specified property is in the specified object or its prototype chain.">in operator</a></li>
<li><a href="Reference/Operators/instanceof.html" title="The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object.">instanceof</a></li>
<li><a href="Reference/Operators/new.html" title="The new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.">new operator</a></li>
<li><a href="Reference/Operators/new-2.html" title="The new.target pseudo-property lets you detect whether a function or constructor was called using the new operator. In constructors and functions invoked using the new operator, new.target returns a reference to the constructor or function. In normal function calls, new.target is undefined.">new.target</a></li>
<li><a href="Reference/Operators/super.html" title="The super keyword is used to access and call functions on an object&#39;s parent.">super</a></li>
<li><a href="Reference/Operators/this.html" title="A function&#39;s this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode.">this</a></li>
<li><a href="Reference/Operators/typeof.html" title="The typeof operator returns a string indicating the type of the unevaluated operand.">typeof</a></li>
<li><a href="Reference/Operators/void.html" title="The void operator evaluates the given expression and then returns undefined.">void operator</a></li>
<li><a href="Reference/Operators/yield.html" title="The yield keyword is used to pause and resume a generator function (function* or legacy generator function).">yield</a></li>
<li><a href="Reference/Operators/yield_.html" title="The yield* expression is used to delegate to another generator or iterable object.">yield*</a></li>
</ol></li>
<li>Statements &amp; declarations
<ol>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/Legacy_generator_function_statement" title="The legacy generator function statement declares legacy generator functions with the specified parameters.">Legacy generator function</a></li>
<li><a href="Reference/Statements/async_function.html" title="The async function declaration defines an asynchronous function — a function that returns an AsyncFunction object.">async function</a></li>
<li><a href="Reference/Statements/block.html" title="A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of curly brackets and may optionally be labelled:">block</a></li>
<li><a href="Reference/Statements/break.html" title="The break statement terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.">break</a></li>
<li><a href="Reference/Statements/class.html" title="The class declaration creates a new class with a given name using prototype-based inheritance.">class</a></li>
<li><a href="Reference/Statements/const.html" title="Constants are block-scoped, much like variables defined using the let statement. The value of a constant can&#39;t be changed through reassignment, and it can&#39;t be redeclared.">const</a></li>
<li><a href="Reference/Statements/continue.html" title="The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.">continue</a></li>
<li><a href="Reference/Statements/debugger.html" title="The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.">debugger</a></li>
<li><a href="Reference/Statements/switch.html" title="The default keyword can be used in two situations in JavaScript: within a switch statement, or with an export statement.">default</a></li>
<li><a href="Reference/Statements/do...html" title="The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.">do...while</a></li>
<li><a href="Reference/Statements/Empty.html" title="An empty statement is used to provide no statement, although the JavaScript syntax would expect one.">empty</a></li>
<li><a href="Reference/Statements/export.html" title="The export statement is used when creating JavaScript modules to export functions, objects, or primitive values from the module so they can be used by other programs with the import statement.">export</a></li>
<li><a href="Reference/Statements/for.html" title="The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.">for</a></li>
<li><a href="Reference/Statements/for-await...html" title="The for await...of statement creates a loop iterating over async iterable objects as well as on sync iterables, including: built-in String, Array, Array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined async/sync iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.">for await...of</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/for_each...in" title="The for each...in statement iterates a specified variable over all values of object&#39;s properties. For each distinct property, a specified statement is executed.">for each...in</a></li>
<li><a href="Reference/Statements/for...html" title="The for...in statement iterates over all enumerable properties of an object that are keyed by strings (ignoring ones keyed by Symbols), including inherited enumerable properties.">for...in</a></li>
<li><a href="Reference/Statements/for..-2.html" title="The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.">for...of</a></li>
<li><a href="Reference/Statements/function.html" title="The function declaration (function statement) defines a function with the specified parameters.">function declaration</a></li>
<li><a href="Reference/Statements/function_.html" title="The function* declaration (function keyword followed by an asterisk) defines a generator function, which returns a Generator object.">function*</a></li>
<li><a href="Reference/Statements/if...html" title="The if statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement can be executed.">if...else</a></li>
<li><a href="Reference/Statements/import.html" title="The static import statement is used to import bindings which are exported by another module. ">import</a></li>
<li><a href="Reference/Statements/import-2.html" title="The import.meta object exposes context-specific metadata to a JavaScript module. It contains information about the module, like the module&#39;s URL.">import.meta</a></li>
<li><a href="Reference/Statements/label.html" title="The labeled statement can be used with break or continue statements. It is prefixing a statement with an identifier which you can refer to.">label</a></li>
<li><a href="Reference/Statements/let.html" title="The let statement declares a block scope local variable, optionally initializing it to a value.">let</a></li>
<li><a href="Reference/Statements/return.html" title="The return statement ends function execution and specifies a value to be returned to the function caller.">return</a></li>
<li><a href="Reference/Statements/switch.html" title="The switch statement evaluates an expression, matching the expression&#39;s value to a case clause, and executes statements associated with that case, as well as statements in cases that follow the matching case.">switch</a></li>
<li><a href="Reference/Statements/throw.html" title="The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won&#39;t be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.">throw</a></li>
<li><a href="Reference/Statements/try...html" title="The try...catch statement marks a block of statements to try and specifies a response should an exception be thrown.">try...catch</a></li>
<li><a href="Reference/Statements/var.html" title="The var statement declares a variable, optionally initializing it to a value.">var</a></li>
<li><a href="Reference/Statements/while.html" title="The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.">while</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Statements/with.html" title="The with statement extends the scope chain for a statement.">with</a></li>
</ol></li>
<li>Functions
<ol>
<li><a href="Reference/Functions/Arrow_functions.html" title="An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords. Arrow function expressions are ill suited as methods, and they cannot be used as constructors.">Arrow function expressions</a></li>
<li><a href="Reference/Functions/Default_parameters.html" title="Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.">Default parameters</a></li>
<li><a href="Reference/Functions/Method_definitions.html" title="Starting with ECMAScript 2015, a shorter syntax for method definitions on objects initializers is introduced. It is a shorthand for a function assigned to the method&#39;s name.">Method definitions</a></li>
<li><a href="Reference/Functions/rest_parameters.html" title="The rest parameter syntax allows us to represent an indefinite number of arguments as an array.">Rest parameters</a></li>
<li><a href="Reference/Functions/arguments.html" title="arguments is an Array-like object accessible inside functions that contains the values of the arguments passed to that function.">The arguments object</a></li>
<li><a href="Reference/Functions/get.html" title="The get syntax binds an object property to a function that will be called when that property is looked up.">getter</a></li>
<li><a href="Reference/Functions/set.html" title="The set syntax binds an object property to a function to be called when there is an attempt to set that property.">setter</a></li>
</ol></li>
<li>Classes
<ol>
<li><a href="Reference/Classes/Public_class_fields.html" title="Both static and instance public fields are writable, enumerable, and configurable properties. As such, unlike their private counterparts, they participate in prototype inheritance.">Class fields</a></li>
<li><a href="Reference/Classes/constructor.html" title="The constructor method is a special method for creating and initializing an object created within a class.">constructor</a></li>
<li><a href="Reference/Classes/extends.html" title="The extends keyword is used in class declarations or class expressions to create a class which is a child of another class.">extends</a></li>
<li><a href="Reference/Classes/static.html" title="The static keyword defines a static method for a class. Static methods aren&#39;t called on instances of the class. Instead, they&#39;re called on the class itself.">static</a></li>
</ol></li>
<li>Errors
<ol>
<li><a href="Reference/Errors/Property_access_denied.html" title="There was attempt to access an object for which you have no permission. This is likely an &lt;iframe&gt; element loaded from a different domain for which you violated the same-origin policy.">Error: Permission denied to access property "x"</a></li>
<li><a href="Reference/Errors/Too_much_recursion.html" title="When there are too many function calls, or a function is missing a base case, JavaScript will throw this error.">InternalError: too much recursion</a></li>
<li><a href="Reference/Errors/Not_a_codepoint.html" title="String.fromCodePoint() throws this error when passed NaN values, negative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF (1114111).">RangeError: argument is not a valid code point</a></li>
<li><a href="Reference/Errors/Invalid_array_length.html" title="RangeError">RangeError: invalid array length</a></li>
<li><a href="Reference/Errors/Invalid_date.html" title="RangeError">RangeError: invalid date</a></li>
<li><a href="Reference/Errors/Precision_range.html" title="RangeError">RangeError: precision is out of range</a></li>
<li><a href="Reference/Errors/Bad_radix.html" title="RangeError">RangeError: radix must be an integer</a></li>
<li><a href="Reference/Errors/Resulting_string_too_large.html" title="RangeError">RangeError: repeat count must be less than infinity</a></li>
<li><a href="Reference/Errors/Negative_repetition_count.html" title="RangeError">RangeError: repeat count must be non-negative</a></li>
<li><a href="Reference/Errors/Not_defined.html" title="ReferenceError.">ReferenceError: "x" is not defined</a></li>
<li><a href="Reference/Errors/Undeclared_var.html" title="ReferenceError warning in strict mode only.">ReferenceError: assignment to undeclared variable "x"</a></li>
<li><a href="Reference/Errors/Cant_access_lexical_declaration_before_init.html" title="ReferenceError">ReferenceError: can't access lexical declaration`X' before initialization</a></li>
<li><a href="Reference/Errors/Deprecated_caller_or_arguments_usage.html" title="A strict-mode-only warning that a ReferenceError occurred. JavaScript execution won&#39;t be halted.">ReferenceError: deprecated caller or arguments usage</a></li>
<li><a href="Reference/Errors/Invalid_assignment_left-hand_side.html" title="ReferenceError.">ReferenceError: invalid assignment left-hand side</a></li>
<li><a href="Reference/Errors/Undefined_prop.html" title="(Firefox only) ReferenceError warning which is reported only if javascript.options.strict preference is set to true.">ReferenceError: reference to undefined property "x"</a></li>
<li><a href="Reference/Errors/Deprecated_octal.html" title="SyntaxError in strict mode only.">SyntaxError: "0"-prefixed octal literals and octal escape seq. are deprecated</a></li>
<li><a href="Reference/Errors/Strict_Non_Simple_Params.html" title="SyntaxError.">SyntaxError: "use strict" not allowed in function with non-simple parameters</a></li>
<li><a href="Reference/Errors/Reserved_identifier.html" title="SyntaxError">SyntaxError: "x" is a reserved identifier</a></li>
<li><a href="Reference/Errors/JSON_bad_parse.html" title="SyntaxError">SyntaxError: JSON.parse: bad parsing</a></li>
<li><a href="Reference/Errors/Malformed_formal_parameter.html" title="SyntaxError">SyntaxError: Malformed formal parameter</a></li>
<li><a href="Reference/Errors/Unexpected_token.html" title="SyntaxError">SyntaxError: Unexpected token</a></li>
<li><a href="Reference/Errors/Deprecated_source_map_pragma.html" title="A warning that a SyntaxError occurred. JavaScript execution won&#39;t be halted.">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li>
<li><a href="Reference/Errors/Invalid_for-of_initializer.html" title="SyntaxError">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li>
<li><a href="Reference/Errors/Delete_in_strict_mode.html" title="SyntaxError in strict mode only.">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li>
<li><a href="Reference/Errors/Invalid_for-in_initializer.html" title="SyntaxError in strict mode only.">SyntaxError: for-in loop head declarations may not have initializers</a></li>
<li><a href="Reference/Errors/Unnamed_function_statement.html" title="SyntaxError">SyntaxError: function statement requires a name</a></li>
<li><a href="Reference/Errors/Identifier_after_number.html" title="SyntaxError">SyntaxError: identifier starts immediately after numeric literal</a></li>
<li><a href="Reference/Errors/Illegal_character.html" title="SyntaxError">SyntaxError: illegal character</a></li>
<li><a href="Reference/Errors/Bad_regexp_flag.html" title="SyntaxError">SyntaxError: invalid regular expression flag "x"</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_argument_list.html" title="SyntaxError.">SyntaxError: missing ) after argument list</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_condition.html" title="SyntaxError">SyntaxError: missing ) after condition</a></li>
<li><a href="Reference/Errors/Missing_colon_after_property_id.html" title="SyntaxError">SyntaxError: missing : after property id</a></li>
<li><a href="Reference/Errors/Missing_semicolon_before_statement.html" title="SyntaxError.">SyntaxError: missing ; before statement</a></li>
<li><a href="Reference/Errors/Missing_initializer_in_const.html" title="SyntaxError">SyntaxError: missing = in const declaration</a></li>
<li><a href="Reference/Errors/Missing_bracket_after_list.html" title="SyntaxError.">SyntaxError: missing ] after element list</a></li>
<li><a href="Reference/Errors/Missing_formal_parameter.html" title="SyntaxError">SyntaxError: missing formal parameter</a></li>
<li><a href="Reference/Errors/Missing_name_after_dot_operator.html" title="SyntaxError">SyntaxError: missing name after . operator</a></li>
<li><a href="Reference/Errors/No_variable_name.html" title="SyntaxError">SyntaxError: missing variable name</a></li>
<li><a href="Reference/Errors/Missing_curly_after_function_body.html" title="SyntaxError">SyntaxError: missing } after function body</a></li>
<li><a href="Reference/Errors/Missing_curly_after_property_list.html" title="SyntaxError">SyntaxError: missing } after property list</a></li>
<li><a href="Reference/Errors/Redeclared_parameter.html" title="SyntaxError">SyntaxError: redeclaration of formal parameter "x"</a></li>
<li><a href="Reference/Errors/Bad_return_or_yield.html" title="SyntaxError.">SyntaxError: return not in function</a></li>
<li><a href="Reference/Errors/Equal_as_assign.html" title="(Firefox only) SyntaxError warning which is reported only if javascript.options.strict preference is set to true.">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li>
<li><a href="Reference/Errors/Unterminated_string_literal.html" title="SyntaxError">SyntaxError: unterminated string literal</a></li>
<li><a href="Reference/Errors/No_properties.html" title="TypeError.">TypeError: "x" has no properties</a></li>
<li><a href="Reference/Errors/Unexpected_type.html" title="TypeError.">TypeError: "x" is (not) "y"</a></li>
<li><a href="Reference/Errors/Not_a_constructor.html" title="TypeError">TypeError: "x" is not a constructor</a></li>
<li><a href="Reference/Errors/Not_a_function.html" title="TypeError.">TypeError: "x" is not a function</a></li>
<li><a href="Reference/Errors/No_non-null_object.html" title="TypeError">TypeError: "x" is not a non-null object</a></li>
<li><a href="Reference/Errors/Read-only.html" title="TypeError">TypeError: "x" is read-only</a></li>
<li><a href="Reference/Errors/is_not_iterable.html" title="TypeError">TypeError: 'x' is not iterable</a></li>
<li><a href="Reference/Errors/More_arguments_needed.html" title="TypeError.">TypeError: More arguments needed</a></li>
<li><a href="Reference/Errors/Reduce_of_empty_array_with_no_initial_value.html" title="TypeError">TypeError: Reduce of empty array with no initial value</a></li>
<li><a href="Reference/Errors/Called_on_incompatible_type.html" title="TypeError">TypeError: X.prototype.y called on incompatible type</a></li>
<li><a href="Reference/Errors/Dead_object.html" title="TypeError">TypeError: can't access dead object</a></li>
<li><a href="Reference/Errors/Cant_access_property.html" title="TypeError.">TypeError: can't access property "x" of "y"</a></li>
<li><a href="Reference/Errors/Cant_assign_to_property.html" title="TypeError.">TypeError: can't assign to property "x" on "y": not an object</a></li>
<li><a href="Reference/Errors/Cant_define_property_object_not_extensible.html" title="TypeError">TypeError: can't define property "x": "obj" is not extensible</a></li>
<li><a href="Reference/Errors/Non_configurable_array_element.html" title="TypeError">TypeError: can't delete non-configurable array element</a></li>
<li><a href="Reference/Errors/Cant_redefine_property.html" title="TypeError">TypeError: can't redefine non-configurable property "x"</a></li>
<li><a href="Reference/Errors/in_operator_no_object.html" title="TypeError">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li>
<li><a href="Reference/Errors/Cyclic_object_value.html" title="TypeError">TypeError: cyclic object value</a></li>
<li><a href="Reference/Errors/invalid_right_hand_side_instanceof_operand.html" title="TypeError">TypeError: invalid 'instanceof' operand 'x'</a></li>
<li><a href="Reference/Errors/Array_sort_argument.html" title="TypeError">TypeError: invalid Array.prototype.sort argument</a></li>
<li><a href="Reference/Errors/Typed_array_invalid_arguments.html" title="TypeError">TypeError: invalid arguments</a></li>
<li><a href="Reference/Errors/Invalid_const_assignment.html" title="TypeError">TypeError: invalid assignment to const "x"</a></li>
<li><a href="Reference/Errors/Cant_delete.html" title="TypeError in strict mode only.">TypeError: property "x" is non-configurable and can't be deleted</a></li>
<li><a href="Reference/Errors/Getter_only.html" title="TypeError in strict mode only.">TypeError: setting getter-only property "x"</a></li>
<li><a href="Reference/Errors/Var_hides_argument.html" title="TypeError warning in strict mode only.">TypeError: variable "x" redeclares argument</a></li>
<li><a href="Reference/Errors/Malformed_URI.html" title="URIError">URIError: malformed URI sequence</a></li>
<li><a href="Reference/Errors/Already_has_pragma.html" title="A warning. JavaScript execution won&#39;t be halted.">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li>
<li><a href="Reference/Errors/Bad_octal.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li>
<li><a href="Reference/Errors/Deprecated_toLocaleFormat.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: Date.prototype.toLocaleFormat is deprecated</a></li>
<li><a href="Reference/Errors/For-each-in_loops_are_deprecated.html" title="Warning">Warning: JavaScript 1.6's for-each-in loops are deprecated</a></li>
<li><a href="Reference/Errors/Deprecated_String_generics.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: String.x is deprecated; use String.prototype.x instead</a></li>
<li><a href="Reference/Errors/Deprecated_expression_closures.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: expression closures are deprecated</a></li>
<li><a href="Reference/Errors/Stmt_after_return.html" title="Warning">Warning: unreachable code after return statement</a></li>
</ol></li>
<li>Misc
<ol>
<li><a href="JavaScript_technologies_overview.html">JavaScript technologies overview</a></li>
<li><a href="Reference/Lexical_grammar.html">Lexical grammar</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Enumerability_and_ownership_of_properties.html">Enumerability and ownership of properties</a></li>
<li><a href="Reference/Iteration_protocols.html">Iteration protocols</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Reference/Strict_mode/Transitioning_to_strict_mode.html">Transitioning to strict mode</a></li>
<li><a href="Reference/Template_literals.html">Template literals</a></li>
<li><a href="Reference/Deprecated_and_obsolete_features.html">Deprecated features</a></li>
</ol></li>
</ol>
</div>
</div>
</div>
</div>
</div>
<section class="newsletter-container">
<div id="newsletter-form-container" class="newsletter">
<section class="newsletter-head">
<h2 id="learn-the-best-of-web-development-8" class="newsletter-teaser">Learn the best of web development</h2>
<p>Get the latest and greatest from MDN delivered straight to your inbox.</p>
<p>The newsletter is offered in English only at the moment.</p>
</section>
<div class="form-group newsletter-group-email">
E-mail
</div>
<div id="newsletter-privacy" class="form-group form-group-agree newsletter-group-privacy" data-aria-hidden="false">
I’m okay with Mozilla handling my info as explained in this <a href="../../../../../external.html?link=https://www.mozilla.org/privacy/">Privacy Policy</a>.
</div>
<div class="newsletter-group-submit">
Sign up now
</div>
<span>Hide Newsletter Sign-up</span>
</div>
</section>
<div class="content-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/" class="nav-footer-logo">MDN Web Docs</a>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Web Technologies</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn Web Development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/About">About MDN</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Feedback</a></li>
</ul>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/">About</a></li>
<li><a href="../../../../../external.html?link=https://shop.spreadshirt.com/mdn-store/">MDN Web Docs Store</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/contact/">Contact Us</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/firefox/?utm_source=developer.mozilla.org&amp;utm_campaign=footer&amp;utm_medium=referral">Firefox</a></li>
</ul>
<div class="social social-mdn">
<h4 id="mdn-8">MDN</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<div class="social social-moz">
<h4 id="mozilla-8">Mozilla</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<p>© 2005-2020 Mozilla and individual contributors. Content is available under <a href="../../../../../external.html?link=https://developer.mozilla.org/docs/MDN/About#Copyrights_and_licenses">these licenses</a>.</p>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/legal/terms/mozilla">Terms</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/">Privacy</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/#cookies">Cookies</a></li>
</ul>
</div>
</div>
<div id="auth-modal" class="modal hidden">
<section class="auth-providers" tabindex="-1" data-role="dialog" data-aria-modal="true" data-aria-labelledby="modal-main-heading">
<h2 id="modal-main-heading">Sign In</h2>
<p>Sign in to enjoy the benefits of an MDN account. If you haven’t already created an account, you will be prompted to do so after signing in.</p>
<div class="auth-button-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/users/github/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FJavaScript_technologies_overview" class="github-auth">Sign in with Github</a> <a href="../../../../../external.html?link=https://developer.mozilla.org/users/google/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FJavaScript_technologies_overview" class="google-auth">Sign in with Google</a>
</div>
<span>Close modal</span>
</section>
</div>
<div id="react-container" data-component-name="SPA">
<div class="loading-bar">

</div>
<ul>
<li><a href="#content" id="skip-main">Skip to main content</a></li>
<li><a href="#language" id="skip-language">Select language</a></li>
<li><a href="#main-q" id="skip-search">Skip to search</a></li>
</ul>
<ul>
<li>Technologies
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Technologies Overview</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide/Graphics">Graphics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API">APIs / DOM</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions">Browser Extensions</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/MathML">MathML</a></li>
</ul></li>
<li>References &amp; Guides
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn web development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Tutorials">Tutorials</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Reference">References</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide">Developer Guides</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Accessibility">Accessibility</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Games">Game development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">...more docs</a></li>
</ul></li>
<li>Feedback
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Send Feedback</a></li>
<li><a href="../../../../../external.html?link=https://support.mozilla.org/">Get Firefox help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://stackoverflow.com/">Get web development help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Community">Join the MDN community</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/sprints/issues/new?template=issue-template.md&amp;projects=mdn/sprints/2&amp;labels=user-report&amp;title=/en-US/docs/Web/JavaScript/Language_Resources">Report a content problem 🌐</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/kuma/issues/new/choose">Report an issue 🌐</a></li>
</ul></li>
</ul>
<div class="header-search">
Search MDN
<span>Open search</span>
</div>
<div data-role="main">
<div class="titlebar-container">
<div class="titlebar">

</div>
</div>
<div class="full-width-row-container">
<div class="max-content-width-container">
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web" class="breadcrumb-chevron"><span class="pre-text">See </span><span data-property="name">Web technology for developers</span></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript" class="breadcrumb-previous"><span class="pre-text">See </span><span data-property="name">JavaScript</span></a></li>
<li><a href="Language_Resources.html" class="crumb-current-page"><span data-property="name" data-aria-current="page">JavaScript language resources</span></a></li>
</ol>
<div class="dropdown-container language-menu">
English<span class="dropdown-arrow-down" data-aria-hidden="true">▼</span>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/bn/docs/Web/JavaScript/ভাষার_রিসোর্স" title="Bengali">বাংলা</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ca/docs/Web/JavaScript/Language_Resources" title="Catalan">Català</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/de/docs/Web/JavaScript/Language_Resources" title="German">Deutsch</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/es/docs/Web/JavaScript/Language_Resources" title="Spanish">Español</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/fr/docs/Web/JavaScript/Language_Resources" title="French">Français</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/id/docs/Web/JavaScript/Language_Resources" title="Indonesian">Bahasa Indonesia</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ja/docs/Web/JavaScript/Language_Resources" title="Japanese">日本語</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ko/docs/Web/JavaScript/언어_리소스" title="Korean">한국어</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pl/docs/Web/JavaScript/Zasoby_języka_JavaScript" title="Polish">Polski</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Language_Resources" title="Portuguese (Brazilian)">Português (do Brasil)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ru/docs/Web/JavaScript/Language_Resources" title="Russian">Русский</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/tr/docs/Web/JavaScript/Language_Resources" title="Turkish">Türkçe</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Language_Resources" title="Chinese (Simplified)">中文 (简体)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Language_Resources" title="Chinese (Traditional)">正體中文 (繁體)</a></li>
<li><a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources$locales" id="translations-add">Add a translation</a></li>
</ul>
</div>
</div>
</div>
<div class="wiki-left-present content-layout">
<div id="content" class="article text-content">
<div>

</div>
<p><strong>ECMAScript</strong> is the scripting language that forms the basis of <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/JavaScript">JavaScript</a>. ECMAScript standardized by the <a href="../../../../../external.html?link=https://www.ecma-international.org/" class="external" title="https://www.ecma-international.org/">ECMA International</a> standards organization in the <strong>ECMA-262 and ECMA-402 specifications</strong>. The following ECMAScript standards have been approved or are being worked on:</p>
Name
</div>
</div>
</div>
</div>
<p>Links</p>
<p>Release date</p>
<p>Description</p>
<p>Current editions</p>
<p>ECMA-262 10<sup>th</sup> Edition</p>
<p><a href="../../../../../external.html?link=https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf" class="external">PDF</a>, <a href="../../../../../external.html?link=https://ecma-international.org/ecma-262/10.0/index.html" class="external">HTML</a>, <a href="../../../../../external.html?link=https://tc39.github.io/ecma262/" class="external">Working draft</a>, <a href="../../../../../external.html?link=https://github.com/tc39/ecma262" class="external">repository</a></p>
<p>2019</p>
<p>ECMAScript 2019 Language Specification</p>
<p>ECMA-262 9<sup>th</sup> Edition</p>
<p><a href="../../../../../external.html?link=http://ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf" class="external">PDF</a>, <a href="../../../../../external.html?link=http://ecma-international.org/ecma-262/9.0/index.html#Title" class="external">HTML</a>, <br />
<a href="../../../../../external.html?link=https://tc39.github.io/ecma262/" class="external">Working draft</a>, <a href="../../../../../external.html?link=https://github.com/tc39/ecma262" class="external">repository</a></p>
<p>2018</p>
<p>ECMAScript 2018 Language Specification</p>
<p>ECMA-402 5<sup>th</sup> Edition</p>
<p><a href="../../../../../external.html?link=https://tc39.github.io/ecma402/" class="external">Working draft</a>, <a href="../../../../../external.html?link=https://github.com/tc39/ecma402" class="external">repository</a></p>
<p>2018</p>
<p>ECMAScript 2018 Internationalization API Specification</p>
<p>Obsolete/historical editions</p>
<p>ECMA-262</p>
<p><a href="../../../../../external.html?link=https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%201st%20edition,%20June%201997.pdf" class="external">PDF</a></p>
<p>June 1997</p>
<p>ECMAScript: A general purpose, cross-platform programming language. This was the first version of the ECMAScript standard.</p>
<p>ECMA-262 2<sup>nd</sup> Edition</p>
<p><a href="../../../../../external.html?link=https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%202nd%20edition,%20August%201998.pdf" class="external">PDF</a></p>
<p>August 1998</p>
<p>ECMAScript Language Specification. This is the second revision of the ECMAScript standard; also ISO standard 16262.</p>
<p>ECMA-262 3<sup>rd</sup> Edition</p>
<p><a href="../../../../../external.html?link=https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf" class="external">PDF</a></p>
<p>December 1999</p>
<p>ECMAScript Language Specification. This is the third revision of the ECMAScript standard; corresponds to JavaScript 1.5.<br />
See also the <a href="../../../../../external.html?link=https://www.mozilla.org/js/language/E262-3-errata.html" class="external">errata</a></p>
<p>ECMA-262 5<sup>th</sup> Edition</p>
<p><a href="../../../../../external.html?link=https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262%205th%20edition%20December%202009.pdf" class="external">PDF</a></p>
<p>December 2009</p>
<p>ECMAScript Language Specification. This is the fifth revision of the ECMAScript standard.<br />
See also the <a href="../../../../../external.html?link=https://wiki.ecmascript.org/doku.php?id=es3.1:es3.1_proposal_working_draft" class="external">ES5 errata</a> and <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/JavaScript/ECMAScript_5_support_in_Mozilla" title="JavaScript/ECMAScript 5 support in Mozilla">ECMAScript 5 support in Mozilla</a></p>
<p>ECMA-357</p>
<p><a href="../../../../../external.html?link=https://www.ecma-international.org/publications/files/ECMA-ST-WITHDRAWN/ECMA-357,%201st%20edition,%20June%202004.pdf" class="external">PDF</a></p>
<p>June 2004</p>
<p><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/E4X" title="E4X">ECMAScript for XML (E4X)</a>.<br />
See also the <a href="../../../../../external.html?link=https://bugzilla.mozilla.org/attachment.cgi?id=169406" class="external link-https">E4X errata</a>.</p>
<p>ECMA-262 5.1 Edition</p>
<p><a href="../../../../../external.html?link=https://www.ecma-international.org/ecma-262/5.1/Ecma-262.pdf" class="external">PDF</a>, <a href="../../../../../external.html?link=https://www.ecma-international.org/ecma-262/5.1/" class="external">HTML</a></p>
<p>June 2011</p>
<p>This version is fully aligned with the 3<sup>rd</sup> edition of the international standard <a href="../../../../../external.html?link=https://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=55755" class="external">ISO/IEC 16262:2011</a>.<br />
It includes ES5 errata fixes, no new features.</p>
<p>ECMA-402 1<sup>st</sup> Edition</p>
<p><a href="../../../../../external.html?link=https://ecma-international.org/ecma-402/1.0/ECMA-402.pdf" class="external">PDF</a>, <a href="../../../../../external.html?link=https://ecma-international.org/ecma-402/1.0/index.html" class="external">HTML</a></p>
<p>December 2012</p>
<p>ECMAScript Internationalization API Specification</p>
<p>ECMA-262 6<sup>th</sup> Edition</p>
<p><a href="../../../../../external.html?link=https://www.ecma-international.org/ecma-262/6.0/ECMA-262.pdf" class="external">PDF</a>, <a href="../../../../../external.html?link=https://www.ecma-international.org/ecma-262/6.0/index.html" class="external">HTML</a></p>
<p>June 2015</p>
<p>ECMAScript 2015 Language Specification</p>
<p>ECMA-402 2<sup>nd</sup> Edition</p>
<p><a href="../../../../../external.html?link=https://www.ecma-international.org/ecma-402/2.0/ECMA-402.pdf" class="external">PDF</a></p>
<p>June 2015</p>
<p>ECMAScript 2015 Internationalization API Specification</p>
<p>ECMA-262 7<sup>th</sup> Edition</p>
<p><a href="../../../../../external.html?link=https://www.ecma-international.org/ecma-262/7.0/" class="external">HTML</a></p>
<p>June 2016</p>
<p>ECMAScript 2016 Language Specification</p>
<p>ECMA-402 3<sup>rd</sup> Edition</p>
<p><a href="../../../../../external.html?link=https://www.ecma-international.org/ecma-402/3.0/" class="external">HTML</a></p>
<p>June 2016</p>
<p>ECMAScript 2016 Internationalization API Specification</p>
<p>ECMA-262 8<sup>th</sup> Edition</p>
<p><a href="../../../../../external.html?link=https://www.ecma-international.org/ecma-262/8.0/" class="external">HTML</a></p>
<p>June 2017</p>
<p>ECMAScript 2017 Language Specification</p>
<p>ECMA-402 4<sup>th</sup> Edition</p>
<p><a href="../../../../../external.html?link=https://www.ecma-international.org/ecma-402/4.0/" class="external">HTML</a></p>
<p>June 2017</p>
<p>ECMAScript 2017 Internationalization API Specification</p>
<p><strong>ES.Next</strong> is a dynamic name that refers to whatever the next version is at the time of‍ writing. ES.Next features are more correctly called proposals, because, by definition, the specification has not been finalized yet.</p>
<p>See <a href="../../../../../external.html?link=https://en.wikipedia.org/wiki/ECMAScript" class="external" title="https://en.wikipedia.org/wiki/ECMAScript">Wikipedia ECMAScript entry</a> for more information on ECMAScript history.</p>
<p>You can participate in or just track the work on the next revisions of the ECMAScript Language Specification, code-named "Harmony", and the ECMAScript Internationalization API Specification via public wiki and the <a href="../../../../../external.html?link=https://mail.mozilla.org/listinfo/es-discuss" class="external link-https" title="https://mail.mozilla.org/listinfo/es-discuss">es-discuss mailing list</a> linked from <a href="../../../../../external.html?link=https://www.ecmascript.org/community.php" class="external" title="https://www.ecmascript.org/community.php">ecmascript.org</a>.</p>
<h2 id="Implementations">Implementations</h2>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/SpiderMonkey" title="SpiderMonkey">SpiderMonkey</a> - the JavaScript engine used in various Mozilla products, including Firefox;</li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Rhino" title="Rhino">Rhino</a> - the JavaScript engine is written in Java;</li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Tamarin" title="Tamarin">Tamarin</a> - the ActionScript virtual machine (used in the Adobe® Flash® Player);</li>
<li><a href="../../../../../external.html?link=https://en.wikipedia.org/wiki/List_of_ECMAScript_engines" class="external" title="https://en.wikipedia.org/wiki/List_of_ECMAScript_engines">Other implementations</a> (Wikipedia).</li>
</ul>
<h2 id="See_also">See also</h2>
<ul>
<li><a href="../../../../../external.html?link=https://brendaneich.com/" class="external" title="https://brendaneich.com/">Brendan Eich's blog</a>. Brendan is the creator of JavaScript and the SpiderMonkey JS engine. He still works with the ECMA working group to evolve the language.</li>
<li><a href="../../../../../external.html?link=http://dmitrysoshnikov.com/" class="external" title="http://dmitrysoshnikov.com/">Dmitry Soshnikov's analysis of ECMA-262 Edition 3 and 5</a></li>
</ul>
<div class="metadata">
<section class="document-meta">
<h4 id="metadata-9">Metadata</h4>
<ul>
<li><strong>Last modified:</strong> Jun 4, 2020, <a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources$history">by MDN contributors</a></li>
</ul>
</section>
</div>
<div id="sidebar-quicklinks" class="sidebar">
<div class="quick-links">
<div class="quick-links-head sidebar-heading">
Related Topics
</div>
<div>
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong><em>JavaScript</em></strong></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Tutorials"><strong>Tutorials:</strong></a></li>
<li>Complete beginners
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics">JavaScript basics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps">JavaScript first steps</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks">JavaScript building blocks</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Introducing JavaScript objects</a></li>
</ol></li>
<li>JavaScript Guide
<ol>
<li><a href="Guide/Introduction.html">Introduction</a></li>
<li><a href="Guide/Grammar_and_Types.html">Grammar and types</a></li>
<li><a href="Guide/Control_flow_and_error_handling.html">Control flow and error handling</a></li>
<li><a href="Guide/Loops_and_iteration.html">Loops and iteration</a></li>
<li><a href="Guide/Functions.html">Functions</a></li>
<li><a href="Guide/Expressions_and_Operators.html">Expressions and operators</a></li>
<li><a href="Guide/Numbers_and_dates.html">Numbers and dates</a></li>
<li><a href="Guide/Text_formatting.html">Text formatting</a></li>
<li><a href="Guide/Regular_Expressions.html">Regular expressions</a></li>
<li><a href="Guide/Indexed_collections.html">Indexed collections</a></li>
<li><a href="Guide/Keyed_collections.html">Keyed collections</a></li>
<li><a href="Guide/Working_with_Objects.html">Working with objects</a></li>
<li><a href="Guide/Details_of_the_Object_Model.html">Details of the object model</a></li>
<li><a href="Guide/Using_promises.html">Using promises</a></li>
<li><a href="Guide/Iterators_and_generators.html">Iterators and generators</a></li>
<li><a href="Guide/Meta_programming.html">Meta programming</a></li>
<li><a href="Guide/Modules.html">JavaScript modules</a></li>
</ol></li>
<li>Intermediate
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Introducing JavaScript objects</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs">Client-side web APIs</a></li>
<li><a href="A_re-introduction_to_JavaScript.html">A re-introduction to JavaScript</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Equality_comparisons_and_sameness.html">Equality comparisons and sameness</a></li>
<li><a href="Closures.html">Closures</a></li>
</ol></li>
<li>Advanced
<ol>
<li><a href="Inheritance_and_the_prototype_chain.html">Inheritance and the prototype chain</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Typed_arrays.html">JavaScript typed arrays</a></li>
<li><a href="Memory_Management.html">Memory Management</a></li>
<li><a href="EventLoop.html">Concurrency model and Event Loop</a></li>
</ol></li>
<li><strong><a href="Reference.html">References:</a></strong></li>
<li>Built-in objects
<ol>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/AggregateError.html" title="The AggregateError object represents an error when several errors need to be wrapped in a single error.">AggregateError</a></li>
<li><a href="Reference/Global_Objects/Array.html" title="The JavaScript Array class is a global object that is used in the construction of arrays; which are high-level, list-like objects.">Array</a></li>
<li><a href="Reference/Global_Objects/ArrayBuffer.html" title="The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer.">ArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/AsyncFunction.html" title="The AsyncFunction constructor creates a new async function object. In JavaScript, every asynchronous function is actually an AsyncFunction object.">AsyncFunction</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/AsyncIterator.html" title="The AsyncIterator global object is an abstract class providing helper methods, similar to the ones exposed on Array instances.">AsyncIterator</a></li>
<li><a href="Reference/Global_Objects/Atomics.html" title="The Atomics object provides atomic operations as static methods. They are used with SharedArrayBuffer objects.">Atomics</a></li>
<li><a href="Reference/Global_Objects/BigInt.html" title="BigInt is a built-in object that provides a way to represent whole numbers larger than 253 - 1, which is the largest number JavaScript can reliably represent with the Number primitive and represented by the Number.MAX_SAFE_INTEGER constant. BigInt can be used for arbitrarily large integers.">BigInt</a></li>
<li><a href="Reference/Global_Objects/BigInt64Array.html" title="The BigInt64Array typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigInt64Array</a></li>
<li><a href="Reference/Global_Objects/BigUint64Array.html" title="The BigUint64Array typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigUint64Array</a></li>
<li><a href="Reference/Global_Objects/Boolean.html" title="The Boolean object is an object wrapper for a boolean value.">Boolean</a></li>
<li><a href="Reference/Global_Objects/DataView.html" title="The DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform&#39;s endianness.">DataView</a></li>
<li><a href="Reference/Global_Objects/Date.html" title="JavaScript Date objects represent a single moment in time in a platform-independent format.">Date</a></li>
<li><a href="Reference/Global_Objects/Error.html" title="Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.">Error</a></li>
<li><a href="Reference/Global_Objects/EvalError.html" title="The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.">EvalError</a></li>
<li><a href="Reference/Global_Objects/Float32Array.html" title="The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float32Array</a></li>
<li><a href="Reference/Global_Objects/Float64Array.html" title="The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float64Array</a></li>
<li><a href="Reference/Global_Objects/Function.html" title="Every JavaScript function is actually a Function object. This can be seen with the code (function(){}).constructor === Function which returns true.">Function</a></li>
<li><a href="Reference/Global_Objects/Generator.html" title="The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.">Generator</a></li>
<li><a href="Reference/Global_Objects/GeneratorFunction.html" title="The GeneratorFunction constructor creates a new generator function object. In JavaScript every generator function is actually a GeneratorFunction object.">GeneratorFunction</a></li>
<li><a href="Reference/Global_Objects/Infinity.html" title="The global property Infinity is a numeric value representing infinity.">Infinity</a></li>
<li><a href="Reference/Global_Objects/Int16Array.html" title="The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int16Array</a></li>
<li><a href="Reference/Global_Objects/Int32Array.html" title="The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int32Array</a></li>
<li><a href="Reference/Global_Objects/Int8Array.html" title="The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int8Array</a></li>
<li><a href="Reference/Global_Objects/InternalError.html" title="The InternalError object indicates an error that occurred internally in the JavaScript engine.">InternalError</a></li>
<li><a href="Reference/Global_Objects/Intl.html" title="The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The Intl object provides access to several constructors as well as functionality common to the internationalization constructors and other language sensitive functions.">Intl</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator" title="The Intl.Collator objects enable language sensitive string comparison.">Intl.Collator</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat" title="The Intl.DateTimeFormat object is a constructor for objects that enable language-sensitive date and time formatting.">Intl.DateTimeFormat</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DisplayNames" title="The Intl.DisplayNames object is a constructor for objects that enables the consistent translation of language, region and script display names.">Intl.DisplayNames</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ListFormat" title="The Intl.ListFormat object is a constructor for objects that enable language-sensitive list formatting.">Intl.ListFormat</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Locale" title="The Intl.Locale object is a standard built-in property of the Intl object that represents a Unicode locale identifier.">Intl.Locale</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat" title="The Intl.NumberFormat object is a constructor for objects that enable language sensitive number formatting.">Intl.NumberFormat</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules" title="The Intl.PluralRules object enables plural-sensitive formatting and plural-related language rules.">Intl.PluralRules</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat" title="The Intl.RelativeTimeFormat object enables language-sensitive relative time formatting.">Intl.RelativeTimeFormat</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/Iterator.html" title="The Iterator global object is an abstract class providing helper methods, similar to the ones exposed on Array instances.">Iterator</a></li>
<li><a href="Reference/Global_Objects/JSON.html" title="The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can&#39;t be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.">JSON</a></li>
<li><a href="Reference/Global_Objects/Map.html" title="The Map object holds key-value pairs and remembers the original insertion order of the keys.">Map</a></li>
<li><a href="Reference/Global_Objects/Math.html" title="Math is a built-in object that has properties and methods for mathematical constants and functions. Not a function object.">Math</a></li>
<li><a href="Reference/Global_Objects/NaN.html" title="The global NaN property is a value representing Not-A-Number.">NaN</a></li>
<li><a href="Reference/Global_Objects/Number.html" title="The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor. A primitive type object number is created using the Number() function.">Number</a></li>
<li><a href="Reference/Global_Objects/Object.html" title="The Object class represents one of JavaScript&#39;s data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.">Object</a></li>
<li><a href="Reference/Global_Objects/Promise.html" title="The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.">Promise</a></li>
<li><a href="Reference/Global_Objects/Proxy.html" title="The Proxy object is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc).">Proxy</a></li>
<li><a href="Reference/Global_Objects/RangeError.html" title="The RangeError object indicates an error when a value is not in the set or range of allowed values.">RangeError</a></li>
<li><a href="Reference/Global_Objects/ReferenceError.html" title="The ReferenceError object represents an error when a non-existent variable is referenced.">ReferenceError</a></li>
<li><a href="Reference/Global_Objects/Reflect.html" title="Reflect is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of proxy handlers. Reflect is not a function object, so it&#39;s not constructible.">Reflect</a></li>
<li><a href="Reference/Global_Objects/RegExp.html" title="The RegExp object is used for matching text with a pattern.">RegExp</a></li>
<li><a href="Reference/Global_Objects/Set.html" title="The Set object lets you store unique values of any type, whether primitive values or object references.">Set</a></li>
<li><a href="Reference/Global_Objects/SharedArrayBuffer.html" title="The SharedArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. Unlike an ArrayBuffer, a SharedArrayBuffer cannot become detached.">SharedArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/String.html" title="The String global object is a constructor for strings or a sequence of characters.">String</a></li>
<li><a href="Reference/Global_Objects/Symbol.html" title="The data type symbol is a primitive data type. The Symbol() function returns a value of type symbol, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class, but is incomplete as a constructor because it does not support the syntax &quot;new Symbol()&quot;.">Symbol</a></li>
<li><a href="Reference/Global_Objects/SyntaxError.html" title="The SyntaxError object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.">SyntaxError</a></li>
<li><a href="Reference/Global_Objects/TypeError.html" title="The TypeError object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.">TypeError</a></li>
<li><a href="Reference/Global_Objects/TypedArray.html" title="A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.">TypedArray</a></li>
<li><a href="Reference/Global_Objects/URIError.html" title="The URIError object represents an error when a global URI handling function was used in a wrong way.">URIError</a></li>
<li><a href="Reference/Global_Objects/Uint16Array.html" title="The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint16Array</a></li>
<li><a href="Reference/Global_Objects/Uint32Array.html" title="The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint32Array</a></li>
<li><a href="Reference/Global_Objects/Uint8Array.html" title="The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8Array</a></li>
<li><a href="Reference/Global_Objects/Uint8ClampedArray.html" title="The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8ClampedArray</a></li>
<li><a href="Reference/Global_Objects/WeakMap.html" title="The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.">WeakMap</a></li>
<li><a href="Reference/Global_Objects/WeakSet.html" title="The WeakSet object lets you store weakly held objects in a collection.">WeakSet</a></li>
<li><a href="Reference/Global_Objects/WebAssembly.html" title="The WebAssembly JavaScript object acts as the namespace for all WebAssembly-related functionality.">WebAssembly</a></li>
<li><a href="Reference/Global_Objects/decodeURI.html" title="The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or by a similar routine.">decodeURI()</a></li>
<li><a href="Reference/Global_Objects/decodeURIComponent.html" title="The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.">decodeURIComponent()</a></li>
<li><a href="Reference/Global_Objects/encodeURI.html" title="The encodeURI() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURI()</a></li>
<li><a href="Reference/Global_Objects/encodeURIComponent.html" title="The encodeURIComponent() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURIComponent()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/escape.html" title="The escape() function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.">escape()</a></li>
<li><a href="Reference/Global_Objects/eval.html" title="The eval() function evaluates JavaScript code represented as a string.">eval()</a></li>
<li><a href="Reference/Global_Objects/globalThis.html" title="The global globalThis property contains the global this value, which is akin to the global object.">globalThis</a></li>
<li><a href="Reference/Global_Objects/isFinite.html" title="The global isFinite() function determines whether the passed value is a finite number. If  needed, the parameter is first converted to a number.">isFinite()</a></li>
<li><a href="Reference/Global_Objects/isNaN.html" title="The isNaN() function determines whether a value is NaN or not. Note, coercion inside the isNaN function has interesting rules; you may alternatively want to use Number.isNaN(), as defined in ECMAScript 2015.">isNaN()</a></li>
<li><a href="Reference/Global_Objects/null.html" title="The value null represents the intentional absence of any object value. It is one of JavaScript&#39;s primitive values and is treated as falsy for boolean operations.">null</a></li>
<li><a href="Reference/Global_Objects/parseFloat.html" title="The parseFloat() function parses an argument (converting it to a string first if needed) and returns a floating point number.">parseFloat()</a></li>
<li><a href="Reference/Global_Objects/parseInt.html" title="The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).">parseInt()</a></li>
<li><a href="Reference/Global_Objects/undefined.html" title="The global undefined property represents the primitive value undefined. It is one of JavaScript&#39;s primitive types.">undefined</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/unescape.html" title="The unescape() function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Usually, decodeURI or decodeURIComponent are preferred over unescape.">unescape()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><a href="Reference/Global_Objects/uneval.html" title="The uneval() function creates a string representation of the source code of an Object.">uneval()</a></li>
</ol></li>
<li>Expressions &amp; operators
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators" title="Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).">Arithmetic operators</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Array_comprehensions" title="The array comprehension syntax was a JavaScript expression which allowed you to quickly assemble a new array based on an existing one. However, it has been removed from the standard and the Firefox implementation. Do not use it!">Array comprehensions</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators" title="An assignment operator assigns a value to its left operand based on the value of its right operand.">Assignment operators</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" title="Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.">Bitwise operators</a></li>
<li><a href="Reference/Operators/Comma_Operator.html" title="The comma operator evaluates each of its operands (from left to right) and returns the value of the last operand.">Comma operator</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators" title="JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., &lt;=), the operands are first converted to primitives, then to the same type, before comparison.">Comparison operators</a></li>
<li><a href="Reference/Operators/Conditional_Operator.html" title="The conditional (ternary) operator is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy.">Conditional (ternary) operator</a></li>
<li><a href="Reference/Operators/Destructuring_assignment.html" title="The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.">Destructuring assignment</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Expression_closures" title="Expression closures are a shorthand function syntax for writing simple functions.">Expression closures</a></li>
<li><a href="Reference/Operators/function.html" title="The function keyword can be used to define a function inside an expression.">Function expression</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Generator_comprehensions" title="The generator comprehension syntax was a JavaScript expression which allowed you to quickly assemble a new generator function based on an existing iterable object. However, it has been removed from the standard and the Firefox implementation. Do not use it!">Generator comprehensions</a></li>
<li><a href="Reference/Operators/Grouping.html" title="The grouping operator ( ) controls the precedence of evaluation in expressions.">Grouping operator</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Legacy_generator_function" title="The function keyword can be used to define a legacy generator function inside an expression. To make the function a legacy generator, the function body should contain at least one yield expression.">Legacy generator function expression</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators" title="Logical operators are typically used with Boolean (logical) values. When they are, they return a Boolean value. However, the &amp;&amp; and || operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they will return a non-Boolean value.">Logical operators</a></li>
<li><a href="Reference/Operators/Nullish_coalescing_operator.html" title="The nullish coalescing operator (??) is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.">Nullish coalescing operator</a></li>
<li><a href="Reference/Operators/Object_initializer.html" title="Objects can be initialized using new Object(), Object.create(), or using the literal notation (initializer notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).">Object initializer</a></li>
<li><a href="Reference/Operators/Operator_Precedence.html" title="Operator precedence determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.">Operator precedence</a></li>
<li><a href="Reference/Operators/Optional_chaining.html" title="The ?. operator functions similarly to the . chaining operator, except that instead of causing an error if a reference is nullish (null or undefined), the expression short-circuits with a return value of undefined.">Optional chaining</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Operators/Pipeline_operator.html" title="The experimental pipeline operator |&gt; (currently at stage 1) pipes the value of an expression into a function. This allows the creation of chained function calls in a readable manner. The result is syntactic sugar in which a function call with a single argument can be written like this:">Pipeline operator</a></li>
<li><a href="Reference/Operators/Property_Accessors-2.html" title="Property accessors provide access to an object&#39;s properties by using the dot notation or the bracket notation.">Property accessors</a></li>
<li><a href="Reference/Operators/Spread_syntax.html" title="Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.">Spread syntax</a></li>
<li><a href="Reference/Operators/async_function.html" title="The async function keyword can be used to define async functions inside expressions.">async function expression</a></li>
<li><a href="Reference/Operators/await.html" title="The await operator is used to wait for a Promise. It can only be used inside an async function.">await</a></li>
<li><a href="Reference/Operators/class.html" title="The class expression is one way to define a class in ECMAScript 2015. Similar to function expressions, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. ">class expression</a></li>
<li><a href="Reference/Operators/delete.html" title="The JavaScript delete operator removes a property from an object; if no more references to the same property are held, it is eventually released automatically.">delete operator</a></li>
<li><a href="Reference/Operators/function_.html" title="The function* keyword can be used to define a generator function inside an expression.">function* expression</a></li>
<li><a href="Reference/Operators/in.html" title="The in operator returns true if the specified property is in the specified object or its prototype chain.">in operator</a></li>
<li><a href="Reference/Operators/instanceof.html" title="The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object.">instanceof</a></li>
<li><a href="Reference/Operators/new.html" title="The new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.">new operator</a></li>
<li><a href="Reference/Operators/new-2.html" title="The new.target pseudo-property lets you detect whether a function or constructor was called using the new operator. In constructors and functions invoked using the new operator, new.target returns a reference to the constructor or function. In normal function calls, new.target is undefined.">new.target</a></li>
<li><a href="Reference/Operators/super.html" title="The super keyword is used to access and call functions on an object&#39;s parent.">super</a></li>
<li><a href="Reference/Operators/this.html" title="A function&#39;s this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode.">this</a></li>
<li><a href="Reference/Operators/typeof.html" title="The typeof operator returns a string indicating the type of the unevaluated operand.">typeof</a></li>
<li><a href="Reference/Operators/void.html" title="The void operator evaluates the given expression and then returns undefined.">void operator</a></li>
<li><a href="Reference/Operators/yield.html" title="The yield keyword is used to pause and resume a generator function (function* or legacy generator function).">yield</a></li>
<li><a href="Reference/Operators/yield_.html" title="The yield* expression is used to delegate to another generator or iterable object.">yield*</a></li>
</ol></li>
<li>Statements &amp; declarations
<ol>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Legacy_generator_function" title="The legacy generator function statement declares legacy generator functions with the specified parameters.">Legacy generator function</a></li>
<li><a href="Reference/Statements/async_function.html" title="The async function declaration defines an asynchronous function — a function that returns an AsyncFunction object.">async function</a></li>
<li><a href="Reference/Statements/block.html" title="A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of curly brackets and may optionally be labelled:">block</a></li>
<li><a href="Reference/Statements/break.html" title="The break statement terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.">break</a></li>
<li><a href="Reference/Statements/class.html" title="The class declaration creates a new class with a given name using prototype-based inheritance.">class</a></li>
<li><a href="Reference/Statements/const.html" title="Constants are block-scoped, much like variables defined using the let statement. The value of a constant can&#39;t be changed through reassignment, and it can&#39;t be redeclared.">const</a></li>
<li><a href="Reference/Statements/continue.html" title="The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.">continue</a></li>
<li><a href="Reference/Statements/debugger.html" title="The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.">debugger</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/default" title="The default keyword can be used in two situations in JavaScript: within a switch statement, or with an export statement.">default</a></li>
<li><a href="Reference/Statements/do...html" title="The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.">do...while</a></li>
<li><a href="Reference/Statements/Empty.html" title="An empty statement is used to provide no statement, although the JavaScript syntax would expect one.">empty</a></li>
<li><a href="Reference/Statements/export.html" title="The export statement is used when creating JavaScript modules to export functions, objects, or primitive values from the module so they can be used by other programs with the import statement.">export</a></li>
<li><a href="Reference/Statements/for.html" title="The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.">for</a></li>
<li><a href="Reference/Statements/for-await...html" title="The for await...of statement creates a loop iterating over async iterable objects as well as on sync iterables, including: built-in String, Array, Array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined async/sync iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.">for await...of</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in" title="The for each...in statement iterates a specified variable over all values of object&#39;s properties. For each distinct property, a specified statement is executed.">for each...in</a></li>
<li><a href="Reference/Statements/for...html" title="The for...in statement iterates over all enumerable properties of an object that are keyed by strings (ignoring ones keyed by Symbols), including inherited enumerable properties.">for...in</a></li>
<li><a href="Reference/Statements/for..-2.html" title="The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.">for...of</a></li>
<li><a href="Reference/Statements/function.html" title="The function declaration (function statement) defines a function with the specified parameters.">function declaration</a></li>
<li><a href="Reference/Statements/function_.html" title="The function* declaration (function keyword followed by an asterisk) defines a generator function, which returns a Generator object.">function*</a></li>
<li><a href="Reference/Statements/if...html" title="The if statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement can be executed.">if...else</a></li>
<li><a href="Reference/Statements/import.html" title="The static import statement is used to import bindings which are exported by another module. ">import</a></li>
<li><a href="Reference/Statements/import-2.html" title="The import.meta object exposes context-specific metadata to a JavaScript module. It contains information about the module, like the module&#39;s URL.">import.meta</a></li>
<li><a href="Reference/Statements/label.html" title="The labeled statement can be used with break or continue statements. It is prefixing a statement with an identifier which you can refer to.">label</a></li>
<li><a href="Reference/Statements/let.html" title="The let statement declares a block scope local variable, optionally initializing it to a value.">let</a></li>
<li><a href="Reference/Statements/return.html" title="The return statement ends function execution and specifies a value to be returned to the function caller.">return</a></li>
<li><a href="Reference/Statements/switch.html" title="The switch statement evaluates an expression, matching the expression&#39;s value to a case clause, and executes statements associated with that case, as well as statements in cases that follow the matching case.">switch</a></li>
<li><a href="Reference/Statements/throw.html" title="The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won&#39;t be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.">throw</a></li>
<li><a href="Reference/Statements/try...html" title="The try...catch statement marks a block of statements to try and specifies a response should an exception be thrown.">try...catch</a></li>
<li><a href="Reference/Statements/var.html" title="The var statement declares a variable, optionally initializing it to a value.">var</a></li>
<li><a href="Reference/Statements/while.html" title="The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.">while</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Statements/with.html" title="The with statement extends the scope chain for a statement.">with</a></li>
</ol></li>
<li>Functions
<ol>
<li><a href="Reference/Functions/Arrow_functions.html" title="An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords. Arrow function expressions are ill suited as methods, and they cannot be used as constructors.">Arrow function expressions</a></li>
<li><a href="Reference/Functions/Default_parameters.html" title="Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.">Default parameters</a></li>
<li><a href="Reference/Functions/Method_definitions.html" title="Starting with ECMAScript 2015, a shorter syntax for method definitions on objects initializers is introduced. It is a shorthand for a function assigned to the method&#39;s name.">Method definitions</a></li>
<li><a href="Reference/Functions/rest_parameters.html" title="The rest parameter syntax allows us to represent an indefinite number of arguments as an array.">Rest parameters</a></li>
<li><a href="Reference/Functions/arguments.html" title="arguments is an Array-like object accessible inside functions that contains the values of the arguments passed to that function.">The arguments object</a></li>
<li><a href="Reference/Functions/get.html" title="The get syntax binds an object property to a function that will be called when that property is looked up.">getter</a></li>
<li><a href="Reference/Functions/set.html" title="The set syntax binds an object property to a function to be called when there is an attempt to set that property.">setter</a></li>
</ol></li>
<li>Classes
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Class_fields" title="Both static and instance public fields are writable, enumerable, and configurable properties. As such, unlike their private counterparts, they participate in prototype inheritance.">Class fields</a></li>
<li><a href="Reference/Classes/constructor.html" title="The constructor method is a special method for creating and initializing an object created within a class.">constructor</a></li>
<li><a href="Reference/Classes/extends.html" title="The extends keyword is used in class declarations or class expressions to create a class which is a child of another class.">extends</a></li>
<li><a href="Reference/Classes/static.html" title="The static keyword defines a static method for a class. Static methods aren&#39;t called on instances of the class. Instead, they&#39;re called on the class itself.">static</a></li>
</ol></li>
<li>Errors
<ol>
<li><a href="Reference/Errors/Property_access_denied.html" title="There was attempt to access an object for which you have no permission. This is likely an &lt;iframe&gt; element loaded from a different domain for which you violated the same-origin policy.">Error: Permission denied to access property "x"</a></li>
<li><a href="Reference/Errors/Too_much_recursion.html" title="When there are too many function calls, or a function is missing a base case, JavaScript will throw this error.">InternalError: too much recursion</a></li>
<li><a href="Reference/Errors/Not_a_codepoint.html" title="String.fromCodePoint() throws this error when passed NaN values, negative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF (1114111).">RangeError: argument is not a valid code point</a></li>
<li><a href="Reference/Errors/Invalid_array_length.html" title="RangeError">RangeError: invalid array length</a></li>
<li><a href="Reference/Errors/Invalid_date.html" title="RangeError">RangeError: invalid date</a></li>
<li><a href="Reference/Errors/Precision_range.html" title="RangeError">RangeError: precision is out of range</a></li>
<li><a href="Reference/Errors/Bad_radix.html" title="RangeError">RangeError: radix must be an integer</a></li>
<li><a href="Reference/Errors/Resulting_string_too_large.html" title="RangeError">RangeError: repeat count must be less than infinity</a></li>
<li><a href="Reference/Errors/Negative_repetition_count.html" title="RangeError">RangeError: repeat count must be non-negative</a></li>
<li><a href="Reference/Errors/Not_defined.html" title="ReferenceError.">ReferenceError: "x" is not defined</a></li>
<li><a href="Reference/Errors/Undeclared_var.html" title="ReferenceError warning in strict mode only.">ReferenceError: assignment to undeclared variable "x"</a></li>
<li><a href="Reference/Errors/Cant_access_lexical_declaration_before_init.html" title="ReferenceError">ReferenceError: can't access lexical declaration`X' before initialization</a></li>
<li><a href="Reference/Errors/Deprecated_caller_or_arguments_usage.html" title="A strict-mode-only warning that a ReferenceError occurred. JavaScript execution won&#39;t be halted.">ReferenceError: deprecated caller or arguments usage</a></li>
<li><a href="Reference/Errors/Invalid_assignment_left-hand_side.html" title="ReferenceError.">ReferenceError: invalid assignment left-hand side</a></li>
<li><a href="Reference/Errors/Undefined_prop.html" title="(Firefox only) ReferenceError warning which is reported only if javascript.options.strict preference is set to true.">ReferenceError: reference to undefined property "x"</a></li>
<li><a href="Reference/Errors/Deprecated_octal.html" title="SyntaxError in strict mode only.">SyntaxError: "0"-prefixed octal literals and octal escape seq. are deprecated</a></li>
<li><a href="Reference/Errors/Strict_Non_Simple_Params.html" title="SyntaxError.">SyntaxError: "use strict" not allowed in function with non-simple parameters</a></li>
<li><a href="Reference/Errors/Reserved_identifier.html" title="SyntaxError">SyntaxError: "x" is a reserved identifier</a></li>
<li><a href="Reference/Errors/JSON_bad_parse.html" title="SyntaxError">SyntaxError: JSON.parse: bad parsing</a></li>
<li><a href="Reference/Errors/Malformed_formal_parameter.html" title="SyntaxError">SyntaxError: Malformed formal parameter</a></li>
<li><a href="Reference/Errors/Unexpected_token.html" title="SyntaxError">SyntaxError: Unexpected token</a></li>
<li><a href="Reference/Errors/Deprecated_source_map_pragma.html" title="A warning that a SyntaxError occurred. JavaScript execution won&#39;t be halted.">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li>
<li><a href="Reference/Errors/Invalid_for-of_initializer.html" title="SyntaxError">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li>
<li><a href="Reference/Errors/Delete_in_strict_mode.html" title="SyntaxError in strict mode only.">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li>
<li><a href="Reference/Errors/Invalid_for-in_initializer.html" title="SyntaxError in strict mode only.">SyntaxError: for-in loop head declarations may not have initializers</a></li>
<li><a href="Reference/Errors/Unnamed_function_statement.html" title="SyntaxError">SyntaxError: function statement requires a name</a></li>
<li><a href="Reference/Errors/Identifier_after_number.html" title="SyntaxError">SyntaxError: identifier starts immediately after numeric literal</a></li>
<li><a href="Reference/Errors/Illegal_character.html" title="SyntaxError">SyntaxError: illegal character</a></li>
<li><a href="Reference/Errors/Bad_regexp_flag.html" title="SyntaxError">SyntaxError: invalid regular expression flag "x"</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_argument_list.html" title="SyntaxError.">SyntaxError: missing ) after argument list</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_condition.html" title="SyntaxError">SyntaxError: missing ) after condition</a></li>
<li><a href="Reference/Errors/Missing_colon_after_property_id.html" title="SyntaxError">SyntaxError: missing : after property id</a></li>
<li><a href="Reference/Errors/Missing_semicolon_before_statement.html" title="SyntaxError.">SyntaxError: missing ; before statement</a></li>
<li><a href="Reference/Errors/Missing_initializer_in_const.html" title="SyntaxError">SyntaxError: missing = in const declaration</a></li>
<li><a href="Reference/Errors/Missing_bracket_after_list.html" title="SyntaxError.">SyntaxError: missing ] after element list</a></li>
<li><a href="Reference/Errors/Missing_formal_parameter.html" title="SyntaxError">SyntaxError: missing formal parameter</a></li>
<li><a href="Reference/Errors/Missing_name_after_dot_operator.html" title="SyntaxError">SyntaxError: missing name after . operator</a></li>
<li><a href="Reference/Errors/No_variable_name.html" title="SyntaxError">SyntaxError: missing variable name</a></li>
<li><a href="Reference/Errors/Missing_curly_after_function_body.html" title="SyntaxError">SyntaxError: missing } after function body</a></li>
<li><a href="Reference/Errors/Missing_curly_after_property_list.html" title="SyntaxError">SyntaxError: missing } after property list</a></li>
<li><a href="Reference/Errors/Redeclared_parameter.html" title="SyntaxError">SyntaxError: redeclaration of formal parameter "x"</a></li>
<li><a href="Reference/Errors/Bad_return_or_yield.html" title="SyntaxError.">SyntaxError: return not in function</a></li>
<li><a href="Reference/Errors/Equal_as_assign.html" title="(Firefox only) SyntaxError warning which is reported only if javascript.options.strict preference is set to true.">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li>
<li><a href="Reference/Errors/Unterminated_string_literal.html" title="SyntaxError">SyntaxError: unterminated string literal</a></li>
<li><a href="Reference/Errors/No_properties.html" title="TypeError.">TypeError: "x" has no properties</a></li>
<li><a href="Reference/Errors/Unexpected_type.html" title="TypeError.">TypeError: "x" is (not) "y"</a></li>
<li><a href="Reference/Errors/Not_a_constructor.html" title="TypeError">TypeError: "x" is not a constructor</a></li>
<li><a href="Reference/Errors/Not_a_function.html" title="TypeError.">TypeError: "x" is not a function</a></li>
<li><a href="Reference/Errors/No_non-null_object.html" title="TypeError">TypeError: "x" is not a non-null object</a></li>
<li><a href="Reference/Errors/Read-only.html" title="TypeError">TypeError: "x" is read-only</a></li>
<li><a href="Reference/Errors/is_not_iterable.html" title="TypeError">TypeError: 'x' is not iterable</a></li>
<li><a href="Reference/Errors/More_arguments_needed.html" title="TypeError.">TypeError: More arguments needed</a></li>
<li><a href="Reference/Errors/Reduce_of_empty_array_with_no_initial_value.html" title="TypeError">TypeError: Reduce of empty array with no initial value</a></li>
<li><a href="Reference/Errors/Called_on_incompatible_type.html" title="TypeError">TypeError: X.prototype.y called on incompatible type</a></li>
<li><a href="Reference/Errors/Dead_object.html" title="TypeError">TypeError: can't access dead object</a></li>
<li><a href="Reference/Errors/Cant_access_property.html" title="TypeError.">TypeError: can't access property "x" of "y"</a></li>
<li><a href="Reference/Errors/Cant_assign_to_property.html" title="TypeError.">TypeError: can't assign to property "x" on "y": not an object</a></li>
<li><a href="Reference/Errors/Cant_define_property_object_not_extensible.html" title="TypeError">TypeError: can't define property "x": "obj" is not extensible</a></li>
<li><a href="Reference/Errors/Non_configurable_array_element.html" title="TypeError">TypeError: can't delete non-configurable array element</a></li>
<li><a href="Reference/Errors/Cant_redefine_property.html" title="TypeError">TypeError: can't redefine non-configurable property "x"</a></li>
<li><a href="Reference/Errors/in_operator_no_object.html" title="TypeError">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li>
<li><a href="Reference/Errors/Cyclic_object_value.html" title="TypeError">TypeError: cyclic object value</a></li>
<li><a href="Reference/Errors/invalid_right_hand_side_instanceof_operand.html" title="TypeError">TypeError: invalid 'instanceof' operand 'x'</a></li>
<li><a href="Reference/Errors/Array_sort_argument.html" title="TypeError">TypeError: invalid Array.prototype.sort argument</a></li>
<li><a href="Reference/Errors/Typed_array_invalid_arguments.html" title="TypeError">TypeError: invalid arguments</a></li>
<li><a href="Reference/Errors/Invalid_const_assignment.html" title="TypeError">TypeError: invalid assignment to const "x"</a></li>
<li><a href="Reference/Errors/Cant_delete.html" title="TypeError in strict mode only.">TypeError: property "x" is non-configurable and can't be deleted</a></li>
<li><a href="Reference/Errors/Getter_only.html" title="TypeError in strict mode only.">TypeError: setting getter-only property "x"</a></li>
<li><a href="Reference/Errors/Var_hides_argument.html" title="TypeError warning in strict mode only.">TypeError: variable "x" redeclares argument</a></li>
<li><a href="Reference/Errors/Malformed_URI.html" title="URIError">URIError: malformed URI sequence</a></li>
<li><a href="Reference/Errors/Already_has_pragma.html" title="A warning. JavaScript execution won&#39;t be halted.">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li>
<li><a href="Reference/Errors/Bad_octal.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li>
<li><a href="Reference/Errors/Deprecated_toLocaleFormat.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: Date.prototype.toLocaleFormat is deprecated</a></li>
<li><a href="Reference/Errors/For-each-in_loops_are_deprecated.html" title="Warning">Warning: JavaScript 1.6's for-each-in loops are deprecated</a></li>
<li><a href="Reference/Errors/Deprecated_String_generics.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: String.x is deprecated; use String.prototype.x instead</a></li>
<li><a href="Reference/Errors/Deprecated_expression_closures.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: expression closures are deprecated</a></li>
<li><a href="Reference/Errors/Stmt_after_return.html" title="Warning">Warning: unreachable code after return statement</a></li>
</ol></li>
<li>Misc
<ol>
<li><a href="JavaScript_technologies_overview.html">JavaScript technologies overview</a></li>
<li><a href="Reference/Lexical_grammar.html">Lexical grammar</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Enumerability_and_ownership_of_properties.html">Enumerability and ownership of properties</a></li>
<li><a href="Reference/Iteration_protocols.html">Iteration protocols</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Reference/Strict_mode/Transitioning_to_strict_mode.html">Transitioning to strict mode</a></li>
<li><a href="Reference/Template_literals.html">Template literals</a></li>
<li><a href="Reference/Deprecated_and_obsolete_features.html">Deprecated features</a></li>
</ol></li>
</ol>
</div>
</div>
</div>
<section class="newsletter-container">
<div id="newsletter-form-container" class="newsletter">
<section class="newsletter-head">
<h2 id="learn-the-best-of-web-development-9" class="newsletter-teaser">Learn the best of web development</h2>
<p>Get the latest and greatest from MDN delivered straight to your inbox.</p>
<p>The newsletter is offered in English only at the moment.</p>
</section>
<div class="form-group newsletter-group-email">
E-mail
</div>
<div id="newsletter-privacy" class="form-group form-group-agree newsletter-group-privacy" data-aria-hidden="false">
I’m okay with Mozilla handling my info as explained in this <a href="../../../../../external.html?link=https://www.mozilla.org/privacy/">Privacy Policy</a>.
</div>
<div class="newsletter-group-submit">
Sign up now
</div>
<span>Hide Newsletter Sign-up</span>
</div>
</section>
<div class="content-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/" class="nav-footer-logo">MDN Web Docs</a>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Web Technologies</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn Web Development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/About">About MDN</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Feedback</a></li>
</ul>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/">About</a></li>
<li><a href="../../../../../external.html?link=https://shop.spreadshirt.com/mdn-store/">MDN Web Docs Store</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/contact/">Contact Us</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/firefox/?utm_source=developer.mozilla.org&amp;utm_campaign=footer&amp;utm_medium=referral">Firefox</a></li>
</ul>
<div class="social social-mdn">
<h4 id="mdn-9">MDN</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<div class="social social-moz">
<h4 id="mozilla-9">Mozilla</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<p>© 2005-2020 Mozilla and individual contributors. Content is available under <a href="../../../../../external.html?link=https://developer.mozilla.org/docs/MDN/About#Copyrights_and_licenses">these licenses</a>.</p>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/legal/terms/mozilla">Terms</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/">Privacy</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/#cookies">Cookies</a></li>
</ul>
</div>
<div id="auth-modal" class="modal hidden">
<section class="auth-providers" tabindex="-1" data-role="dialog" data-aria-modal="true" data-aria-labelledby="modal-main-heading">
<h2 id="modal-main-heading">Sign In</h2>
<p>Sign in to enjoy the benefits of an MDN account. If you haven’t already created an account, you will be prompted to do so after signing in.</p>
<div class="auth-button-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/users/github/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FLanguage_Resources" class="github-auth">Sign in with Github</a> <a href="../../../../../external.html?link=https://developer.mozilla.org/users/google/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FLanguage_Resources" class="google-auth">Sign in with Google</a>
</div>
<span>Close modal</span>
</section>
</div>
<div id="react-container" data-component-name="SPA">
<div class="loading-bar">

</div>
<ul>
<li><a href="#content" id="skip-main">Skip to main content</a></li>
<li><a href="#language" id="skip-language">Select language</a></li>
<li><a href="#main-q" id="skip-search">Skip to search</a></li>
</ul>
<ul>
<li>Technologies
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Technologies Overview</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide/Graphics">Graphics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API">APIs / DOM</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions">Browser Extensions</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/MathML">MathML</a></li>
</ul></li>
<li>References &amp; Guides
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn web development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Tutorials">Tutorials</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Reference">References</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide">Developer Guides</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Accessibility">Accessibility</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Games">Game development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">...more docs</a></li>
</ul></li>
<li>Feedback
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Send Feedback</a></li>
<li><a href="../../../../../external.html?link=https://support.mozilla.org/">Get Firefox help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://stackoverflow.com/">Get web development help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Community">Join the MDN community</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/sprints/issues/new?template=issue-template.md&amp;projects=mdn/sprints/2&amp;labels=user-report&amp;title=/en-US/docs/Web/JavaScript/Memory_Management">Report a content problem 🌐</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/kuma/issues/new/choose">Report an issue 🌐</a></li>
</ul></li>
</ul>
<div class="header-search">
Search MDN
<span>Open search</span>
</div>
<div data-role="main">
<div class="titlebar-container">
<div class="titlebar">

</div>
</div>
<div class="full-width-row-container">
<div class="max-content-width-container">
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web" class="breadcrumb-chevron"><span class="pre-text">See </span><span data-property="name">Web technology for developers</span></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript" class="breadcrumb-previous"><span class="pre-text">See </span><span data-property="name">JavaScript</span></a></li>
<li><a href="Memory_Management.html" class="crumb-current-page"><span data-property="name" data-aria-current="page">Memory Management</span></a></li>
</ol>
<div class="dropdown-container language-menu">
English<span class="dropdown-arrow-down" data-aria-hidden="true">▼</span>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/de/docs/Web/JavaScript/Speicherverwaltung" title="German">Deutsch</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/es/docs/Web/JavaScript/Gestion_de_Memoria" title="Spanish">Español</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/fr/docs/Web/JavaScript/Gestion_de_la_mémoire" title="French">Français</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/id/docs/Web/JavaScript/Memory_Management" title="Indonesian">Bahasa Indonesia</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/it/docs/Web/JavaScript/Gestione_della_Memoria" title="Italian">Italiano</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ja/docs/Web/JavaScript/Memory_Management" title="Japanese">日本語</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ko/docs/Web/JavaScript/Memory_Management" title="Korean">한국어</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Memory_Management" title="Portuguese (Brazilian)">Português (do Brasil)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pt-PT/docs/Web/JavaScript/Gestao_Memoria" title="Portuguese (Portugal)">Português (Europeu)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ru/docs/Web/JavaScript/Memory_Management" title="Russian">Русский</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/tr/docs/Web/JavaScript/Memory_Management" title="Turkish">Türkçe</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/uk/docs/Web/JavaScript/Memory_Management" title="Ukrainian">Українська</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/vi/docs/Web/JavaScript/Memory_Management" title="Vietnamese">Tiếng Việt</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management" title="Chinese (Simplified)">中文 (简体)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Memory_Management" title="Chinese (Traditional)">正體中文 (繁體)</a></li>
<li><a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management$locales" id="translations-add">Add a translation</a></li>
</ul>
</div>
</div>
</div>
<div class="wiki-left-present content-layout">
<div id="content" class="article text-content">
<div>

</div>
<p>Low-level languages like C, have manual memory management primitives such as <a href="../../../../../external.html?link=https://pubs.opengroup.org/onlinepubs/009695399/functions/malloc.html" class="external">malloc()</a> and <a href="../../../../../external.html?link=https://en.wikipedia.org/wiki/C_dynamic_memory_allocation#Overview_of_functions" class="external">free()</a>. In contrast, JavaScript automatically allocates memory when objects are created and frees it when they are not used anymore (<em>garbage collection</em>). This automaticity is a potential source of confusion: it can give developers the false impression that they don't need to worry about memory management.</p>
<h2 id="Memory_life_cycle">Memory life cycle</h2>
<p>Regardless of the programming language, the memory life cycle is pretty much always the same:</p>
<ol>
<li>Allocate the memory you need</li>
<li>Use the allocated memory (read, write)</li>
<li>Release the allocated memory when it is not needed anymore</li>
</ol>
<p>The second part is explicit in all languages. The first and last parts are explicit in low-level languages but are mostly implicit in high-level languages like JavaScript.</p>
<h3 id="Allocation_in_JavaScript">Allocation in JavaScript</h3>
<h4 id="Value_initialization">Value initialization</h4>
<p>In order to not bother the programmer with allocations, JavaScript will automatically allocate memory when values are initially declared.</p>
<div class="sourceCode" id="cb141"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb141-1" title="1"><span class="kw">var</span> n <span class="op">=</span> <span class="dv">123</span><span class="op">;</span> <span class="co">// allocates memory for a number</span></a>
<a class="sourceLine" id="cb141-2" title="2"><span class="kw">var</span> s <span class="op">=</span> <span class="st">&#39;azerty&#39;</span><span class="op">;</span> <span class="co">// allocates memory for a string </span></a>
<a class="sourceLine" id="cb141-3" title="3"></a>
<a class="sourceLine" id="cb141-4" title="4"><span class="kw">var</span> o <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb141-5" title="5">  <span class="dt">a</span><span class="op">:</span> <span class="dv">1</span><span class="op">,</span></a>
<a class="sourceLine" id="cb141-6" title="6">  <span class="dt">b</span><span class="op">:</span> <span class="kw">null</span></a>
<a class="sourceLine" id="cb141-7" title="7"><span class="op">};</span> <span class="co">// allocates memory for an object and contained values</span></a>
<a class="sourceLine" id="cb141-8" title="8"></a>
<a class="sourceLine" id="cb141-9" title="9"><span class="co">// (like object) allocates memory for the array and </span></a>
<a class="sourceLine" id="cb141-10" title="10"><span class="co">// contained values</span></a>
<a class="sourceLine" id="cb141-11" title="11"><span class="kw">var</span> a <span class="op">=</span> [<span class="dv">1</span><span class="op">,</span> <span class="kw">null</span><span class="op">,</span> <span class="st">&#39;abra&#39;</span>]<span class="op">;</span> </a>
<a class="sourceLine" id="cb141-12" title="12"></a>
<a class="sourceLine" id="cb141-13" title="13"><span class="kw">function</span> <span class="at">f</span>(a) <span class="op">{</span></a>
<a class="sourceLine" id="cb141-14" title="14">  <span class="cf">return</span> a <span class="op">+</span> <span class="dv">2</span><span class="op">;</span></a>
<a class="sourceLine" id="cb141-15" title="15"><span class="op">}</span> <span class="co">// allocates a function (which is a callable object)</span></a>
<a class="sourceLine" id="cb141-16" title="16"></a>
<a class="sourceLine" id="cb141-17" title="17"><span class="co">// function expressions also allocate an object</span></a>
<a class="sourceLine" id="cb141-18" title="18"><span class="va">someElement</span>.<span class="at">addEventListener</span>(<span class="st">&#39;click&#39;</span><span class="op">,</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb141-19" title="19">  <span class="va">someElement</span>.<span class="va">style</span>.<span class="at">backgroundColor</span> <span class="op">=</span> <span class="st">&#39;blue&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb141-20" title="20"><span class="op">},</span> <span class="kw">false</span>)<span class="op">;</span></a></code></pre></div>
<h4 id="Allocation_via_function_calls">Allocation via function calls</h4>
<p>Some function calls result in object allocation.</p>
<div class="sourceCode" id="cb142"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb142-1" title="1"><span class="kw">var</span> d <span class="op">=</span> <span class="kw">new</span> <span class="at">Date</span>()<span class="op">;</span> <span class="co">// allocates a Date object</span></a>
<a class="sourceLine" id="cb142-2" title="2"></a>
<a class="sourceLine" id="cb142-3" title="3"><span class="kw">var</span> e <span class="op">=</span> <span class="va">document</span>.<span class="at">createElement</span>(<span class="st">&#39;div&#39;</span>)<span class="op">;</span> <span class="co">// allocates a DOM element</span></a></code></pre></div>
<p>Some methods allocate new values or objects:</p>
<div class="sourceCode" id="cb143"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb143-1" title="1"><span class="kw">var</span> s <span class="op">=</span> <span class="st">&#39;azerty&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb143-2" title="2"><span class="kw">var</span> s2 <span class="op">=</span> <span class="va">s</span>.<span class="at">substr</span>(<span class="dv">0</span><span class="op">,</span> <span class="dv">3</span>)<span class="op">;</span> <span class="co">// s2 is a new string</span></a>
<a class="sourceLine" id="cb143-3" title="3"><span class="co">// Since strings are immutable values, </span></a>
<a class="sourceLine" id="cb143-4" title="4"><span class="co">// JavaScript may decide to not allocate memory, </span></a>
<a class="sourceLine" id="cb143-5" title="5"><span class="co">// but just store the [0, 3] range.</span></a>
<a class="sourceLine" id="cb143-6" title="6"></a>
<a class="sourceLine" id="cb143-7" title="7"><span class="kw">var</span> a <span class="op">=</span> [<span class="st">&#39;ouais ouais&#39;</span><span class="op">,</span> <span class="st">&#39;nan nan&#39;</span>]<span class="op">;</span></a>
<a class="sourceLine" id="cb143-8" title="8"><span class="kw">var</span> a2 <span class="op">=</span> [<span class="st">&#39;generation&#39;</span><span class="op">,</span> <span class="st">&#39;nan nan&#39;</span>]<span class="op">;</span></a>
<a class="sourceLine" id="cb143-9" title="9"><span class="kw">var</span> a3 <span class="op">=</span> <span class="va">a</span>.<span class="at">concat</span>(a2)<span class="op">;</span> </a>
<a class="sourceLine" id="cb143-10" title="10"><span class="co">// new array with 4 elements being</span></a>
<a class="sourceLine" id="cb143-11" title="11"><span class="co">// the concatenation of a and a2 elements.</span></a></code></pre></div>
<h3 id="Using_values">Using values</h3>
<p>Using values basically means reading and writing in allocated memory. This can be done by reading or writing the value of a variable or an object property or even passing an argument to a function.</p>
<h3 id="Release_when_the_memory_is_not_needed_anymore">Release when the memory is not needed anymore</h3>
<p>The majority of memory management issues occur at this phase. The most difficult aspect of this stage is determining when the allocated memory is no longer needed. </p>
<p>Low-level languages require the developer to manually determine at which point in the program the allocated memory is no longer needed and to release it.</p>
<p>Some high-level languages, such as JavaScript, utilize a form of automatic memory management known as <a href="../../../../../external.html?link=https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)" class="external">garbage collection</a> (GC). The purpose of a garbage collector is to monitor memory allocation and determine when a block of allocated memory is no longer needed and reclaim it. This automatic process is an approximation since the general problem of determining whether or not a specific piece of memory is still needed is <a href="../../../../../external.html?link=http://en.wikipedia.org/wiki/Decidability_(logic)" class="external">undecidable</a>.</p>
<h2 id="Garbage_collection">Garbage collection</h2>
<p>As stated above, the general problem of automatically finding whether some memory "is not needed anymore" is undecidable. As a consequence, garbage collectors implement a restriction of a solution to the general problem. This section will explain the concepts that are necessary for understanding the main garbage collection algorithms and their respective limitations.</p>
<h3 id="References">References</h3>
<p>The main concept that garbage collection algorithms rely on is the concept of <em>reference</em>. Within the context of memory management, an object is said to reference another object if the former has access to the latter (either implicitly or explicitly). For instance, a JavaScript object has a reference to its <a href="Inheritance_and_the_prototype_chain.html">prototype</a> (implicit reference) and to its properties values (explicit reference).</p>
<p>In this context, the notion of an "object" is extended to something broader than regular JavaScript objects and also contain function scopes (or the global lexical scope).</p>
<h3 id="Reference-counting_garbage_collection">Reference-counting garbage collection</h3>
<p>This is the most naive garbage collection algorithm. This algorithm reduces the problem from determining whether or not an object is still needed to determining if an object still has any other objects referencing it. An object is said to be "garbage", or collectible if there are zero references pointing to it.</p>
<h4 id="Example">Example</h4>
<div class="sourceCode" id="cb144"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb144-1" title="1"><span class="kw">var</span> x <span class="op">=</span> <span class="op">{</span> </a>
<a class="sourceLine" id="cb144-2" title="2">  <span class="dt">a</span><span class="op">:</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb144-3" title="3">    <span class="dt">b</span><span class="op">:</span> <span class="dv">2</span></a>
<a class="sourceLine" id="cb144-4" title="4">  <span class="op">}</span></a>
<a class="sourceLine" id="cb144-5" title="5"><span class="op">};</span> </a>
<a class="sourceLine" id="cb144-6" title="6"><span class="co">// 2 objects are created. One is referenced by the other as one of its properties.</span></a>
<a class="sourceLine" id="cb144-7" title="7"><span class="co">// The other is referenced by virtue of being assigned to the &#39;x&#39; variable.</span></a>
<a class="sourceLine" id="cb144-8" title="8"><span class="co">// Obviously, none can be garbage-collected.</span></a>
<a class="sourceLine" id="cb144-9" title="9"></a>
<a class="sourceLine" id="cb144-10" title="10"></a>
<a class="sourceLine" id="cb144-11" title="11"><span class="kw">var</span> y <span class="op">=</span> x<span class="op">;</span>      <span class="co">// The &#39;y&#39; variable is the second thing that has a reference to the object.</span></a>
<a class="sourceLine" id="cb144-12" title="12"></a>
<a class="sourceLine" id="cb144-13" title="13">x <span class="op">=</span> <span class="dv">1</span><span class="op">;</span>          <span class="co">// Now, the object that was originally in &#39;x&#39; has a unique reference</span></a>
<a class="sourceLine" id="cb144-14" title="14">                <span class="co">//   embodied by the &#39;y&#39; variable.</span></a>
<a class="sourceLine" id="cb144-15" title="15"></a>
<a class="sourceLine" id="cb144-16" title="16"><span class="kw">var</span> z <span class="op">=</span> <span class="va">y</span>.<span class="at">a</span><span class="op">;</span>    <span class="co">// Reference to &#39;a&#39; property of the object.</span></a>
<a class="sourceLine" id="cb144-17" title="17">                <span class="co">//   This object now has 2 references: one as a property, </span></a>
<a class="sourceLine" id="cb144-18" title="18">                <span class="co">//   the other as the &#39;z&#39; variable.</span></a>
<a class="sourceLine" id="cb144-19" title="19"></a>
<a class="sourceLine" id="cb144-20" title="20">y <span class="op">=</span> <span class="st">&#39;mozilla&#39;</span><span class="op">;</span>  <span class="co">// The object that was originally in &#39;x&#39; has now zero</span></a>
<a class="sourceLine" id="cb144-21" title="21">                <span class="co">//   references to it. It can be garbage-collected.</span></a>
<a class="sourceLine" id="cb144-22" title="22">                <span class="co">//   However its &#39;a&#39; property is still referenced by </span></a>
<a class="sourceLine" id="cb144-23" title="23">                <span class="co">//   the &#39;z&#39; variable, so it cannot be freed.</span></a>
<a class="sourceLine" id="cb144-24" title="24"></a>
<a class="sourceLine" id="cb144-25" title="25">z <span class="op">=</span> <span class="kw">null</span><span class="op">;</span>       <span class="co">// The &#39;a&#39; property of the object originally in x </span></a>
<a class="sourceLine" id="cb144-26" title="26">                <span class="co">//   has zero references to it. It can be garbage collected.</span></a></code></pre></div>
<h4 id="Limitation_Circular_references">Limitation: Circular references</h4>
<p>There is a limitation when it comes to circular references. In the following example, two objects are created with properties that reference one another, thus creating a cycle. They will go out of scope after the function call has completed. At that point they become unneeded and their allocated memory should be reclaimed. However, the reference-counting algorithm will not consider them reclaimable since each of the two objects has at least one reference pointing to them, resulting in neither of them being marked for garbage collection. Circular references are a common cause of memory leaks.</p>
<div class="sourceCode" id="cb145"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb145-1" title="1"><span class="kw">function</span> <span class="at">f</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb145-2" title="2">  <span class="kw">var</span> x <span class="op">=</span> <span class="op">{};</span></a>
<a class="sourceLine" id="cb145-3" title="3">  <span class="kw">var</span> y <span class="op">=</span> <span class="op">{};</span></a>
<a class="sourceLine" id="cb145-4" title="4">  <span class="va">x</span>.<span class="at">a</span> <span class="op">=</span> y<span class="op">;</span>        <span class="co">// x references y</span></a>
<a class="sourceLine" id="cb145-5" title="5">  <span class="va">y</span>.<span class="at">a</span> <span class="op">=</span> x<span class="op">;</span>        <span class="co">// y references x</span></a>
<a class="sourceLine" id="cb145-6" title="6"></a>
<a class="sourceLine" id="cb145-7" title="7">  <span class="cf">return</span> <span class="st">&#39;azerty&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb145-8" title="8"><span class="op">}</span></a>
<a class="sourceLine" id="cb145-9" title="9"></a>
<a class="sourceLine" id="cb145-10" title="10"><span class="at">f</span>()<span class="op">;</span></a></code></pre></div>
<h4 id="Real-life_example">Real-life example</h4>
<p>Internet Explorer 6 and 7 are known to have reference-counting garbage collectors for DOM objects. Cycles are a common mistake that can generate memory leaks:</p>
<div class="sourceCode" id="cb146"><pre class="sourceCode brush: js"><code class="sourceCode javascript"><a class="sourceLine" id="cb146-1" title="1"><span class="kw">var</span> div<span class="op">;</span></a>
<a class="sourceLine" id="cb146-2" title="2"><span class="va">window</span>.<span class="at">onload</span> <span class="op">=</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb146-3" title="3">  div <span class="op">=</span> <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;myDivElement&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb146-4" title="4">  <span class="va">div</span>.<span class="at">circularReference</span> <span class="op">=</span> div<span class="op">;</span></a>
<a class="sourceLine" id="cb146-5" title="5">  <span class="va">div</span>.<span class="at">lotsOfData</span> <span class="op">=</span> <span class="kw">new</span> <span class="at">Array</span>(<span class="dv">10000</span>).<span class="at">join</span>(<span class="st">&#39;*&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb146-6" title="6"><span class="op">};</span></a></code></pre></div>
<p>In the above example, the DOM element "myDivElement" has a circular reference to itself in the "circularReference" property. If the property is not explicitly removed or nulled, a reference-counting garbage collector will always have at least one reference intact and will keep the DOM element in memory even if it was removed from the DOM tree. If the DOM element holds a large amount of data (illustrated in the above example with the "lotsOfData" property), the memory consumed by this data will never be released and can lead to memory related issues such as the browser becoming increasingly slower.</p>
<h3 id="Mark-and-sweep_algorithm">Mark-and-sweep algorithm</h3>
<p>This algorithm reduces the definition of "an object is no longer needed" to "an object is unreachable".</p>
<p>This algorithm assumes the knowledge of a set of objects called <em>roots. </em>In JavaScript, the root is the global object. Periodically, the garbage collector will start from these roots, find all objects that are referenced from these roots, then all objects referenced from these, etc. Starting from the roots, the garbage collector will thus find all <em>reachable</em> objects and collect all non-reachable objects.</p>
<p>This algorithm is an improvement over the previous one since an object having zero references is effectively unreachable. The opposite does not hold true as we have seen with circular references.</p>
<p>As of 2012, all modern browsers ship a mark-and-sweep garbage-collector. All improvements made in the field of JavaScript garbage collection (generational/incremental/concurrent/parallel garbage collection) over the last few years are implementation improvements of this algorithm, but not improvements over the garbage collection algorithm itself nor its reduction of the definition of when "an object is no longer needed".</p>
<h4 id="Cycles_are_no_longer_a_problem">Cycles are no longer a problem</h4>
<p>In the first example above, after the function call returns, the two objects are no longer referenced by any resource that is reachable from the global object. Consequently, they will be found unreachable by the garbage collector and have their allocated memory reclaimed.</p>
<h4 id="Limitation_Releasing_memory_manually">Limitation: Releasing memory manually</h4>
<p>There are times when it would be convenient to manually decide when and what memory is released. In order to release the memory of an object, it needs to be made explicitly unreachable.</p>
<p>As of 2019, it is not possible to explicitly or programmatically trigger garbage collection in JavaScript.</p>
<h2 id="Node.js">Node.js</h2>
<p>Node.js offers additional options and tools for configuring and debugging memory issues that may not be available for JavaScript executed within a browser environment.</p>
<h4 id="V8_Engine_Flags">V8 Engine Flags</h4>
<p>The max amount of available heap memory can be increased with a flag:</p>
<p><code>node --max-old-space-size=6000 index.js</code></p>
<p>We can also expose the garbage collector for debugging memory issues using a flag and the <a href="../../../../../external.html?link=https://nodejs.org/en/docs/guides/debugging-getting-started/" class="external">Chrome Debugger</a>:</p>
<div class="sourceCode" id="cb147"><pre class="sourceCode brush: bash"><code class="sourceCode bash"><a class="sourceLine" id="cb147-1" title="1"><span class="ex">node</span> --expose-gc --inspect index.js</a></code></pre></div>
<h4 id="See_also">See also</h4>
<ul>
<li><a href="../../../../../external.html?link=http://www.ibm.com/developerworks/web/library/wa-memleak/" class="external">IBM article on "Memory leak patterns in JavaScript" (2007)</a></li>
<li><a href="../../../../../external.html?link=http://msdn.microsoft.com/en-us/magazine/ff728624.aspx" class="external">Kangax article on how to register event handler and avoid memory leaks (2010)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Mozilla/Performance" title="https://developer.mozilla.org/en-US/docs/Mozilla/Performance">Performance</a></li>
</ul>
<div class="metadata">
<section class="document-meta">
<h4 id="metadata-10">Metadata</h4>
<ul>
<li><strong>Last modified:</strong> Mar 4, 2020, <a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management$history">by MDN contributors</a></li>
</ul>
</section>
</div>
</div>
<div id="sidebar-quicklinks" class="sidebar">
<div class="quick-links">
<div class="quick-links-head sidebar-heading">
Related Topics
</div>
<div>
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong><em>JavaScript</em></strong></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong>Tutorials:</strong></a></li>
<li>Complete beginners
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics">JavaScript basics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps">JavaScript first steps</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks">JavaScript building blocks</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Introducing JavaScript objects</a></li>
</ol></li>
<li>JavaScript Guide
<ol>
<li><a href="Guide/Introduction.html">Introduction</a></li>
<li><a href="Guide/Grammar_and_Types.html">Grammar and types</a></li>
<li><a href="Guide/Control_flow_and_error_handling.html">Control flow and error handling</a></li>
<li><a href="Guide/Loops_and_iteration.html">Loops and iteration</a></li>
<li><a href="Guide/Functions.html">Functions</a></li>
<li><a href="Guide/Expressions_and_Operators.html">Expressions and operators</a></li>
<li><a href="Guide/Numbers_and_dates.html">Numbers and dates</a></li>
<li><a href="Guide/Text_formatting.html">Text formatting</a></li>
<li><a href="Guide/Regular_Expressions.html">Regular expressions</a></li>
<li><a href="Guide/Indexed_collections.html">Indexed collections</a></li>
<li><a href="Guide/Keyed_collections.html">Keyed collections</a></li>
<li><a href="Guide/Working_with_Objects.html">Working with objects</a></li>
<li><a href="Guide/Details_of_the_Object_Model.html">Details of the object model</a></li>
<li><a href="Guide/Using_promises.html">Using promises</a></li>
<li><a href="Guide/Iterators_and_generators.html">Iterators and generators</a></li>
<li><a href="Guide/Meta_programming.html">Meta programming</a></li>
<li><a href="Guide/Modules.html">JavaScript modules</a></li>
</ol></li>
<li>Intermediate
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Introducing JavaScript objects</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs">Client-side web APIs</a></li>
<li><a href="A_re-introduction_to_JavaScript.html">A re-introduction to JavaScript</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Equality_comparisons_and_sameness.html">Equality comparisons and sameness</a></li>
<li><a href="Closures.html">Closures</a></li>
</ol></li>
<li>Advanced
<ol>
<li><a href="Inheritance_and_the_prototype_chain.html">Inheritance and the prototype chain</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Typed_arrays.html">JavaScript typed arrays</a></li>
<li><a href="Memory_Management.html">Memory Management</a></li>
<li><a href="EventLoop.html">Concurrency model and Event Loop</a></li>
</ol></li>
<li><strong><a href="Reference.html">References:</a></strong></li>
<li>Built-in objects
<ol>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/AggregateError.html" title="The AggregateError object represents an error when several errors need to be wrapped in a single error.">AggregateError</a></li>
<li><a href="Reference/Global_Objects/Array.html" title="The JavaScript Array class is a global object that is used in the construction of arrays; which are high-level, list-like objects.">Array</a></li>
<li><a href="Reference/Global_Objects/ArrayBuffer.html" title="The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer.">ArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/AsyncFunction.html" title="The AsyncFunction constructor creates a new async function object. In JavaScript, every asynchronous function is actually an AsyncFunction object.">AsyncFunction</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/AsyncIterator.html" title="The AsyncIterator global object is an abstract class providing helper methods, similar to the ones exposed on Array instances.">AsyncIterator</a></li>
<li><a href="Reference/Global_Objects/Atomics.html" title="The Atomics object provides atomic operations as static methods. They are used with SharedArrayBuffer objects.">Atomics</a></li>
<li><a href="Reference/Global_Objects/BigInt.html" title="BigInt is a built-in object that provides a way to represent whole numbers larger than 253 - 1, which is the largest number JavaScript can reliably represent with the Number primitive and represented by the Number.MAX_SAFE_INTEGER constant. BigInt can be used for arbitrarily large integers.">BigInt</a></li>
<li><a href="Reference/Global_Objects/BigInt64Array.html" title="The BigInt64Array typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigInt64Array</a></li>
<li><a href="Reference/Global_Objects/BigUint64Array.html" title="The BigUint64Array typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigUint64Array</a></li>
<li><a href="Reference/Global_Objects/Boolean.html" title="The Boolean object is an object wrapper for a boolean value.">Boolean</a></li>
<li><a href="Reference/Global_Objects/DataView.html" title="The DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform&#39;s endianness.">DataView</a></li>
<li><a href="Reference/Global_Objects/Date.html" title="JavaScript Date objects represent a single moment in time in a platform-independent format.">Date</a></li>
<li><a href="Reference/Global_Objects/Error.html" title="Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.">Error</a></li>
<li><a href="Reference/Global_Objects/EvalError.html" title="The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.">EvalError</a></li>
<li><a href="Reference/Global_Objects/Float32Array.html" title="The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float32Array</a></li>
<li><a href="Reference/Global_Objects/Float64Array.html" title="The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float64Array</a></li>
<li><a href="Reference/Global_Objects/Function.html" title="Every JavaScript function is actually a Function object. This can be seen with the code (function(){}).constructor === Function which returns true.">Function</a></li>
<li><a href="Reference/Global_Objects/Generator.html" title="The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.">Generator</a></li>
<li><a href="Reference/Global_Objects/GeneratorFunction.html" title="The GeneratorFunction constructor creates a new generator function object. In JavaScript every generator function is actually a GeneratorFunction object.">GeneratorFunction</a></li>
<li><a href="Reference/Global_Objects/Infinity.html" title="The global property Infinity is a numeric value representing infinity.">Infinity</a></li>
<li><a href="Reference/Global_Objects/Int16Array.html" title="The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int16Array</a></li>
<li><a href="Reference/Global_Objects/Int32Array.html" title="The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int32Array</a></li>
<li><a href="Reference/Global_Objects/Int8Array.html" title="The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int8Array</a></li>
<li><a href="Reference/Global_Objects/InternalError.html" title="The InternalError object indicates an error that occurred internally in the JavaScript engine.">InternalError</a></li>
<li><a href="Reference/Global_Objects/Intl.html" title="The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The Intl object provides access to several constructors as well as functionality common to the internationalization constructors and other language sensitive functions.">Intl</a></li>
<li><a href="Reference/Global_Objects/Intl/Collator.html" title="The Intl.Collator objects enable language sensitive string comparison.">Intl.Collator</a></li>
<li><a href="Reference/Global_Objects/Intl/DateTimeFormat.html" title="The Intl.DateTimeFormat object is a constructor for objects that enable language-sensitive date and time formatting.">Intl.DateTimeFormat</a></li>
<li><a href="Reference/Global_Objects/Intl/DisplayNames.html" title="The Intl.DisplayNames object is a constructor for objects that enables the consistent translation of language, region and script display names.">Intl.DisplayNames</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/Intl/ListFormat.html" title="The Intl.ListFormat object is a constructor for objects that enable language-sensitive list formatting.">Intl.ListFormat</a></li>
<li><a href="Reference/Global_Objects/Intl/Locale.html" title="The Intl.Locale object is a standard built-in property of the Intl object that represents a Unicode locale identifier.">Intl.Locale</a></li>
<li><a href="Reference/Global_Objects/Intl/NumberFormat.html" title="The Intl.NumberFormat object is a constructor for objects that enable language sensitive number formatting.">Intl.NumberFormat</a></li>
<li><a href="Reference/Global_Objects/Intl/PluralRules.html" title="The Intl.PluralRules object enables plural-sensitive formatting and plural-related language rules.">Intl.PluralRules</a></li>
<li><a href="Reference/Global_Objects/Intl/RelativeTimeFormat.html" title="The Intl.RelativeTimeFormat object enables language-sensitive relative time formatting.">Intl.RelativeTimeFormat</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/Iterator.html" title="The Iterator global object is an abstract class providing helper methods, similar to the ones exposed on Array instances.">Iterator</a></li>
<li><a href="Reference/Global_Objects/JSON.html" title="The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can&#39;t be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.">JSON</a></li>
<li><a href="Reference/Global_Objects/Map.html" title="The Map object holds key-value pairs and remembers the original insertion order of the keys.">Map</a></li>
<li><a href="Reference/Global_Objects/Math.html" title="Math is a built-in object that has properties and methods for mathematical constants and functions. Not a function object.">Math</a></li>
<li><a href="Reference/Global_Objects/NaN.html" title="The global NaN property is a value representing Not-A-Number.">NaN</a></li>
<li><a href="Reference/Global_Objects/Number.html" title="The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor. A primitive type object number is created using the Number() function.">Number</a></li>
<li><a href="Reference/Global_Objects/Object.html" title="The Object class represents one of JavaScript&#39;s data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.">Object</a></li>
<li><a href="Reference/Global_Objects/Promise.html" title="The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.">Promise</a></li>
<li><a href="Reference/Global_Objects/Proxy.html" title="The Proxy object is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc).">Proxy</a></li>
<li><a href="Reference/Global_Objects/RangeError.html" title="The RangeError object indicates an error when a value is not in the set or range of allowed values.">RangeError</a></li>
<li><a href="Reference/Global_Objects/ReferenceError.html" title="The ReferenceError object represents an error when a non-existent variable is referenced.">ReferenceError</a></li>
<li><a href="Reference/Global_Objects/Reflect.html" title="Reflect is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of proxy handlers. Reflect is not a function object, so it&#39;s not constructible.">Reflect</a></li>
<li><a href="Reference/Global_Objects/RegExp.html" title="The RegExp object is used for matching text with a pattern.">RegExp</a></li>
<li><a href="Reference/Global_Objects/Set.html" title="The Set object lets you store unique values of any type, whether primitive values or object references.">Set</a></li>
<li><a href="Reference/Global_Objects/SharedArrayBuffer.html" title="The SharedArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. Unlike an ArrayBuffer, a SharedArrayBuffer cannot become detached.">SharedArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/String.html" title="The String global object is a constructor for strings or a sequence of characters.">String</a></li>
<li><a href="Reference/Global_Objects/Symbol.html" title="The data type symbol is a primitive data type. The Symbol() function returns a value of type symbol, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class, but is incomplete as a constructor because it does not support the syntax &quot;new Symbol()&quot;.">Symbol</a></li>
<li><a href="Reference/Global_Objects/SyntaxError.html" title="The SyntaxError object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.">SyntaxError</a></li>
<li><a href="Reference/Global_Objects/TypeError.html" title="The TypeError object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.">TypeError</a></li>
<li><a href="Reference/Global_Objects/TypedArray.html" title="A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.">TypedArray</a></li>
<li><a href="Reference/Global_Objects/URIError.html" title="The URIError object represents an error when a global URI handling function was used in a wrong way.">URIError</a></li>
<li><a href="Reference/Global_Objects/Uint16Array.html" title="The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint16Array</a></li>
<li><a href="Reference/Global_Objects/Uint32Array.html" title="The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint32Array</a></li>
<li><a href="Reference/Global_Objects/Uint8Array.html" title="The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8Array</a></li>
<li><a href="Reference/Global_Objects/Uint8ClampedArray.html" title="The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8ClampedArray</a></li>
<li><a href="Reference/Global_Objects/WeakMap.html" title="The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.">WeakMap</a></li>
<li><a href="Reference/Global_Objects/WeakSet.html" title="The WeakSet object lets you store weakly held objects in a collection.">WeakSet</a></li>
<li><a href="Reference/Global_Objects/WebAssembly.html" title="The WebAssembly JavaScript object acts as the namespace for all WebAssembly-related functionality.">WebAssembly</a></li>
<li><a href="Reference/Global_Objects/decodeURI.html" title="The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or by a similar routine.">decodeURI()</a></li>
<li><a href="Reference/Global_Objects/decodeURIComponent.html" title="The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.">decodeURIComponent()</a></li>
<li><a href="Reference/Global_Objects/encodeURI.html" title="The encodeURI() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURI()</a></li>
<li><a href="Reference/Global_Objects/encodeURIComponent.html" title="The encodeURIComponent() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURIComponent()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/escape.html" title="The escape() function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.">escape()</a></li>
<li><a href="Reference/Global_Objects/eval.html" title="The eval() function evaluates JavaScript code represented as a string.">eval()</a></li>
<li><a href="Reference/Global_Objects/globalThis.html" title="The global globalThis property contains the global this value, which is akin to the global object.">globalThis</a></li>
<li><a href="Reference/Global_Objects/isFinite.html" title="The global isFinite() function determines whether the passed value is a finite number. If  needed, the parameter is first converted to a number.">isFinite()</a></li>
<li><a href="Reference/Global_Objects/isNaN.html" title="The isNaN() function determines whether a value is NaN or not. Note, coercion inside the isNaN function has interesting rules; you may alternatively want to use Number.isNaN(), as defined in ECMAScript 2015.">isNaN()</a></li>
<li><a href="Reference/Global_Objects/null.html" title="The value null represents the intentional absence of any object value. It is one of JavaScript&#39;s primitive values and is treated as falsy for boolean operations.">null</a></li>
<li><a href="Reference/Global_Objects/parseFloat.html" title="The parseFloat() function parses an argument (converting it to a string first if needed) and returns a floating point number.">parseFloat()</a></li>
<li><a href="Reference/Global_Objects/parseInt.html" title="The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).">parseInt()</a></li>
<li><a href="Reference/Global_Objects/undefined.html" title="The global undefined property represents the primitive value undefined. It is one of JavaScript&#39;s primitive types.">undefined</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/unescape.html" title="The unescape() function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Usually, decodeURI or decodeURIComponent are preferred over unescape.">unescape()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><a href="Reference/Global_Objects/uneval.html" title="The uneval() function creates a string representation of the source code of an Object.">uneval()</a></li>
</ol></li>
<li>Expressions &amp; operators
<ol>
<li><a href="Reference/Operators.html" title="Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).">Arithmetic operators</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/Array_comprehensions" title="The array comprehension syntax was a JavaScript expression which allowed you to quickly assemble a new array based on an existing one. However, it has been removed from the standard and the Firefox implementation. Do not use it!">Array comprehensions</a></li>
<li><a href="Reference/Operators%23Assignment_operators.html" title="An assignment operator assigns a value to its left operand based on the value of its right operand.">Assignment operators</a></li>
<li><a href="Reference/Operators.html" title="Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.">Bitwise operators</a></li>
<li><a href="Reference/Operators/Comma_Operator.html" title="The comma operator evaluates each of its operands (from left to right) and returns the value of the last operand.">Comma operator</a></li>
<li><a href="Reference/Operators.html" title="JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., &lt;=), the operands are first converted to primitives, then to the same type, before comparison.">Comparison operators</a></li>
<li><a href="Reference/Operators/Conditional_Operator.html" title="The conditional (ternary) operator is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy.">Conditional (ternary) operator</a></li>
<li><a href="Reference/Operators/Destructuring_assignment.html" title="The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.">Destructuring assignment</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/Expression_closures" title="Expression closures are a shorthand function syntax for writing simple functions.">Expression closures</a></li>
<li><a href="Reference/Operators/function.html" title="The function keyword can be used to define a function inside an expression.">Function expression</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/Generator_comprehensions" title="The generator comprehension syntax was a JavaScript expression which allowed you to quickly assemble a new generator function based on an existing iterable object. However, it has been removed from the standard and the Firefox implementation. Do not use it!">Generator comprehensions</a></li>
<li><a href="Reference/Operators/Grouping.html" title="The grouping operator ( ) controls the precedence of evaluation in expressions.">Grouping operator</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/Legacy_generator_function" title="The function keyword can be used to define a legacy generator function inside an expression. To make the function a legacy generator, the function body should contain at least one yield expression.">Legacy generator function expression</a></li>
<li><a href="Reference/Operators.html" title="Logical operators are typically used with Boolean (logical) values. When they are, they return a Boolean value. However, the &amp;&amp; and || operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they will return a non-Boolean value.">Logical operators</a></li>
<li><a href="Reference/Operators/Nullish_coalescing_operator.html" title="The nullish coalescing operator (??) is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.">Nullish coalescing operator</a></li>
<li><a href="Reference/Operators/Object_initializer.html" title="Objects can be initialized using new Object(), Object.create(), or using the literal notation (initializer notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).">Object initializer</a></li>
<li><a href="Reference/Operators/Operator_Precedence.html" title="Operator precedence determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.">Operator precedence</a></li>
<li><a href="Reference/Operators/Optional_chaining.html" title="The ?. operator functions similarly to the . chaining operator, except that instead of causing an error if a reference is nullish (null or undefined), the expression short-circuits with a return value of undefined.">Optional chaining</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Operators/Pipeline_operator.html" title="The experimental pipeline operator |&gt; (currently at stage 1) pipes the value of an expression into a function. This allows the creation of chained function calls in a readable manner. The result is syntactic sugar in which a function call with a single argument can be written like this:">Pipeline operator</a></li>
<li><a href="Reference/Operators/Property_Accessors-2.html" title="Property accessors provide access to an object&#39;s properties by using the dot notation or the bracket notation.">Property accessors</a></li>
<li><a href="Reference/Operators/Spread_syntax.html" title="Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.">Spread syntax</a></li>
<li><a href="Reference/Operators/async_function.html" title="The async function keyword can be used to define async functions inside expressions.">async function expression</a></li>
<li><a href="Reference/Operators/await.html" title="The await operator is used to wait for a Promise. It can only be used inside an async function.">await</a></li>
<li><a href="Reference/Operators/class.html" title="The class expression is one way to define a class in ECMAScript 2015. Similar to function expressions, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. ">class expression</a></li>
<li><a href="Reference/Operators/delete.html" title="The JavaScript delete operator removes a property from an object; if no more references to the same property are held, it is eventually released automatically.">delete operator</a></li>
<li><a href="Reference/Operators/function_.html" title="The function* keyword can be used to define a generator function inside an expression.">function* expression</a></li>
<li><a href="Reference/Operators/in.html" title="The in operator returns true if the specified property is in the specified object or its prototype chain.">in operator</a></li>
<li><a href="Reference/Operators/instanceof.html" title="The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object.">instanceof</a></li>
<li><a href="Reference/Operators/new.html" title="The new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.">new operator</a></li>
<li><a href="Reference/Operators/new-2.html" title="The new.target pseudo-property lets you detect whether a function or constructor was called using the new operator. In constructors and functions invoked using the new operator, new.target returns a reference to the constructor or function. In normal function calls, new.target is undefined.">new.target</a></li>
<li><a href="Reference/Operators/super.html" title="The super keyword is used to access and call functions on an object&#39;s parent.">super</a></li>
<li><a href="Reference/Operators/this.html" title="A function&#39;s this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode.">this</a></li>
<li><a href="Reference/Operators/typeof.html" title="The typeof operator returns a string indicating the type of the unevaluated operand.">typeof</a></li>
<li><a href="Reference/Operators/void.html" title="The void operator evaluates the given expression and then returns undefined.">void operator</a></li>
<li><a href="Reference/Operators/yield.html" title="The yield keyword is used to pause and resume a generator function (function* or legacy generator function).">yield</a></li>
<li><a href="Reference/Operators/yield_.html" title="The yield* expression is used to delegate to another generator or iterable object.">yield*</a></li>
</ol></li>
<li>Statements &amp; declarations
<ol>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/Legacy_generator_function_statement" title="The legacy generator function statement declares legacy generator functions with the specified parameters.">Legacy generator function</a></li>
<li><a href="Reference/Statements/async_function.html" title="The async function declaration defines an asynchronous function — a function that returns an AsyncFunction object.">async function</a></li>
<li><a href="Reference/Statements/block.html" title="A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of curly brackets and may optionally be labelled:">block</a></li>
<li><a href="Reference/Statements/break.html" title="The break statement terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.">break</a></li>
<li><a href="Reference/Statements/class.html" title="The class declaration creates a new class with a given name using prototype-based inheritance.">class</a></li>
<li><a href="Reference/Statements/const.html" title="Constants are block-scoped, much like variables defined using the let statement. The value of a constant can&#39;t be changed through reassignment, and it can&#39;t be redeclared.">const</a></li>
<li><a href="Reference/Statements/continue.html" title="The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.">continue</a></li>
<li><a href="Reference/Statements/debugger.html" title="The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.">debugger</a></li>
<li><a href="Reference/Statements/switch.html" title="The default keyword can be used in two situations in JavaScript: within a switch statement, or with an export statement.">default</a></li>
<li><a href="Reference/Statements/do...html" title="The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.">do...while</a></li>
<li><a href="Reference/Statements/Empty.html" title="An empty statement is used to provide no statement, although the JavaScript syntax would expect one.">empty</a></li>
<li><a href="Reference/Statements/export.html" title="The export statement is used when creating JavaScript modules to export functions, objects, or primitive values from the module so they can be used by other programs with the import statement.">export</a></li>
<li><a href="Reference/Statements/for.html" title="The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.">for</a></li>
<li><a href="Reference/Statements/for-await...html" title="The for await...of statement creates a loop iterating over async iterable objects as well as on sync iterables, including: built-in String, Array, Array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined async/sync iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.">for await...of</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/for_each...in" title="The for each...in statement iterates a specified variable over all values of object&#39;s properties. For each distinct property, a specified statement is executed.">for each...in</a></li>
<li><a href="Reference/Statements/for...html" title="The for...in statement iterates over all enumerable properties of an object that are keyed by strings (ignoring ones keyed by Symbols), including inherited enumerable properties.">for...in</a></li>
<li><a href="Reference/Statements/for..-2.html" title="The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.">for...of</a></li>
<li><a href="Reference/Statements/function.html" title="The function declaration (function statement) defines a function with the specified parameters.">function declaration</a></li>
<li><a href="Reference/Statements/function_.html" title="The function* declaration (function keyword followed by an asterisk) defines a generator function, which returns a Generator object.">function*</a></li>
<li><a href="Reference/Statements/if...html" title="The if statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement can be executed.">if...else</a></li>
<li><a href="Reference/Statements/import.html" title="The static import statement is used to import bindings which are exported by another module. ">import</a></li>
<li><a href="Reference/Statements/import-2.html" title="The import.meta object exposes context-specific metadata to a JavaScript module. It contains information about the module, like the module&#39;s URL.">import.meta</a></li>
<li><a href="Reference/Statements/label.html" title="The labeled statement can be used with break or continue statements. It is prefixing a statement with an identifier which you can refer to.">label</a></li>
<li><a href="Reference/Statements/let.html" title="The let statement declares a block scope local variable, optionally initializing it to a value.">let</a></li>
<li><a href="Reference/Statements/return.html" title="The return statement ends function execution and specifies a value to be returned to the function caller.">return</a></li>
<li><a href="Reference/Statements/switch.html" title="The switch statement evaluates an expression, matching the expression&#39;s value to a case clause, and executes statements associated with that case, as well as statements in cases that follow the matching case.">switch</a></li>
<li><a href="Reference/Statements/throw.html" title="The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won&#39;t be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.">throw</a></li>
<li><a href="Reference/Statements/try...html" title="The try...catch statement marks a block of statements to try and specifies a response should an exception be thrown.">try...catch</a></li>
<li><a href="Reference/Statements/var.html" title="The var statement declares a variable, optionally initializing it to a value.">var</a></li>
<li><a href="Reference/Statements/while.html" title="The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.">while</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Statements/with.html" title="The with statement extends the scope chain for a statement.">with</a></li>
</ol></li>
<li>Functions
<ol>
<li><a href="Reference/Functions/Arrow_functions.html" title="An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords. Arrow function expressions are ill suited as methods, and they cannot be used as constructors.">Arrow function expressions</a></li>
<li><a href="Reference/Functions/Default_parameters.html" title="Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.">Default parameters</a></li>
<li><a href="Reference/Functions/Method_definitions.html" title="Starting with ECMAScript 2015, a shorter syntax for method definitions on objects initializers is introduced. It is a shorthand for a function assigned to the method&#39;s name.">Method definitions</a></li>
<li><a href="Reference/Functions/rest_parameters.html" title="The rest parameter syntax allows us to represent an indefinite number of arguments as an array.">Rest parameters</a></li>
<li><a href="Reference/Functions/arguments.html" title="arguments is an Array-like object accessible inside functions that contains the values of the arguments passed to that function.">The arguments object</a></li>
<li><a href="Reference/Functions/get.html" title="The get syntax binds an object property to a function that will be called when that property is looked up.">getter</a></li>
<li><a href="Reference/Functions/set.html" title="The set syntax binds an object property to a function to be called when there is an attempt to set that property.">setter</a></li>
</ol></li>
<li>Classes
<ol>
<li><a href="Reference/Classes/Public_class_fields.html" title="Both static and instance public fields are writable, enumerable, and configurable properties. As such, unlike their private counterparts, they participate in prototype inheritance.">Class fields</a></li>
<li><a href="Reference/Classes/constructor.html" title="The constructor method is a special method for creating and initializing an object created within a class.">constructor</a></li>
<li><a href="Reference/Classes/extends.html" title="The extends keyword is used in class declarations or class expressions to create a class which is a child of another class.">extends</a></li>
<li><a href="Reference/Classes/static.html" title="The static keyword defines a static method for a class. Static methods aren&#39;t called on instances of the class. Instead, they&#39;re called on the class itself.">static</a></li>
</ol></li>
<li>Errors
<ol>
<li><a href="Reference/Errors/Property_access_denied.html" title="There was attempt to access an object for which you have no permission. This is likely an &lt;iframe&gt; element loaded from a different domain for which you violated the same-origin policy.">Error: Permission denied to access property "x"</a></li>
<li><a href="Reference/Errors/Too_much_recursion.html" title="When there are too many function calls, or a function is missing a base case, JavaScript will throw this error.">InternalError: too much recursion</a></li>
<li><a href="Reference/Errors/Not_a_codepoint.html" title="String.fromCodePoint() throws this error when passed NaN values, negative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF (1114111).">RangeError: argument is not a valid code point</a></li>
<li><a href="Reference/Errors/Invalid_array_length.html" title="RangeError">RangeError: invalid array length</a></li>
<li><a href="Reference/Errors/Invalid_date.html" title="RangeError">RangeError: invalid date</a></li>
<li><a href="Reference/Errors/Precision_range.html" title="RangeError">RangeError: precision is out of range</a></li>
<li><a href="Reference/Errors/Bad_radix.html" title="RangeError">RangeError: radix must be an integer</a></li>
<li><a href="Reference/Errors/Resulting_string_too_large.html" title="RangeError">RangeError: repeat count must be less than infinity</a></li>
<li><a href="Reference/Errors/Negative_repetition_count.html" title="RangeError">RangeError: repeat count must be non-negative</a></li>
<li><a href="Reference/Errors/Not_defined.html" title="ReferenceError.">ReferenceError: "x" is not defined</a></li>
<li><a href="Reference/Errors/Undeclared_var.html" title="ReferenceError warning in strict mode only.">ReferenceError: assignment to undeclared variable "x"</a></li>
<li><a href="Reference/Errors/Cant_access_lexical_declaration_before_init.html" title="ReferenceError">ReferenceError: can't access lexical declaration`X' before initialization</a></li>
<li><a href="Reference/Errors/Deprecated_caller_or_arguments_usage.html" title="A strict-mode-only warning that a ReferenceError occurred. JavaScript execution won&#39;t be halted.">ReferenceError: deprecated caller or arguments usage</a></li>
<li><a href="Reference/Errors/Invalid_assignment_left-hand_side.html" title="ReferenceError.">ReferenceError: invalid assignment left-hand side</a></li>
<li><a href="Reference/Errors/Undefined_prop.html" title="(Firefox only) ReferenceError warning which is reported only if javascript.options.strict preference is set to true.">ReferenceError: reference to undefined property "x"</a></li>
<li><a href="Reference/Errors/Deprecated_octal.html" title="SyntaxError in strict mode only.">SyntaxError: "0"-prefixed octal literals and octal escape seq. are deprecated</a></li>
<li><a href="Reference/Errors/Strict_Non_Simple_Params.html" title="SyntaxError.">SyntaxError: "use strict" not allowed in function with non-simple parameters</a></li>
<li><a href="Reference/Errors/Reserved_identifier.html" title="SyntaxError">SyntaxError: "x" is a reserved identifier</a></li>
<li><a href="Reference/Errors/JSON_bad_parse.html" title="SyntaxError">SyntaxError: JSON.parse: bad parsing</a></li>
<li><a href="Reference/Errors/Malformed_formal_parameter.html" title="SyntaxError">SyntaxError: Malformed formal parameter</a></li>
<li><a href="Reference/Errors/Unexpected_token.html" title="SyntaxError">SyntaxError: Unexpected token</a></li>
<li><a href="Reference/Errors/Deprecated_source_map_pragma.html" title="A warning that a SyntaxError occurred. JavaScript execution won&#39;t be halted.">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li>
<li><a href="Reference/Errors/Invalid_for-of_initializer.html" title="SyntaxError">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li>
<li><a href="Reference/Errors/Delete_in_strict_mode.html" title="SyntaxError in strict mode only.">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li>
<li><a href="Reference/Errors/Invalid_for-in_initializer.html" title="SyntaxError in strict mode only.">SyntaxError: for-in loop head declarations may not have initializers</a></li>
<li><a href="Reference/Errors/Unnamed_function_statement.html" title="SyntaxError">SyntaxError: function statement requires a name</a></li>
<li><a href="Reference/Errors/Identifier_after_number.html" title="SyntaxError">SyntaxError: identifier starts immediately after numeric literal</a></li>
<li><a href="Reference/Errors/Illegal_character.html" title="SyntaxError">SyntaxError: illegal character</a></li>
<li><a href="Reference/Errors/Bad_regexp_flag.html" title="SyntaxError">SyntaxError: invalid regular expression flag "x"</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_argument_list.html" title="SyntaxError.">SyntaxError: missing ) after argument list</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_condition.html" title="SyntaxError">SyntaxError: missing ) after condition</a></li>
<li><a href="Reference/Errors/Missing_colon_after_property_id.html" title="SyntaxError">SyntaxError: missing : after property id</a></li>
<li><a href="Reference/Errors/Missing_semicolon_before_statement.html" title="SyntaxError.">SyntaxError: missing ; before statement</a></li>
<li><a href="Reference/Errors/Missing_initializer_in_const.html" title="SyntaxError">SyntaxError: missing = in const declaration</a></li>
<li><a href="Reference/Errors/Missing_bracket_after_list.html" title="SyntaxError.">SyntaxError: missing ] after element list</a></li>
<li><a href="Reference/Errors/Missing_formal_parameter.html" title="SyntaxError">SyntaxError: missing formal parameter</a></li>
<li><a href="Reference/Errors/Missing_name_after_dot_operator.html" title="SyntaxError">SyntaxError: missing name after . operator</a></li>
<li><a href="Reference/Errors/No_variable_name.html" title="SyntaxError">SyntaxError: missing variable name</a></li>
<li><a href="Reference/Errors/Missing_curly_after_function_body.html" title="SyntaxError">SyntaxError: missing } after function body</a></li>
<li><a href="Reference/Errors/Missing_curly_after_property_list.html" title="SyntaxError">SyntaxError: missing } after property list</a></li>
<li><a href="Reference/Errors/Redeclared_parameter.html" title="SyntaxError">SyntaxError: redeclaration of formal parameter "x"</a></li>
<li><a href="Reference/Errors/Bad_return_or_yield.html" title="SyntaxError.">SyntaxError: return not in function</a></li>
<li><a href="Reference/Errors/Equal_as_assign.html" title="(Firefox only) SyntaxError warning which is reported only if javascript.options.strict preference is set to true.">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li>
<li><a href="Reference/Errors/Unterminated_string_literal.html" title="SyntaxError">SyntaxError: unterminated string literal</a></li>
<li><a href="Reference/Errors/No_properties.html" title="TypeError.">TypeError: "x" has no properties</a></li>
<li><a href="Reference/Errors/Unexpected_type.html" title="TypeError.">TypeError: "x" is (not) "y"</a></li>
<li><a href="Reference/Errors/Not_a_constructor.html" title="TypeError">TypeError: "x" is not a constructor</a></li>
<li><a href="Reference/Errors/Not_a_function.html" title="TypeError.">TypeError: "x" is not a function</a></li>
<li><a href="Reference/Errors/No_non-null_object.html" title="TypeError">TypeError: "x" is not a non-null object</a></li>
<li><a href="Reference/Errors/Read-only.html" title="TypeError">TypeError: "x" is read-only</a></li>
<li><a href="Reference/Errors/is_not_iterable.html" title="TypeError">TypeError: 'x' is not iterable</a></li>
<li><a href="Reference/Errors/More_arguments_needed.html" title="TypeError.">TypeError: More arguments needed</a></li>
<li><a href="Reference/Errors/Reduce_of_empty_array_with_no_initial_value.html" title="TypeError">TypeError: Reduce of empty array with no initial value</a></li>
<li><a href="Reference/Errors/Called_on_incompatible_type.html" title="TypeError">TypeError: X.prototype.y called on incompatible type</a></li>
<li><a href="Reference/Errors/Dead_object.html" title="TypeError">TypeError: can't access dead object</a></li>
<li><a href="Reference/Errors/Cant_access_property.html" title="TypeError.">TypeError: can't access property "x" of "y"</a></li>
<li><a href="Reference/Errors/Cant_assign_to_property.html" title="TypeError.">TypeError: can't assign to property "x" on "y": not an object</a></li>
<li><a href="Reference/Errors/Cant_define_property_object_not_extensible.html" title="TypeError">TypeError: can't define property "x": "obj" is not extensible</a></li>
<li><a href="Reference/Errors/Non_configurable_array_element.html" title="TypeError">TypeError: can't delete non-configurable array element</a></li>
<li><a href="Reference/Errors/Cant_redefine_property.html" title="TypeError">TypeError: can't redefine non-configurable property "x"</a></li>
<li><a href="Reference/Errors/in_operator_no_object.html" title="TypeError">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li>
<li><a href="Reference/Errors/Cyclic_object_value.html" title="TypeError">TypeError: cyclic object value</a></li>
<li><a href="Reference/Errors/invalid_right_hand_side_instanceof_operand.html" title="TypeError">TypeError: invalid 'instanceof' operand 'x'</a></li>
<li><a href="Reference/Errors/Array_sort_argument.html" title="TypeError">TypeError: invalid Array.prototype.sort argument</a></li>
<li><a href="Reference/Errors/Typed_array_invalid_arguments.html" title="TypeError">TypeError: invalid arguments</a></li>
<li><a href="Reference/Errors/Invalid_const_assignment.html" title="TypeError">TypeError: invalid assignment to const "x"</a></li>
<li><a href="Reference/Errors/Cant_delete.html" title="TypeError in strict mode only.">TypeError: property "x" is non-configurable and can't be deleted</a></li>
<li><a href="Reference/Errors/Getter_only.html" title="TypeError in strict mode only.">TypeError: setting getter-only property "x"</a></li>
<li><a href="Reference/Errors/Var_hides_argument.html" title="TypeError warning in strict mode only.">TypeError: variable "x" redeclares argument</a></li>
<li><a href="Reference/Errors/Malformed_URI.html" title="URIError">URIError: malformed URI sequence</a></li>
<li><a href="Reference/Errors/Already_has_pragma.html" title="A warning. JavaScript execution won&#39;t be halted.">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li>
<li><a href="Reference/Errors/Bad_octal.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li>
<li><a href="Reference/Errors/Deprecated_toLocaleFormat.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: Date.prototype.toLocaleFormat is deprecated</a></li>
<li><a href="Reference/Errors/For-each-in_loops_are_deprecated.html" title="Warning">Warning: JavaScript 1.6's for-each-in loops are deprecated</a></li>
<li><a href="Reference/Errors/Deprecated_String_generics.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: String.x is deprecated; use String.prototype.x instead</a></li>
<li><a href="Reference/Errors/Deprecated_expression_closures.html" title="Warning. JavaScript execution won&#39;t be halted.">Warning: expression closures are deprecated</a></li>
<li><a href="Reference/Errors/Stmt_after_return.html" title="Warning">Warning: unreachable code after return statement</a></li>
</ol></li>
<li>Misc
<ol>
<li><a href="JavaScript_technologies_overview.html">JavaScript technologies overview</a></li>
<li><a href="Reference/Lexical_grammar.html">Lexical grammar</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Enumerability_and_ownership_of_properties.html">Enumerability and ownership of properties</a></li>
<li><a href="Reference/Iteration_protocols.html">Iteration protocols</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Reference/Strict_mode/Transitioning_to_strict_mode.html">Transitioning to strict mode</a></li>
<li><a href="Reference/Template_literals.html">Template literals</a></li>
<li><a href="Reference/Deprecated_and_obsolete_features.html">Deprecated features</a></li>
</ol></li>
</ol>
</div>
</div>
</div>
</div>
</div>
<section class="newsletter-container">
<div id="newsletter-form-container" class="newsletter">
<section class="newsletter-head">
<h2 id="learn-the-best-of-web-development-10" class="newsletter-teaser">Learn the best of web development</h2>
<p>Get the latest and greatest from MDN delivered straight to your inbox.</p>
<p>The newsletter is offered in English only at the moment.</p>
</section>
<div class="form-group newsletter-group-email">
E-mail
</div>
<div id="newsletter-privacy" class="form-group form-group-agree newsletter-group-privacy" data-aria-hidden="false">
I’m okay with Mozilla handling my info as explained in this <a href="../../../../../external.html?link=https://www.mozilla.org/privacy/">Privacy Policy</a>.
</div>
<div class="newsletter-group-submit">
Sign up now
</div>
<span>Hide Newsletter Sign-up</span>
</div>
</section>
<div class="content-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/" class="nav-footer-logo">MDN Web Docs</a>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Web Technologies</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn Web Development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/About">About MDN</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Feedback</a></li>
</ul>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/">About</a></li>
<li><a href="../../../../../external.html?link=https://shop.spreadshirt.com/mdn-store/">MDN Web Docs Store</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/contact/">Contact Us</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/firefox/?utm_source=developer.mozilla.org&amp;utm_campaign=footer&amp;utm_medium=referral">Firefox</a></li>
</ul>
<div class="social social-mdn">
<h4 id="mdn-10">MDN</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<div class="social social-moz">
<h4 id="mozilla-10">Mozilla</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<p>© 2005-2020 Mozilla and individual contributors. Content is available under <a href="../../../../../external.html?link=https://developer.mozilla.org/docs/MDN/About#Copyrights_and_licenses">these licenses</a>.</p>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/legal/terms/mozilla">Terms</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/">Privacy</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/#cookies">Cookies</a></li>
</ul>
</div>
</div>
<div id="auth-modal" class="modal hidden">
<section class="auth-providers" tabindex="-1" data-role="dialog" data-aria-modal="true" data-aria-labelledby="modal-main-heading">
<h2 id="modal-main-heading">Sign In</h2>
<p>Sign in to enjoy the benefits of an MDN account. If you haven’t already created an account, you will be prompted to do so after signing in.</p>
<div class="auth-button-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/users/github/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FMemory_Management" class="github-auth">Sign in with Github</a> <a href="../../../../../external.html?link=https://developer.mozilla.org/users/google/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FMemory_Management" class="google-auth">Sign in with Google</a>
</div>
<span>Close modal</span>
</section>
</div>
<div id="react-container" data-component-name="SPA">
<div class="loading-bar">

</div>
<ul>
<li><a href="#content" id="skip-main">Skip to main content</a></li>
<li><a href="#language" id="skip-language">Select language</a></li>
<li><a href="#main-q" id="skip-search">Skip to search</a></li>
</ul>
<ul>
<li>Technologies
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Technologies Overview</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide/Graphics">Graphics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API">APIs / DOM</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions">Browser Extensions</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/MathML">MathML</a></li>
</ul></li>
<li>References &amp; Guides
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn web development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Tutorials">Tutorials</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Reference">References</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide">Developer Guides</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Accessibility">Accessibility</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Games">Game development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">...more docs</a></li>
</ul></li>
<li>Feedback
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Send Feedback</a></li>
<li><a href="../../../../../external.html?link=https://support.mozilla.org/">Get Firefox help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://stackoverflow.com/">Get web development help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Community">Join the MDN community</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/sprints/issues/new?template=issue-template.md&amp;projects=mdn/sprints/2&amp;labels=user-report&amp;title=/en-US/docs/Web/JavaScript/Reference">Report a content problem 🌐</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/kuma/issues/new/choose">Report an issue 🌐</a></li>
</ul></li>
</ul>
<div class="header-search">
Search MDN
<span>Open search</span>
</div>
<div data-role="main">
<div class="titlebar-container">
<div class="titlebar">

</div>
</div>
<div class="full-width-row-container">
<div class="max-content-width-container">
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web" class="breadcrumb-chevron"><span class="pre-text">See </span><span data-property="name">Web technology for developers</span></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript" class="breadcrumb-previous"><span class="pre-text">See </span><span data-property="name">JavaScript</span></a></li>
<li><a href="Reference.html" class="crumb-current-page"><span data-property="name" data-aria-current="page">JavaScript reference</span></a></li>
</ol>
<div class="dropdown-container language-menu">
English<span class="dropdown-arrow-down" data-aria-hidden="true">▼</span>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ar/docs/Web/JavaScript/Reference" title="Arabic">عربي</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/bg/docs/Web/JavaScript/Reference" title="Bulgarian">Български</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/bn/docs/Web/JavaScript/Reference" title="Bengali">বাংলা</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ca/docs/Web/JavaScript/Referencia" title="Catalan">Català</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/de/docs/Web/JavaScript/Reference" title="German">Deutsch</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/el/docs/Web/JavaScript/Reference" title="Greek">Ελληνικά</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia" title="Spanish">Español</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/fa/docs/Web/JavaScript/Reference" title="Persian">فارسی</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference" title="French">Français</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/he/docs/Web/JavaScript/Reference" title="Hebrew">עברית</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/hi-IN/docs/Web/JavaScript/Reference" title="Hindi (India)">हिन्दी (भारत)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/hu/docs/Web/JavaScript/Reference" title="Hungarian">magyar</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/id/docs/Web/JavaScript/Reference" title="Indonesian">Bahasa Indonesia</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/it/docs/Web/JavaScript/Reference" title="Italian">Italiano</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference" title="Japanese">日本語</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference" title="Korean">한국어</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/my/docs/Web/JavaScript/Reference" title="Burmese">မြန်မာဘာသာ</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference" title="Dutch">Nederlands</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pl/docs/Web/JavaScript/Referencje" title="Polish">Polski</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference" title="Portuguese (Brazilian)">Português (do Brasil)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pt-PT/docs/Web/JavaScript/Reference" title="Portuguese (Portugal)">Português (Europeu)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference" title="Russian">Русский</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/sv-SE/docs/Web/JavaScript/Reference" title="Swedish">Svenska</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/tr/docs/Web/JavaScript/Reference" title="Turkish">Türkçe</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/uk/docs/Web/JavaScript/Reference" title="Ukrainian">Українська</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/vi/docs/Web/JavaScript/Reference" title="Vietnamese">Tiếng Việt</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference" title="Chinese (Simplified)">中文 (简体)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference" title="Chinese (Traditional)">正體中文 (繁體)</a></li>
<li><a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference$locales" id="translations-add">Add a translation</a></li>
</ul>
</div>
</div>
</div>
<div class="wiki-left-present content-layout">
<section class="document-toc">
<h2 id="on-this-page-2">On this Page</h2>
Jump to section
<ul>
<li><a href="#Built-ins">Built-ins</a></li>
<li><a href="#Statements">Statements</a></li>
<li><a href="#Expressions_and_operators">Expressions and operators</a></li>
<li><a href="#Functions">Functions</a></li>
<li><a href="#Additional_reference_pages">Additional reference pages</a></li>
<li><a href="#sidebar-quicklinks">Related topics</a></li>
</ul>
</section>
<div id="content" class="article text-content">
<div>

</div>
<p>This part of the JavaScript section on MDN serves as a repository of facts about the JavaScript language. Read more <a href="Reference/About.html">about this reference</a>.</p>
<h2 id="Built-ins">Built-ins</h2>
<p><a href="Reference/Global_Objects.html">JavaScript standard built-in objects</a>, along with their methods and properties.</p>
<ul>
<li><h4 id="Value_properties">Value properties</h4>
<ul>
<li><a href="Reference/Global_Objects/Infinity.html"><code>Infinity</code></a></li>
<li><a href="Reference/Global_Objects/NaN.html"><code>NaN</code></a></li>
<li><a href="Reference/Global_Objects/undefined.html"><code>undefined</code></a></li>
<li><a href="Reference/Global_Objects/globalThis.html"><code>globalThis</code></a></li>
</ul></li>
<li><h4 id="Function_properties">Function properties</h4>
<ul>
<li><a href="Reference/Global_Objects/eval.html"><code>eval()</code></a></li>
<li><a href="Reference/Global_Objects/isFinite.html"><code>isFinite()</code></a></li>
<li><a href="Reference/Global_Objects/isNaN.html"><code>isNaN()</code></a></li>
<li><a href="Reference/Global_Objects/parseFloat.html"><code>parseFloat()</code></a></li>
<li><a href="Reference/Global_Objects/parseInt.html"><code>parseInt()</code></a></li>
<li><a href="Reference/Global_Objects/decodeURI.html"><code>decodeURI()</code></a></li>
<li><a href="Reference/Global_Objects/decodeURIComponent.html"><code>decodeURIComponent()</code></a></li>
<li><a href="Reference/Global_Objects/encodeURI.html"><code>encodeURI()</code></a></li>
<li><a href="Reference/Global_Objects/encodeURIComponent.html"><code>encodeURIComponent()</code></a></li>
</ul></li>
<li><h4 id="Fundamental_objects">Fundamental objects</h4>
<ul>
<li><a href="Reference/Global_Objects/Object.html"><code>Object</code></a></li>
<li><a href="Reference/Global_Objects/Function.html"><code>Function</code></a></li>
<li><a href="Reference/Global_Objects/Boolean.html"><code>Boolean</code></a></li>
<li><a href="Reference/Global_Objects/Symbol.html"><code>Symbol</code></a></li>
</ul></li>
<li><h4 id="Error_objects">Error objects</h4>
<ul>
<li><a href="Reference/Global_Objects/Error.html"><code>Error</code></a></li>
<li><a href="Reference/Global_Objects/AggregateError.html"><code>AggregateError</code></a></li>
<li><a href="Reference/Global_Objects/EvalError.html"><code>EvalError</code></a></li>
<li><a href="Reference/Global_Objects/InternalError.html"><code>InternalError</code></a></li>
<li><a href="Reference/Global_Objects/RangeError.html"><code>RangeError</code></a></li>
<li><a href="Reference/Global_Objects/ReferenceError.html"><code>ReferenceError</code></a></li>
<li><a href="Reference/Global_Objects/SyntaxError.html"><code>SyntaxError</code></a></li>
<li><a href="Reference/Global_Objects/TypeError.html"><code>TypeError</code></a></li>
<li><a href="Reference/Global_Objects/URIError.html"><code>URIError</code></a></li>
</ul></li>
</ul>
<ul>
<li><h4 id="Numbers_dates">Numbers &amp; dates</h4>
<ul>
<li><a href="Reference/Global_Objects/Number.html"><code>Number</code></a></li>
<li><a href="Reference/Global_Objects/BigInt.html"><code>BigInt</code></a></li>
<li><a href="Reference/Global_Objects/Math.html"><code>Math</code></a></li>
<li><a href="Reference/Global_Objects/Date.html"><code>Date</code></a></li>
</ul></li>
<li><h4 id="Text_processing">Text processing</h4>
<ul>
<li><a href="Reference/Global_Objects/String.html"><code>String</code></a></li>
<li><a href="Reference/Global_Objects/RegExp.html"><code>RegExp</code></a></li>
</ul></li>
<li><h4 id="Indexed_Collections">Indexed Collections</h4>
<ul>
<li><a href="Reference/Global_Objects/Array.html"><code>Array</code></a></li>
<li><a href="Reference/Global_Objects/Int8Array.html"><code>Int8Array</code></a></li>
<li><a href="Reference/Global_Objects/Uint8Array.html"><code>Uint8Array</code></a></li>
<li><a href="Reference/Global_Objects/Uint8ClampedArray.html"><code>Uint8ClampedArray</code></a></li>
<li><a href="Reference/Global_Objects/Int16Array.html"><code>Int16Array</code></a></li>
<li><a href="Reference/Global_Objects/Uint16Array.html"><code>Uint16Array</code></a></li>
<li><a href="Reference/Global_Objects/Int32Array.html"><code>Int32Array</code></a></li>
<li><a href="Reference/Global_Objects/Uint32Array.html"><code>Uint32Array</code></a></li>
<li><a href="Reference/Global_Objects/Float32Array.html"><code>Float32Array</code></a></li>
<li><a href="Reference/Global_Objects/Float64Array.html"><code>Float64Array</code></a></li>
<li><a href="Reference/Global_Objects/BigInt64Array.html"><code>BigInt64Array</code></a></li>
<li><a href="Reference/Global_Objects/BigUint64Array.html"><code>BigUint64Array</code></a></li>
</ul></li>
<li><h4 id="Keyed_collections">Keyed collections</h4>
<ul>
<li><a href="Reference/Global_Objects/Map.html"><code>Map</code></a></li>
<li><a href="Reference/Global_Objects/Set.html"><code>Set</code></a></li>
<li><a href="Reference/Global_Objects/WeakMap.html"><code>WeakMap</code></a></li>
<li><a href="Reference/Global_Objects/WeakSet.html"><code>WeakSet</code></a></li>
</ul></li>
</ul>
<ul>
<li><h4 id="Structured_data">Structured data</h4>
<ul>
<li><a href="Reference/Global_Objects/ArrayBuffer.html"><code>ArrayBuffer</code></a></li>
<li><a href="Reference/Global_Objects/SharedArrayBuffer.html"><code>SharedArrayBuffer</code></a></li>
<li><a href="Reference/Global_Objects/Atomics.html"><code>Atomics</code></a></li>
<li><a href="Reference/Global_Objects/DataView.html"><code>DataView</code></a></li>
<li><a href="Reference/Global_Objects/JSON.html"><code>JSON</code></a></li>
</ul></li>
<li><h4 id="Control_abstraction">Control abstraction</h4>
<ul>
<li><a href="Reference/Global_Objects/GeneratorFunction.html"><code>GeneratorFunction</code></a></li>
<li><a href="Reference/AsyncGeneratorFunction.html" class="new"><code>AsyncGeneratorFunction</code></a></li>
<li><a href="Reference/Global_Objects/Generator.html"><code>Generator</code></a></li>
<li><a href="Reference/AsyncGenerator.html" class="new"><code>AsyncGenerator</code></a></li>
<li><a href="Reference/Global_Objects/AsyncFunction.html"><code>AsyncFunction</code></a></li>
<li><a href="Reference/Global_Objects/Promise.html"><code>Promise</code></a></li>
</ul></li>
<li><h4 id="Reflection">Reflection</h4>
<ul>
<li><a href="Reference/Global_Objects/Reflect.html"><code>Reflect</code></a></li>
<li><a href="Reference/Global_Objects/Proxy.html"><code>Proxy</code></a></li>
</ul></li>
<li><h4 id="Internationalization">Internationalization</h4>
<ul>
<li><a href="Reference/Global_Objects/Intl.html"><code>Intl</code></a></li>
<li><a href="Reference/Global_Objects/Intl/Collator.html"><code>Intl.Collator</code></a></li>
<li><a href="Reference/Global_Objects/Intl/DateTimeFormat.html"><code>Intl.DateTimeFormat</code></a></li>
<li><a href="Reference/Global_Objects/Intl/DisplayNames.html"><code>Intl.DisplayNames</code></a></li>
<li><a href="Reference/Global_Objects/Intl/ListFormat.html"><code>Intl.ListFormat</code></a></li>
<li><a href="Reference/Global_Objects/Intl/Locale.html"><code>Intl.Locale</code></a></li>
<li><a href="Reference/Global_Objects/Intl/NumberFormat.html"><code>Intl.NumberFormat</code></a></li>
<li><a href="Reference/Global_Objects/Intl/PluralRules.html"><code>Intl.PluralRules</code></a></li>
<li><a href="Reference/Global_Objects/Intl/RelativeTimeFormat.html"><code>Intl.RelativeTimeFormat</code></a></li>
</ul></li>
</ul>
<ul>
<li><h4 id="WebAssembly">WebAssembly</h4>
<ul>
<li><a href="Reference/Global_Objects/WebAssembly.html"><code>WebAssembly</code></a></li>
<li><a href="Reference/Global_Objects/WebAssembly/Module.html"><code>WebAssembly.Module</code></a></li>
<li><a href="Reference/Global_Objects/WebAssembly/Instance.html"><code>WebAssembly.Instance</code></a></li>
<li><a href="Reference/Global_Objects/WebAssembly/Memory.html"><code>WebAssembly.Memory</code></a></li>
<li><a href="Reference/Global_Objects/WebAssembly/Table.html"><code>WebAssembly.Table</code></a></li>
<li><a href="Reference/Global_Objects/WebAssembly/CompileError.html"><code>WebAssembly.CompileError</code></a></li>
<li><a href="Reference/Global_Objects/WebAssembly/LinkError.html"><code>WebAssembly.LinkError</code></a></li>
<li><a href="Reference/Global_Objects/WebAssembly/RuntimeError.html"><code>WebAssembly.RuntimeError</code></a></li>
</ul></li>
</ul>
<h2 id="Statements">Statements</h2>
<p><a href="Reference/Statements.html">JavaScript statements and declarations</a></p>
<ul>
<li><h4 id="Control_flow">Control flow</h4>
<ul>
<li><a href="Reference/Statements/block.html"><code>Block</code></a></li>
<li><a href="Reference/Statements/break.html"><code>break</code></a></li>
<li><a href="Reference/Statements/continue.html"><code>continue</code></a></li>
<li><a href="Reference/Statements/Empty.html"><code>Empty</code></a></li>
<li><a href="Reference/Statements/if...html"><code>if...else</code></a></li>
<li><a href="Reference/Statements/switch.html"><code>switch</code></a></li>
<li><a href="Reference/Statements/throw.html"><code>throw</code></a></li>
<li><a href="Reference/Statements/try...html"><code>try...catch</code></a></li>
</ul></li>
<li><h4 id="Declarations">Declarations</h4>
<ul>
<li><a href="Reference/Statements/var.html"><code>var</code></a></li>
<li><a href="Reference/Statements/let.html"><code>let</code></a></li>
<li><a href="Reference/Statements/const.html"><code>const</code></a></li>
</ul></li>
<li><h4 id="Functions_and_classes">Functions and classes</h4>
<ul>
<li><a href="Reference/Statements/function.html"><code>function</code></a></li>
<li><a href="Reference/Statements/function_.html"><code>function*</code></a></li>
<li><a href="Reference/Statements/async_function.html"><code>async function</code></a></li>
<li><a href="Reference/Statements/return.html"><code>return</code></a></li>
<li><a href="Reference/Statements/class.html"><code>class</code></a></li>
</ul></li>
<li><h4 id="Iterations">Iterations</h4>
<ul>
<li><a href="Reference/Statements/do...html"><code>do...while</code></a></li>
<li><a href="Reference/Statements/for.html"><code>for</code></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/for_each...in"><code>for each...in</code></a></li>
<li><a href="Reference/Statements/for...html"><code>for...in</code></a></li>
<li><a href="Reference/Statements/for..-2.html"><code>for...of</code></a></li>
<li><a href="Reference/Statements/for-await...html"><code>for await...of</code></a></li>
<li><a href="Reference/Statements/while.html"><code>while</code></a></li>
</ul></li>
</ul>
<ul>
<li><h4 id="Other">Other</h4>
<ul>
<li><a href="Reference/Statements/debugger.html"><code>debugger</code></a></li>
<li><a href="Reference/Statements/import.html"><code>import</code></a></li>
<li><a href="Reference/Statements/label.html"><code>label</code></a></li>
<li><a href="Reference/Statements/with.html"><code>with</code></a></li>
</ul></li>
</ul>
<h2 id="Expressions_and_operators">Expressions and operators</h2>
<p><a href="Reference/Operators.html">JavaScript expressions and operators</a>. </p>
<ul>
<li><h4 id="Primary_expressions">Primary expressions</h4>
<ul>
<li><a href="Reference/Operators/this.html"><code>this</code></a></li>
<li><a href="Reference/Operators/function.html"><code>function</code></a></li>
<li><a href="Reference/Operators/class.html"><code>class</code></a></li>
<li><a href="Reference/Operators/function_.html"><code>function*</code></a></li>
<li><a href="Reference/Operators/yield.html"><code>yield</code></a></li>
<li><a href="Reference/Operators/yield_.html"><code>yield*</code></a></li>
<li><a href="Reference/Operators/async_function.html"><code>async function</code></a></li>
<li><a href="Reference/Operators/await.html"><code>await</code></a></li>
<li><a href="Reference/Global_Objects/Array.html"><code>[]</code></a></li>
<li><a href="Reference/Operators/Object_initializer.html"><code>{}</code></a></li>
<li><a href="Reference/Global_Objects/RegExp.html"><code>/ab+c/i</code></a></li>
<li><a href="Reference/Operators/Grouping.html"><code>( )</code></a></li>
<li><a href="Reference/Global_Objects/null.html"><code>null</code></a></li>
</ul></li>
<li><h4 id="Left-hand-side_expressions">Left-hand-side expressions</h4>
<ul>
<li><a href="Reference/Operators/Property_accessors.html">Property accessors</a></li>
<li><a href="Reference/Operators/new.html"><code>new</code></a></li>
<li><a href="Reference/Operators/new-2.html"><code>new.target</code></a></li>
<li><a href="Reference/Operators/super.html"><code>super</code></a></li>
<li><a href="Reference/Operators/Spread_syntax.html"><code>...obj</code></a></li>
</ul></li>
<li><h4 id="Increment_decrement">Increment &amp; decrement</h4>
<ul>
<li><a href="Reference/Operators.html#Increment"><code>A++</code></a></li>
<li><a href="Reference/Operators.html#Decrement"><code>A--</code></a></li>
<li><a href="Reference/Operators.html#Increment"><code>++A</code></a></li>
<li><a href="Reference/Operators.html#Decrement"><code>--A</code></a></li>
</ul></li>
<li><h4 id="Unary_operators">Unary operators</h4>
<ul>
<li><a href="Reference/Operators/delete.html"><code>delete</code></a></li>
<li><a href="Reference/Operators/void.html"><code>void</code></a></li>
<li><a href="Reference/Operators/typeof.html"><code>typeof</code></a></li>
<li><a href="Reference/Operators.html#Unary_plus"><code>+</code></a></li>
<li><a href="Reference/Operators.html#Unary_negation"><code>-</code></a></li>
<li><a href="Reference/Operators.html#Bitwise_NOT"><code>~</code></a></li>
<li><a href="Reference/Operators.html#Logical_NOT"><code>!</code></a></li>
</ul></li>
</ul>
<ul>
<li><h4 id="Arithmetic_operators">Arithmetic operators</h4>
<ul>
<li><a href="Reference/Operators.html#Addition"><code>+</code></a></li>
<li><a href="Reference/Operators.html#Subtraction"><code>-</code></a></li>
<li><a href="Reference/Operators.html#Division"><code>/</code></a></li>
<li><a href="Reference/Operators.html#Multiplication"><code>*</code></a></li>
<li><a href="Reference/Operators.html#Remainder"><code>%</code></a></li>
<li><a href="Reference/Operators.html#Exponentiation"><code>**</code></a></li>
</ul></li>
<li><h4 id="Relational_operators">Relational operators</h4>
<ul>
<li><a href="Reference/Operators/in.html"><code>in</code></a></li>
<li><a href="Reference/Operators/instanceof.html"><code>instanceof</code></a></li>
<li><a href="Reference/Operators.html#Less_than_operator"><code>&lt;</code></a></li>
<li><a href="Reference/Operators.html#Greater_than_operator"><code>&gt;</code></a></li>
<li><a href="Reference/Operators.html#Less_than_or_equal_operator"><code>&lt;=</code></a></li>
<li><a href="Reference/Operators.html#Greater_than_or_equal_operator"><code>&gt;=</code></a></li>
</ul></li>
<li><h4 id="Equality_operators">Equality operators</h4>
<ul>
<li><a href="Reference/Operators.html#Equality"><code>==</code></a></li>
<li><a href="Reference/Operators.html#Inequality"><code>!=</code></a></li>
<li><a href="Reference/Operators.html#Identity"><code>===</code></a></li>
<li><a href="Reference/Operators.html#Nonidentity"><code>!==</code></a></li>
</ul></li>
<li><h4 id="Bitwise_shift_operators">Bitwise shift operators</h4>
<ul>
<li><a href="Reference/Operators.html#Left_shift"><code>&lt;&lt;</code></a></li>
<li><a href="Reference/Operators.html#Right_shift"><code>&gt;&gt;</code></a></li>
<li><a href="Reference/Operators.html#Unsigned_right_shift"><code>&gt;&gt;&gt;</code></a></li>
</ul></li>
</ul>
<ul>
<li><h4 id="Binary_bitwise_operators">Binary bitwise operators</h4>
<ul>
<li><a href="Reference/Operators.html#Bitwise_AND"><code>&amp;</code></a></li>
<li><a href="Reference/Operators.html#Bitwise_OR"><code>|</code></a></li>
<li><a href="Reference/Operators.html#Bitwise_XOR"><code>^</code></a></li>
</ul></li>
<li><h4 id="Binary_logical_operators">Binary logical operators</h4>
<ul>
<li><a href="Reference/Operators.html#Logical_AND"><code>&amp;&amp;</code></a></li>
<li><a href="Reference/Operators.html#Logical_OR"><code>||</code></a></li>
</ul></li>
<li><h4 id="Conditional_ternary_operator">Conditional (ternary) operator</h4>
<ul>
<li><a href="Reference/Operators/Conditional_Operator.html"><code>(condition ? ifTrue : ifFalse)</code></a></li>
</ul></li>
<li><h4 id="Assignment_operators">Assignment operators</h4>
<ul>
<li><a href="Reference/Operators%23Assignment_operators.html#Assignment"><code>=</code></a></li>
<li><a href="Reference/Operators%23Assignment_operators.html#Multiplication_assignment"><code>*=</code></a></li>
<li><a href="Reference/Operators%23Assignment_operators.html#Division_assignment"><code>/=</code></a></li>
<li><a href="Reference/Operators%23Assignment_operators.html#Remainder_assignment"><code>%=</code></a></li>
<li><a href="Reference/Operators%23Assignment_operators.html#Addition_assignment"><code>+=</code></a></li>
<li><a href="Reference/Operators%23Assignment_operators.html#Subtraction_assignment"><code>-=</code></a></li>
<li><a href="Reference/Operators%23Assignment_operators.html#Left_shift_assignment"><code>&lt;&lt;=</code></a></li>
<li><a href="Reference/Operators%23Assignment_operators.html#Right_shift_assignment"><code>&gt;&gt;=</code></a></li>
<li><a href="Reference/Operators%23Assignment_operators.html#Unsigned_right_shift_assignment"><code>&gt;&gt;&gt;=</code></a></li>
<li><a href="Reference/Operators%23Assignment_operators.html#Bitwise_AND_assignment"><code>&amp;=</code></a></li>
<li><a href="Reference/Operators%23Assignment_operators.html#Bitwise_XOR_assignment"><code>^=</code></a></li>
<li><a href="Reference/Operators%23Assignment_operators.html#Bitwise_OR_assignment"><code>|=</code></a></li>
<li><a href="Reference/Operators/Destructuring_assignment.html"><code>[a, b] = [1, 2]</code></a></li>
<li><a href="Reference/Operators/Destructuring_assignment.html"><code>{a, b} = {a:1, b:2}</code></a></li>
</ul></li>
</ul>
<h2 id="Functions">Functions</h2>
<p>This chapter documents how to work with <a href="Reference/Functions.html">JavaScript functions</a> to develop your applications.</p>
<ul>
<li><a href="Reference/Functions/arguments.html"><code>arguments</code></a></li>
<li><a href="Reference/Functions/Arrow_functions.html">Arrow functions</a></li>
<li><a href="Reference/Functions/Default_parameters.html">Default parameters</a></li>
<li><a href="Reference/Functions/rest_parameters.html">Rest parameters</a></li>
</ul>
<h2 id="Additional_reference_pages">Additional reference pages</h2>
<ul>
<li><a href="Reference/Lexical_grammar.html">Lexical grammar</a></li>
<li><a href="Data_structures.html">Data types and data structures</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Reference/Deprecated_and_obsolete_features.html">Deprecated features</a></li>
</ul>
<div class="metadata">
<section class="document-meta">
<h4 id="metadata-11">Metadata</h4>
<ul>
<li><strong>Last modified:</strong> Sep 4, 2020, <a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference$history">by MDN contributors</a></li>
</ul>
</section>
</div>
</div>
<div id="sidebar-quicklinks" class="sidebar">
<div class="quick-links">
<div class="quick-links-head sidebar-heading">
Related Topics
</div>
<div>
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong><em>JavaScript</em></strong></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong>Tutorials:</strong></a></li>
<li>Complete beginners
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics">JavaScript basics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps">JavaScript first steps</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks">JavaScript building blocks</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Introducing JavaScript objects</a></li>
</ol></li>
<li>JavaScript Guide
<ol>
<li><a href="Guide/Introduction.html">Introduction</a></li>
<li><a href="Guide/Grammar_and_Types.html">Grammar and types</a></li>
<li><a href="Guide/Control_flow_and_error_handling.html">Control flow and error handling</a></li>
<li><a href="Guide/Loops_and_iteration.html">Loops and iteration</a></li>
<li><a href="Guide/Functions.html">Functions</a></li>
<li><a href="Guide/Expressions_and_Operators.html">Expressions and operators</a></li>
<li><a href="Guide/Numbers_and_dates.html">Numbers and dates</a></li>
<li><a href="Guide/Text_formatting.html">Text formatting</a></li>
<li><a href="Guide/Regular_Expressions.html">Regular expressions</a></li>
<li><a href="Guide/Indexed_collections.html">Indexed collections</a></li>
<li><a href="Guide/Keyed_collections.html">Keyed collections</a></li>
<li><a href="Guide/Working_with_Objects.html">Working with objects</a></li>
<li><a href="Guide/Details_of_the_Object_Model.html">Details of the object model</a></li>
<li><a href="Guide/Using_promises.html">Using promises</a></li>
<li><a href="Guide/Iterators_and_generators.html">Iterators and generators</a></li>
<li><a href="Guide/Meta_programming.html">Meta programming</a></li>
<li><a href="Guide/Modules.html">JavaScript modules</a></li>
</ol></li>
<li>Intermediate
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks">Client-side JavaScript frameworks</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs">Client-side web APIs</a></li>
<li><a href="A_re-introduction_to_JavaScript.html">A re-introduction to JavaScript</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Equality_comparisons_and_sameness.html">Equality comparisons and sameness</a></li>
<li><a href="Closures.html">Closures</a></li>
</ol></li>
<li>Advanced
<ol>
<li><a href="Inheritance_and_the_prototype_chain.html">Inheritance and the prototype chain</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Typed_arrays.html">JavaScript typed arrays</a></li>
<li><a href="Memory_Management.html">Memory Management</a></li>
<li><a href="EventLoop.html">Concurrency model and Event Loop</a></li>
</ol></li>
<li><strong><a href="Reference.html">References:</a></strong></li>
<li>Built-in objects
<ol>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/AggregateError.html" title="The AggregateError object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by Promise.any(), when all promises passed to it reject.">AggregateError</a></li>
<li><a href="Reference/Global_Objects/Array.html" title="The JavaScript Array class is a global object that is used in the construction of arrays; which are high-level, list-like objects.">Array</a></li>
<li><a href="Reference/Global_Objects/ArrayBuffer.html" title="The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer.">ArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/AsyncFunction.html" title="The AsyncFunction constructor creates a new async function object. In JavaScript, every asynchronous function is actually an AsyncFunction object.">AsyncFunction</a></li>
<li><a href="Reference/Global_Objects/Atomics.html" title="The Atomics object provides atomic operations as static methods. They are used with SharedArrayBuffer and ArrayBuffer objects.">Atomics</a></li>
<li><a href="Reference/Global_Objects/BigInt.html" title="BigInt is a built-in object that provides a way to represent whole numbers larger than 253 - 1, which is the largest number JavaScript can reliably represent with the Number primitive and represented by the Number.MAX_SAFE_INTEGER constant. BigInt can be used for arbitrarily large integers.">BigInt</a></li>
<li><a href="Reference/Global_Objects/BigInt64Array.html" title="The BigInt64Array typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigInt64Array</a></li>
<li><a href="Reference/Global_Objects/BigUint64Array.html" title="The BigUint64Array typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigUint64Array</a></li>
<li><a href="Reference/Global_Objects/Boolean.html" title="The Boolean object is an object wrapper for a boolean value.">Boolean</a></li>
<li><a href="Reference/Global_Objects/DataView.html" title="The DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform&#39;s endianness.">DataView</a></li>
<li><a href="Reference/Global_Objects/Date.html" title="JavaScript Date objects represent a single moment in time in a platform-independent format.">Date</a></li>
<li><a href="Reference/Global_Objects/Error.html" title="Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.">Error</a></li>
<li><a href="Reference/Global_Objects/EvalError.html" title="The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.">EvalError</a></li>
<li><a href="Reference/Global_Objects/FinalizationRegistry.html" title="A FinalizationRegistry object lets you request a callback when an object is garbage-collected.">FinalizationRegistry</a></li>
<li><a href="Reference/Global_Objects/Float32Array.html" title="The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float32Array</a></li>
<li><a href="Reference/Global_Objects/Float64Array.html" title="The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float64Array</a></li>
<li><a href="Reference/Global_Objects/Function.html" title="Every JavaScript function is actually a Function object. This can be seen with the code (function(){}).constructor === Function, which returns true.">Function</a></li>
<li><a href="Reference/Global_Objects/Generator.html" title="The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.">Generator</a></li>
<li><a href="Reference/Global_Objects/GeneratorFunction.html" title="The GeneratorFunction constructor creates a new generator function object. In JavaScript, every generator function is actually a GeneratorFunction object.">GeneratorFunction</a></li>
<li><a href="Reference/Global_Objects/Infinity.html" title="The global property Infinity is a numeric value representing infinity.">Infinity</a></li>
<li><a href="Reference/Global_Objects/Int16Array.html" title="The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int16Array</a></li>
<li><a href="Reference/Global_Objects/Int32Array.html" title="The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int32Array</a></li>
<li><a href="Reference/Global_Objects/Int8Array.html" title="The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int8Array</a></li>
<li><a href="Reference/Global_Objects/InternalError.html" title="The InternalError object indicates an error that occurred internally in the JavaScript engine.">InternalError</a></li>
<li><a href="Reference/Global_Objects/Intl.html" title="The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The Intl object provides access to several constructors as well as functionality common to the internationalization constructors and other language sensitive functions.">Intl</a></li>
<li><a href="Reference/Global_Objects/JSON.html" title="The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can&#39;t be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.">JSON</a></li>
<li><a href="Reference/Global_Objects/Map.html" title="The Map object holds key-value pairs and remembers the original insertion order of the keys.">Map</a></li>
<li><a href="Reference/Global_Objects/Math.html" title="Math is a built-in object that has properties and methods for mathematical constants and functions. It’s not a function object.">Math</a></li>
<li><a href="Reference/Global_Objects/NaN.html" title="The global NaN property is a value representing Not-A-Number.">NaN</a></li>
<li><a href="Reference/Global_Objects/Number.html" title="The Number constructor contains constants and methods for working with numbers. Values of other types can be converted to numbers using the Number() function.">Number</a></li>
<li><a href="Reference/Global_Objects/Object.html" title="The Object class represents one of JavaScript&#39;s data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.">Object</a></li>
<li><a href="Reference/Global_Objects/Promise.html" title="The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.">Promise</a></li>
<li><a href="Reference/Global_Objects/Proxy.html" title="The Proxy object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.">Proxy</a></li>
<li><a href="Reference/Global_Objects/RangeError.html" title="The RangeError object indicates an error when a value is not in the set or range of allowed values.">RangeError</a></li>
<li><a href="Reference/Global_Objects/ReferenceError.html" title="The ReferenceError object represents an error when a non-existent variable is referenced.">ReferenceError</a></li>
<li><a href="Reference/Global_Objects/Reflect.html" title="Reflect is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of proxy handlers. Reflect is not a function object, so it&#39;s not constructible.">Reflect</a></li>
<li><a href="Reference/Global_Objects/RegExp.html" title="The RegExp object is used for matching text with a pattern.">RegExp</a></li>
<li><a href="Reference/Global_Objects/Set.html" title="The Set object lets you store unique values of any type, whether primitive values or object references.">Set</a></li>
<li><a href="Reference/Global_Objects/SharedArrayBuffer.html" title="The SharedArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. Unlike an ArrayBuffer, a SharedArrayBuffer cannot become detached.">SharedArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/String.html" title="The String object is used to represent and manipulate a sequence of characters.">String</a></li>
<li><a href="Reference/Global_Objects/Symbol.html" title="The data type symbol is a primitive data type. The Symbol() function returns a value of type symbol, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class, but is incomplete as a constructor because it does not support the syntax &quot;new Symbol()&quot;.">Symbol</a></li>
<li><a href="Reference/Global_Objects/SyntaxError.html" title="The SyntaxError object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.">SyntaxError</a></li>
<li><a href="Reference/Global_Objects/TypeError.html" title="The TypeError object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.">TypeError</a></li>
<li><a href="Reference/Global_Objects/TypedArray.html" title="A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.">TypedArray</a></li>
<li><a href="Reference/Global_Objects/URIError.html" title="The URIError object represents an error when a global URI handling function was used in a wrong way.">URIError</a></li>
<li><a href="Reference/Global_Objects/Uint16Array.html" title="The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint16Array</a></li>
<li><a href="Reference/Global_Objects/Uint32Array.html" title="The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint32Array</a></li>
<li><a href="Reference/Global_Objects/Uint8Array.html" title="The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8Array</a></li>
<li><a href="Reference/Global_Objects/Uint8ClampedArray.html" title="The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8ClampedArray</a></li>
<li><a href="Reference/Global_Objects/WeakMap.html" title="The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.">WeakMap</a></li>
<li><a href="Reference/Global_Objects/WeakRef.html" title="A WeakRef object lets you hold a weak reference to another object, without preventing that object from getting garbage-collected.">WeakRef</a></li>
<li><a href="Reference/Global_Objects/WeakSet.html" title="The WeakSet object lets you store weakly held objects in a collection.">WeakSet</a></li>
<li><a href="Reference/Global_Objects/WebAssembly.html" title="The WebAssembly JavaScript object acts as the namespace for all WebAssembly-related functionality.">WebAssembly</a></li>
<li><a href="Reference/Global_Objects/decodeURI.html" title="The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or by a similar routine.">decodeURI()</a></li>
<li><a href="Reference/Global_Objects/decodeURIComponent.html" title="The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.">decodeURIComponent()</a></li>
<li><a href="Reference/Global_Objects/encodeURI.html" title="The encodeURI() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURI()</a></li>
<li><a href="Reference/Global_Objects/encodeURIComponent.html" title="The encodeURIComponent() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURIComponent()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/escape.html" title="The escape() function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.">escape()</a></li>
<li><a href="Reference/Global_Objects/eval.html" title="The eval() function evaluates JavaScript code represented as a string.">eval()</a></li>
<li><a href="Reference/Global_Objects/globalThis.html" title="The global globalThis property contains the global this value, which is akin to the global object.">globalThis</a></li>
<li><a href="Reference/Global_Objects/isFinite.html" title="The global isFinite() function determines whether the passed value is a finite number. If  needed, the parameter is first converted to a number.">isFinite()</a></li>
<li><a href="Reference/Global_Objects/isNaN.html" title="The isNaN() function determines whether a value is NaN or not. Note, coercion inside the isNaN function has interesting rules; you may alternatively want to use Number.isNaN(), as defined in ECMAScript 2015.">isNaN()</a></li>
<li><a href="Reference/Global_Objects/null.html" title="The value null represents the intentional absence of any object value. It is one of JavaScript&#39;s primitive values and is treated as falsy for boolean operations.">null</a></li>
<li><a href="Reference/Global_Objects/parseFloat.html" title="The parseFloat() function parses an argument (converting it to a string first if needed) and returns a floating point number.">parseFloat()</a></li>
<li><a href="Reference/Global_Objects/parseInt.html" title="The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).">parseInt()</a></li>
<li><a href="Reference/Global_Objects/undefined.html" title="The global undefined property represents the primitive value undefined. It is one of JavaScript&#39;s primitive types.">undefined</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/unescape.html" title="The unescape() function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Usually, decodeURI or decodeURIComponent are preferred over unescape.">unescape()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><a href="Reference/Global_Objects/uneval.html" title="The uneval() function creates a string representation of the source code of an Object.">uneval()</a></li>
</ol></li>
<li>Expressions &amp; operators
<ol>
<li><a href="Reference/Operators/Addition.html" title="The addition operator (+) produces the sum of numeric operands or string concatenation.">Addition (+)</a></li>
<li><a href="Reference/Operators/Addition_assignment.html" title="The addition assignment operator (+=) adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible.">Addition assignment (+=)</a></li>
<li><a href="Reference/Operators/Assignment.html" title="The simple assignment operator (=) is used to assign a value to a variable. The assignment operation evaluates to the assigned value. Chaining the assignment operator is possible in order to assign a single value to multiple variables">Assignment (=)</a></li>
<li><a href="Reference/Operators/Bitwise_AND.html" title="The bitwise AND operator (&amp;) returns a 1 in each bit position for which the corresponding bits of both operands are 1s.">Bitwise AND (&amp;)</a></li>
<li><a href="Reference/Operators/Bitwise_AND_assignment.html" title="The bitwise AND assignment operator (&amp;=) uses the binary representation of both operands, does a bitwise AND operation on them and assigns the result to the variable.">Bitwise AND assignment (&amp;=)</a></li>
<li><a href="Reference/Operators/Bitwise_NOT.html" title="The bitwise NOT operator (~) inverts the bits of its operand.">Bitwise NOT (~)</a></li>
<li><a href="Reference/Operators/Bitwise_OR.html" title="The bitwise OR operator (|) returns a 1 in each bit position for which the corresponding bits of either or both operands are 1s.">Bitwise OR (|)</a></li>
<li><a href="Reference/Operators/Bitwise_OR_assignment.html" title="The bitwise OR assignment operator (|=) uses the binary representation of both operands, does a bitwise OR operation on them and assigns the result to the variable.">Bitwise OR assignment (|=)</a></li>
<li><a href="Reference/Operators/Bitwise_XOR.html" title="The bitwise XOR operator (^) returns a 1 in each bit position for which the corresponding bits of either but not both operands are 1s.">Bitwise XOR (^)</a></li>
<li><a href="Reference/Operators/Bitwise_XOR_assignment.html" title="The bitwise XOR assignment operator (^=) uses the binary representation of both operands, does a bitwise XOR operation on them and assigns the result to the variable.">Bitwise XOR assignment (^=)</a></li>
<li><a href="Reference/Operators/Comma_Operator.html" title="The comma operator (,) evaluates each of its operands (from left to right) and returns the value of the last operand. This lets you create a compound expression in which multiple expressions are evaluated, with the compound expression&#39;s final value being the value of the rightmost of its member expressions. This is commonly used to provide multiple parameters to a for loop.">Comma operator (,)</a></li>
<li><a href="Reference/Operators/Conditional_Operator.html" title="The conditional (ternary) operator is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy.">Conditional (ternary) operator</a></li>
<li><a href="Reference/Operators/Decrement.html" title="The decrement operator (--) decrements (subtracts one from) its operand and returns a value.">Decrement (--)</a></li>
<li><a href="Reference/Operators/Destructuring_assignment.html" title="The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.">Destructuring assignment</a></li>
<li><a href="Reference/Operators/Division.html" title="The division operator (/) produces the quotient of its operands where the left operand is the dividend and the right operand is the divisor.">Division (/)</a></li>
<li><a href="Reference/Operators/Division_assignment.html" title="The division assignment operator (/=) divides a variable by the value of the right operand and assigns the result to the variable.">Division assignment (/=)</a></li>
<li><a href="Reference/Operators/Equality.html" title="The equality operator (==) checks whether its two operands are equal, returning a Boolean result. Unlike the strict equality operator, it attempts to convert and compare operands that are of different types.">Equality (==)</a></li>
<li><a href="Reference/Operators/Exponentiation.html" title="The exponentiation operator (**) returns the result of raising the first operand to the power of the second operand. It is equivalent to Math.pow, except it also accepts BigInts as operands.">Exponentiation (**)</a></li>
<li><a href="Reference/Operators/Exponentiation_assignment.html" title="The exponentiation assignment operator (**=) raises the value of a variable to the power of the right operand.">Exponentiation assignment (**=)</a></li>
<li><a href="Reference/Operators/function.html" title="The function keyword can be used to define a function inside an expression.">Function expression</a></li>
<li><a href="Reference/Operators/Greater_than.html" title="The greater than operator (&gt;) returns true if the left operand is greater than the right operand, and false otherwise.">Greater than (&gt;)</a></li>
<li><a href="Reference/Operators/Greater_than_or_equal.html" title="The greater than or equal operator (&gt;=) returns true if the left operand is greater than or equal to the right operand, and false otherwise.">Greater than or equal (&gt;=)</a></li>
<li><a href="Reference/Operators/Grouping.html" title="The grouping operator ( ) controls the precedence of evaluation in expressions.">Grouping operator ( )</a></li>
<li><a href="Reference/Operators/Increment.html" title="The increment operator (++) increments (adds one to) its operand and returns a value.">Increment (++)</a></li>
<li><a href="Reference/Operators/Inequality.html" title="The inequality operator (!=) checks whether its two operands are not equal, returning a Boolean result. Unlike the strict inequality operator, it attempts to convert and compare operands that are of different types.">Inequality (!=)</a></li>
<li><a href="Reference/Operators/Left_shift.html" title="The left shift operator (&lt;&lt;) shifts the first operand the specified number of bits to the left. Excess bits shifted off to the left are discarded. Zero bits are shifted in from the right.">Left shift (&lt;&lt;)</a></li>
<li><a href="Reference/Operators/Left_shift_assignment.html" title="The left shift assignment operator (&lt;&lt;=) moves the specified amount of bits to the left and assigns the result to the variable.">Left shift assignment (&lt;&lt;=)</a></li>
<li><a href="Reference/Operators/Less_than.html" title="The less than operator (&lt;) returns true if the left operand is less than the right operand, and false otherwise.">Less than (&lt;)</a></li>
<li><a href="Reference/Operators/Less_than_or_equal.html" title="The less than or equal operator (&lt;=) returns true if the left operand is less than or equal to the right operand, and false otherwise.">Less than or equal (&lt;=)</a></li>
<li><a href="Reference/Operators/Logical_AND.html" title="The logical AND (&amp;&amp;) operator (logical conjunction) for a set of operands is true if and only if all of its operands are true. It is typically used with Boolean (logical) values. When it is, it returns a Boolean value. However, the &amp;&amp; operator actually returns the value of one of the specified operands, so if this operator is used with non-Boolean values, it will return a non-Boolean value.">Logical AND (&amp;&amp;)</a></li>
<li><a href="Reference/Operators/Logical_AND_assignment.html" title="The logical AND assignment (x &amp;&amp;= y) operator only assigns if x is truthy.">Logical AND assignment (&amp;&amp;=)</a></li>
<li><a href="Reference/Operators/Logical_NOT.html" title="The logical NOT (!) operator (logical complement, negation) takes truth to falsity and vice versa. It is typically used with Boolean (logical) values. When used with non-Boolean values, it returns false if its single operand can be converted to true; otherwise, returns true.">Logical NOT (!)</a></li>
<li><a href="Reference/Operators/Logical_OR.html" title="The logical OR (||) operator (logical disjunction) for a set of operands is true if and only if one or more of its operands is true. It is typically used with Boolean (logical) values. When it is, it returns a Boolean value. However, the || operator actually returns the value of one of the specified operands, so if this operator is used with non-Boolean values, it will return a non-Boolean value.">Logical OR (||)</a></li>
<li><a href="Reference/Operators/Logical_OR_assignment.html" title="The logical OR assignment (x ||= y) operator only assigns if x is falsy.">Logical OR assignment (||=)</a></li>
<li><a href="Reference/Operators/Logical_nullish_assignment.html" title="The logical nullish assignment (x ??= y) operator only assigns if x is nullish (null or undefined).">Logical nullish assignment (??=)</a></li>
<li><a href="Reference/Operators/Multiplication.html" title="The multiplication operator (*) produces the product of the operands.">Multiplication (*)</a></li>
<li><a href="Reference/Operators/Multiplication_assignment.html" title="The multiplication assignment operator (*=) multiplies a variable by the value of the right operand and assigns the result to the variable.">Multiplication assignment (*=)</a></li>
<li><a href="Reference/Operators/Nullish_coalescing_operator.html" title="The nullish coalescing operator (??) is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.">Nullish coalescing operator (??)</a></li>
<li><a href="Reference/Operators/Object_initializer.html" title="Objects can be initialized using new Object(), Object.create(), or using the literal notation (initializer notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).">Object initializer</a></li>
<li><a href="Reference/Operators/Operator_Precedence.html" title="Operator precedence determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.">Operator precedence</a></li>
<li><a href="Reference/Operators/Optional_chaining.html" title="The ?. operator functions similarly to the . chaining operator, except that instead of causing an error if a reference is nullish (null or undefined), the expression short-circuits with a return value of undefined.">Optional chaining (?.)</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Operators/Pipeline_operator.html" title="The experimental pipeline operator |&gt; (currently at stage 1) pipes the value of an expression into a function. This allows the creation of chained function calls in a readable manner. The result is syntactic sugar in which a function call with a single argument can be written like this:">Pipeline operator (|&gt;)</a></li>
<li><a href="Reference/Operators/Property_Accessors-2.html" title="Property accessors provide access to an object&#39;s properties by using the dot notation or the bracket notation.">Property accessors</a></li>
<li><a href="Reference/Operators/Remainder.html" title="The remainder operator (%) returns the remainder left over when one operand is divided by a second operand. It always takes the sign of the dividend.">Remainder (%)</a></li>
<li><a href="Reference/Operators/Remainder_assignment.html" title="The remainder assignment operator (%=) divides a variable by the value of the right operand and assigns the remainder to the variable.">Remainder assignment (%=)</a></li>
<li><a href="Reference/Operators/Right_shift.html" title="The right shift operator (&gt;&gt;) shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Copies of the leftmost bit are shifted in from the left. Since the new leftmost bit has the same value as the previous leftmost bit, the sign bit (the leftmost bit) does not change. Hence the name &quot;sign-propagating&quot;.">Right shift (&gt;&gt;)</a></li>
<li><a href="Reference/Operators/Right_shift_assignment.html" title="The right shift assignment operator (&gt;&gt;=) moves the specified amount of bits to the right and assigns the result to the variable.">Right shift assignment (&gt;&gt;=)</a></li>
<li><a href="Reference/Operators/Spread_syntax.html" title="Spread syntax (...) allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.">Spread syntax (...)</a></li>
<li><a href="Reference/Operators/Strict_equality.html" title="The strict equality operator (===) checks whether its two operands are equal, returning a Boolean result. Unlike the equality operator, the strict equality operator always considers operands of different types to be different.">Strict equality (===)</a></li>
<li><a href="Reference/Operators/Strict_inequality.html" title="The strict inequality operator (!==) checks whether its two operands are not equal, returning a Boolean result. Unlike the inequality operator, the strict inequality operator always considers operands of different types to be different.">Strict inequality (!==)</a></li>
<li><a href="Reference/Operators/Subtraction.html" title="The subtraction operator (-) subtracts the two operands, producing their difference.">Subtraction (-)</a></li>
<li><a href="Reference/Operators/Subtraction_assignment.html" title="The subtraction assignment operator (-=) subtracts the value of the right operand from a variable and assigns the result to the variable.">Subtraction assignment (-=)</a></li>
<li><a href="Reference/Operators/Unary_negation.html" title="The unary negation operator (-) precedes its operand and negates it.">Unary negation (-)</a></li>
<li><a href="Reference/Operators/Unary_plus.html" title="The unary plus operator (+) precedes its operand and evaluates to its operand but attempts to convert it into a number, if it isn&#39;t already.">Unary plus (+)</a></li>
<li><a href="Reference/Operators/Unsigned_right_shift.html" title="The unsigned right shift operator (&gt;&gt;&gt;) (zero-fill right shift) shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Zero bits are shifted in from the left. The sign bit becomes 0, so the result is always non-negative. Unlike the other bitwise operators, zero-fill right shift returns an unsigned 32-bit integer.">Unsigned right shift (&gt;&gt;&gt;)</a></li>
<li><a href="Reference/Operators/Unsigned_right_shift_assignment.html" title="The unsigned right shift assignment operator (&gt;&gt;&gt;=) moves the specified amount of bits to the right and assigns the result to the variable.">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li>
<li><a href="Reference/Operators/async_function.html" title="The async function keyword can be used to define async functions inside expressions.">async function expression</a></li>
<li><a href="Reference/Operators/await.html" title="The await operator is used to wait for a Promise. It can only be used inside an async function.">await</a></li>
<li><a href="Reference/Operators/class.html" title="The class expression is one way to define a class in ECMAScript 2015. Similar to function expressions, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. ">class expression</a></li>
<li><a href="Reference/Operators/delete.html" title="The JavaScript delete operator removes a property from an object; if no more references to the same property are held, it is eventually released automatically.">delete operator</a></li>
<li><a href="Reference/Operators/function_.html" title="The function* keyword can be used to define a generator function inside an expression.">function* expression</a></li>
<li><a href="Reference/Operators/in.html" title="The in operator returns true if the specified property is in the specified object or its prototype chain.">in operator</a></li>
<li><a href="Reference/Operators/instanceof.html" title="The instanceof operator tests to see if the prototype property of a constructor appears anywhere in the prototype chain of an object. The return value is a boolean value.">instanceof</a></li>
<li><a href="Reference/Operators/new.html" title="The new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.">new operator</a></li>
<li><a href="Reference/Operators/new-2.html" title="The new.target pseudo-property lets you detect whether a function or constructor was called using the new operator. In constructors and functions invoked using the new operator, new.target returns a reference to the constructor or function. In normal function calls, new.target is undefined.">new.target</a></li>
<li><a href="Reference/Operators/super.html" title="The super keyword is used to access and call functions on an object&#39;s parent.">super</a></li>
<li><a href="Reference/Operators/this.html" title="A function&#39;s this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode.">this</a></li>
<li><a href="Reference/Operators/typeof.html" title="The typeof operator returns a string indicating the type of the unevaluated operand.">typeof</a></li>
<li><a href="Reference/Operators/void.html" title="The void operator evaluates the given expression and then returns undefined.">void operator</a></li>
<li><a href="Reference/Operators/yield.html" title="The yield keyword is used to pause and resume a generator function (function* or legacy generator function).">yield</a></li>
<li><a href="Reference/Operators/yield_.html" title="The yield* expression is used to delegate to another generator or iterable object.">yield*</a></li>
</ol></li>
<li>Statements &amp; declarations
<ol>
<li><a href="Reference/Statements/async_function.html" title="An async function is a function declared with the async keyword. Async functions are instances of the AsyncFunction constructor, and the await keyword is permitted within them. The async and await keywords enable asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.">async function</a></li>
<li><a href="Reference/Statements/block.html" title="A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of braces (&quot;curly brackets&quot;) and may optionally be labelled:">block</a></li>
<li><a href="Reference/Statements/break.html" title="The break statement terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.">break</a></li>
<li><a href="Reference/Statements/class.html" title="The class declaration creates a new class with a given name using prototype-based inheritance.">class</a></li>
<li><a href="Reference/Statements/const.html" title="Constants are block-scoped, much like variables defined using the let keyword. The value of a constant can&#39;t be changed through reassignment, and it can&#39;t be redeclared.">const</a></li>
<li><a href="Reference/Statements/continue.html" title="The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.">continue</a></li>
<li><a href="Reference/Statements/debugger.html" title="The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.">debugger</a></li>
<li><a href="Reference/Statements/do...html" title="The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.">do...while</a></li>
<li><a href="Reference/Statements/Empty.html" title="An empty statement is used to provide no statement, although the JavaScript syntax would expect one.">empty</a></li>
<li><a href="Reference/Statements/export.html" title="The export statement is used when creating JavaScript modules to export live bindings to functions, objects, or primitive values from the module so they can be used by other programs with the import statement. Bindings that are exported can still be modified locally; when imported, although they can only be read by the importing module the value updates whenever it is updated by the exporting module.">export</a></li>
<li><a href="Reference/Statements/for.html" title="The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.">for</a></li>
<li><a href="Reference/Statements/for-await...html" title="The for await...of statement creates a loop iterating over async iterable objects as well as on sync iterables, including: built-in String, Array, Array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined async/sync iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object. Like the await operator, the statement can only be used inside an async function.">for await...of</a></li>
<li><a href="Reference/Statements/for...html" title="The for...in statement iterates over all enumerable properties of an object that are keyed by strings (ignoring ones keyed by Symbols), including inherited enumerable properties.">for...in</a></li>
<li><a href="Reference/Statements/for..-2.html" title="The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.">for...of</a></li>
<li><a href="Reference/Statements/function.html" title="The function declaration (function statement) defines a function with the specified parameters.">function declaration</a></li>
<li><a href="Reference/Statements/function_.html" title="The function* declaration (function keyword followed by an asterisk) defines a generator function, which returns a Generator object.">function*</a></li>
<li><a href="Reference/Statements/if...html" title="The if statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement can be executed.">if...else</a></li>
<li><a href="Reference/Statements/import.html" title="The static import statement is used to import read only live bindings which are exported by another module. ">import</a></li>
<li><a href="Reference/Statements/import-2.html" title="The import.meta object exposes context-specific metadata to a JavaScript module. It contains information about the module, like the module&#39;s URL.">import.meta</a></li>
<li><a href="Reference/Statements/label.html" title="The labeled statement can be used with break or continue statements. It is prefixing a statement with an identifier which you can refer to.">label</a></li>
<li><a href="Reference/Statements/let.html" title="The let statement declares a block-scoped local variable, optionally initializing it to a value.">let</a></li>
<li><a href="Reference/Statements/return.html" title="The return statement ends function execution and specifies a value to be returned to the function caller.">return</a></li>
<li><a href="Reference/Statements/switch.html" title="The switch statement evaluates an expression, matching the expression&#39;s value to a case clause, and executes statements associated with that case, as well as statements in cases that follow the matching case.">switch</a></li>
<li><a href="Reference/Statements/throw.html" title="The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won&#39;t be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.">throw</a></li>
<li><a href="Reference/Statements/try...html" title="The try...catch statement marks a block of statements to try and specifies a response should an exception be thrown.">try...catch</a></li>
<li><a href="Reference/Statements/var.html" title="The var statement declares a function-scoped or globally-scoped variable, optionally initializing it to a value.">var</a></li>
<li><a href="Reference/Statements/while.html" title="The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.">while</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Statements/with.html" title="The with statement extends the scope chain for a statement.">with</a></li>
</ol></li>
<li>Functions
<ol>
<li><a href="Reference/Functions/Arrow_functions.html" title="An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords. Arrow function expressions are ill suited as methods, and they cannot be used as constructors.">Arrow function expressions</a></li>
<li><a href="Reference/Functions/Default_parameters.html" title="Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.">Default parameters</a></li>
<li><a href="Reference/Functions/Method_definitions.html" title="Starting with ECMAScript 2015, a shorter syntax for method definitions on objects initializers is introduced. It is a shorthand for a function assigned to the method&#39;s name.">Method definitions</a></li>
<li><a href="Reference/Functions/rest_parameters.html" title="The rest parameter syntax allows us to represent an indefinite number of arguments as an array.">Rest parameters</a></li>
<li><a href="Reference/Functions/arguments.html" title="arguments is an Array-like object accessible inside functions that contains the values of the arguments passed to that function.">The arguments object</a></li>
<li><a href="Reference/Functions/get.html" title="The get syntax binds an object property to a function that will be called when that property is looked up.">getter</a></li>
<li><a href="Reference/Functions/set.html" title="The set syntax binds an object property to a function to be called when there is an attempt to set that property.">setter</a></li>
</ol></li>
<li>Classes
<ol>
<li><a href="Reference/Classes/Private_class_fields.html" title="Class properties are public by default and can be examined or modified outside the class. There is however an experimental proposal to allow defining private class fields using a hash # prefix is added.">Private class fields</a></li>
<li><a href="Reference/Classes/Public_class_fields.html" title="Both static and instance public fields are writable, enumerable, and configurable properties. As such, unlike their private counterparts, they participate in prototype inheritance.">Public class fields</a></li>
<li><a href="Reference/Classes/constructor.html" title="The constructor method is a special method of a class for creating and initializing an object of that class.">constructor</a></li>
<li><a href="Reference/Classes/extends.html" title="The extends keyword is used in class declarations or class expressions to create a class that is a child of another class.">extends</a></li>
<li><a href="Reference/Classes/static.html" title="The static keyword defines a static method for a class. Static methods aren&#39;t called on instances of the class. Instead, they&#39;re called on the class itself.">static</a></li>
</ol></li>
<li>Errors
<ol>
<li><a href="Reference/Errors/Property_access_denied.html" title="The JavaScript exception &quot;Permission denied to access property&quot; occurs when there was an attempt to access an object for which you have no permission.">Error: Permission denied to access property "x"</a></li>
<li><a href="Reference/Errors/Too_much_recursion.html" title="The JavaScript exception &quot;too much recursion&quot; or &quot;Maximum call stack size exceeded&quot; occurs when there are too many function calls, or a function is missing a base case.">InternalError: too much recursion</a></li>
<li><a href="Reference/Errors/Not_a_codepoint.html" title="The JavaScript exception &quot;Invalid code point&quot; occurs when NaN values, negative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF (1114111) are used with String.fromCodePoint().">RangeError: argument is not a valid code point</a></li>
<li><a href="Reference/Errors/Invalid_array_length.html" title="The JavaScript exception &quot;Invalid array length&quot; occurs when creating an Array or an ArrayBuffer which has a length which is either negative or larger or equal to 232, or when setting the Array.length property to a value which is either negative or larger or equal to 232.">RangeError: invalid array length</a></li>
<li><a href="Reference/Errors/Invalid_date.html" title="The JavaScript exception &quot;invalid date&quot; occurs when a string leading to an invalid date has been provided to Date or Date.parse().">RangeError: invalid date</a></li>
<li><a href="Reference/Errors/Precision_range.html" title="The JavaScript exception &quot;precision is out of range&quot; occurs when a number that&#39;s outside of the range of 0 and 20 (or 21) was passed into toFixed or toPrecision.">RangeError: precision is out of range</a></li>
<li><a href="Reference/Errors/Bad_radix.html" title="The JavaScript exception &quot;radix must be an integer at least 2 and no greater than 36&quot; occurs when the optional radix parameter of the Number.prototype.toString() or the BigInt.prototype.toString() method was specified and is not between 2 and 36.">RangeError: radix must be an integer</a></li>
<li><a href="Reference/Errors/Resulting_string_too_large.html" title="The JavaScript exception &quot;repeat count must be less than infinity&quot; occurs when the String.prototype.repeat() method is used with a count argument that is infinity.">RangeError: repeat count must be less than infinity</a></li>
<li><a href="Reference/Errors/Negative_repetition_count.html" title="The JavaScript exception &quot;repeat count must be non-negative&quot; occurs when the String.prototype.repeat() method is used with a count argument that is a negative number.">RangeError: repeat count must be non-negative</a></li>
<li><a href="Reference/Errors/Not_defined.html" title="The JavaScript exception &quot;variable is not defined&quot; occurs when there is a non-existent variable referenced somewhere.">ReferenceError: "x" is not defined</a></li>
<li><a href="Reference/Errors/Undeclared_var.html" title="The JavaScript strict mode-only exception &quot;Assignment to undeclated variable&quot; occurs when the value has been assigned to an undeclared variable.">ReferenceError: assignment to undeclared variable "x"</a></li>
<li><a href="Reference/Errors/Cant_access_lexical_declaration_before_init.html" title="The JavaScript exception &quot;can&#39;t access lexical declaration `variable&#39; before initialization&quot; occurs when a lexical variable was accessed before it was initialized. This happens within any block statement, when let or const declarations are accessed before they are defined.">ReferenceError: can't access lexical declaration`X' before initialization</a></li>
<li><a href="Reference/Errors/Deprecated_caller_or_arguments_usage.html" title="The JavaScript strict mode-only exception &quot;deprecated caller or arguments usage&quot; occurs when the deprecated Function.caller or Function.arguments properties are used.">ReferenceError: deprecated caller or arguments usage</a></li>
<li><a href="Reference/Errors/Invalid_assignment_left-hand_side.html" title="The JavaScript exception &quot;invalid assignment left-hand side&quot; occurs when there was an unexpected assignment somewhere. For example, a single &quot;=&quot; sign was used instead of &quot;==&quot; or &quot;===&quot;.">ReferenceError: invalid assignment left-hand side</a></li>
<li><a href="Reference/Errors/Undefined_prop.html" title="The JavaScript warning &quot;reference to undefined property&quot; occurs when a script attempted to access an object property which doesn&#39;t exist.">ReferenceError: reference to undefined property "x"</a></li>
<li><a href="Reference/Errors/Deprecated_octal.html" title="The JavaScript strict mode-only exception &quot;0-prefixed octal literals and octal escape sequences are deprecated; for octal literals use the &quot;0o&quot; prefix instead&quot; occurs when deprecated octal literals and octal escape sequences are used.">SyntaxError: "0"-prefixed octal literals and octal escape seq. are deprecated</a></li>
<li><a href="Reference/Errors/Strict_Non_Simple_Params.html" title="The JavaScript exception &quot;&#39;use strict&#39; not allowed in function&quot; occurs when a &quot;use strict&quot; directive is used at the top of a function with default parameters, rest parameters, or destructuring parameters.">SyntaxError: "use strict" not allowed in function with non-simple parameters</a></li>
<li><a href="Reference/Errors/Reserved_identifier.html" title="The JavaScript exception &quot;variable is a reserved identifier&quot; occurs when reserved keywords are used as identifiers.">SyntaxError: "x" is a reserved identifier</a></li>
<li><a href="Reference/Errors/JSON_bad_parse.html" title="The JavaScript exceptions thrown by JSON.parse() occur when string failed to be parsed as JSON.">SyntaxError: JSON.parse: bad parsing</a></li>
<li><a href="Reference/Errors/Malformed_formal_parameter.html" title="The JavaScript exception &quot;malformed formal parameter&quot; occurs when the argument list of a Function() constructor call is invalid somehow.">SyntaxError: Malformed formal parameter</a></li>
<li><a href="Reference/Errors/Unexpected_token.html" title="The JavaScript exceptions &quot;unexpected token&quot; occur when a specific language construct was expected, but something else was provided. This might be a simple typo.">SyntaxError: Unexpected token</a></li>
<li><a href="Reference/Errors/Deprecated_source_map_pragma.html" title="The JavaScript warning &quot;Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead&quot; occurs when there is a deprecated source map syntax in a JavaScript source.">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li>
<li><a href="Reference/Errors/Invalid_for-of_initializer.html" title="The JavaScript exception &quot;a declaration in the head of a for-of loop can&#39;t have an initializer&quot; occurs when the head of a for...of loop contains an initializer expression such as |for (var i = 0 of iterable)|. This is not allowed in for-of loops.">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li>
<li><a href="Reference/Errors/Delete_in_strict_mode.html" title="The JavaScript strict mode-only exception &quot;applying the &#39;delete&#39; operator to an unqualified name is deprecated&quot; occurs when variables are attempted to be deleted using the delete operator.">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li>
<li><a href="Reference/Errors/Invalid_for-in_initializer.html" title="The JavaScript strict mode-only exception &quot;for-in loop head declarations may not have initializers&quot; occurs when the head of a for...in contains an initializer expression, such as |for (var i = 0 in obj)|. This is not allowed in for-of loops in strict mode.">SyntaxError: for-in loop head declarations may not have initializers</a></li>
<li><a href="Reference/Errors/Unnamed_function_statement.html" title="The JavaScript exception &quot;function statement requires a name&quot; occurs when there is a function statement in the code that requires a name.">SyntaxError: function statement requires a name</a></li>
<li><a href="Reference/Errors/Identifier_after_number.html" title="The JavaScript exception &quot;identifier starts immediately after numeric literal&quot; occurs when an identifier started with a digit. Identifiers can only start with a letter, underscore (_), or dollar sign ($).">SyntaxError: identifier starts immediately after numeric literal</a></li>
<li><a href="Reference/Errors/Illegal_character.html" title="The JavaScript exception &quot;illegal character&quot; occurs when there is an invalid or unexpected token that doesn&#39;t belong at this position in the code.">SyntaxError: illegal character</a></li>
<li><a href="Reference/Errors/Bad_regexp_flag.html" title="The JavaScript exception &quot;invalid regular expression flag&quot; occurs when the flags, defined after the second slash in regular expression literal, are not one of g, i, m, s, u, or y.">SyntaxError: invalid regular expression flag "x"</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_argument_list.html" title="The JavaScript exception &quot;missing ) after argument list&quot; occurs when there is an error with how a function is called. This might be a typo, a missing operator, or an unescaped string.">SyntaxError: missing ) after argument list</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_condition.html" title="The JavaScript exception &quot;missing ) after condition&quot; occurs when there is an error with how an if condition is written. It must appear in parenthesis after the if keyword.">SyntaxError: missing ) after condition</a></li>
<li><a href="Reference/Errors/Missing_colon_after_property_id.html" title="The JavaScript exception &quot;missing : after property id&quot; occurs when objects are created using the object initializer syntax. A colon (:) separates keys and values for the object&#39;s properties. Somehow, this colon is missing or misplaced.">SyntaxError: missing : after property id</a></li>
<li><a href="Reference/Errors/Missing_semicolon_before_statement.html" title="The JavaScript exception &quot;missing ; before statement&quot; occurs when there is a semicolon (;) missing somewhere and can&#39;t be added by automatic semicolon insertion (ASI). You need to provide a semicolon, so that JavaScript can parse the source code correctly.">SyntaxError: missing ; before statement</a></li>
<li><a href="Reference/Errors/Missing_initializer_in_const.html" title="The JavaScript exception &quot;missing = in const declaration&quot; occurs when a const declaration was not given a value in the same statement (like const RED_FLAG;). You need to provide one (const RED_FLAG = &#39;#ff0&#39;).">SyntaxError: missing = in const declaration</a></li>
<li><a href="Reference/Errors/Missing_bracket_after_list.html" title="The JavaScript exception &quot;missing ] after element list&quot; occurs when there is an error with the array initializer syntax somewhere. Likely there is a closing bracket (&quot;]&quot;) or a comma (&quot;,&quot;) missing.">SyntaxError: missing ] after element list</a></li>
<li><a href="Reference/Errors/Missing_formal_parameter.html" title="The JavaScript exception &quot;missing formal parameter&quot; occurs when your function declaration is missing valid parameters.">SyntaxError: missing formal parameter</a></li>
<li><a href="Reference/Errors/Missing_name_after_dot_operator.html" title="The JavaScript exception &quot;missing name after . operator&quot; occurs when there is a problem with how the dot operator (.) is used for property access.">SyntaxError: missing name after . operator</a></li>
<li><a href="Reference/Errors/No_variable_name.html" title="The JavaScript exception &quot;missing variable name&quot; occurs way too often as naming things is so hard. Or maybe a comma is wrong. Check for typos!">SyntaxError: missing variable name</a></li>
<li><a href="Reference/Errors/Missing_curly_after_function_body.html" title="The JavaScript exception &quot;missing } after function body&quot; occurs when there is a syntax mistake when creating a function somewhere. Check if any closing curly brackets or parenthesis are in the correct order.">SyntaxError: missing } after function body</a></li>
<li><a href="Reference/Errors/Missing_curly_after_property_list.html" title="The JavaScript exception &quot;missing } after property list&quot; occurs when there is a mistake in the object initializer syntax somewhere. Might be in fact a missing curly bracket, but could also be a missing comma.">SyntaxError: missing } after property list</a></li>
<li><a href="Reference/Errors/Redeclared_parameter.html" title="The JavaScript exception &quot;redeclaration of formal parameter&quot; occurs when the same variable name occurs as a function parameter and is then redeclared using a let assignment in a function body again.">SyntaxError: redeclaration of formal parameter "x"</a></li>
<li><a href="Reference/Errors/Bad_return_or_yield.html" title="The JavaScript exception &quot;return (or yield) not in function&quot; occurs when a return or yield statement is called outside of a function.">SyntaxError: return not in function</a></li>
<li><a href="Reference/Errors/Equal_as_assign.html" title="The JavaScript warning &quot;test for equality (==) mistyped as assignment (=)?&quot; occurs when there was an assignment (=) when you would normally expect a test for equality (==).">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li>
<li><a href="Reference/Errors/Unterminated_string_literal.html" title="The JavaScript error &quot;unterminated string literal&quot; occurs when there is an unterminated String somewhere. String literals must be enclosed by single (&#39;) or double (&quot;) quotes.">SyntaxError: unterminated string literal</a></li>
<li><a href="Reference/Errors/No_properties.html" title="The JavaScript exception &quot;null (or undefined) has no properties&quot; occurs when you attempt to access properties of null and undefined. They don&#39;t have any.">TypeError: "x" has no properties</a></li>
<li><a href="Reference/Errors/Unexpected_type.html" title="The JavaScript exception &quot;x is (not) y&quot; occurs when there was an unexpected type. Oftentimes, unexpected undefined or null values.">TypeError: "x" is (not) "y"</a></li>
<li><a href="Reference/Errors/Not_a_constructor.html" title="The JavaScript exception &quot;is not a constructor&quot; occurs when there was an attempt to use an object or a variable as a constructor, but that object or variable is not a constructor.">TypeError: "x" is not a constructor</a></li>
<li><a href="Reference/Errors/Not_a_function.html" title="The JavaScript exception &quot;is not a function&quot; occurs when there was an attempt to call a value from a function, but the value is not actually a function.">TypeError: "x" is not a function</a></li>
<li><a href="Reference/Errors/No_non-null_object.html" title="The JavaScript exception &quot;is not a non-null object&quot; occurs when an object is expected somewhere and wasn&#39;t provided. null is not an object and won&#39;t work.">TypeError: "x" is not a non-null object</a></li>
<li><a href="Reference/Errors/Read-only.html" title="The JavaScript strict mode-only exception &quot;is read-only&quot; occurs when a global variable or object property that was assigned to is a read-only property.">TypeError: "x" is read-only</a></li>
<li><a href="Reference/Errors/is_not_iterable.html" title="The JavaScript exception &quot;is not iterable&quot; occurs when the value which is given as the right hand-side of for…of or as argument of a function such as Promise.all or TypedArray.from, is not an iterable object.">TypeError: 'x' is not iterable</a></li>
<li><a href="Reference/Errors/More_arguments_needed.html" title="The JavaScript exception &quot;more arguments needed&quot; occurs when there is an error with how a function is called. More arguments need to be provided.">TypeError: More arguments needed</a></li>
<li><a href="Reference/Errors/Reduce_of_empty_array_with_no_initial_value.html" title="The JavaScript exception &quot;reduce of empty array with no initial value&quot; occurs when a reduce function is used.">TypeError: Reduce of empty array with no initial value</a></li>
<li><a href="Reference/Errors/Called_on_incompatible_type.html" title="The JavaScript exception &quot;called on incompatible target (or object)&quot; occurs when a function (on a given object), is called with a this not corresponding to the type expected by the function.">TypeError: X.prototype.y called on incompatible type</a></li>
<li><a href="Reference/Errors/Dead_object.html" title="The JavaScript exception &quot;can&#39;t access dead object&quot; occurs when Firefox disallows add-ons to keep strong references to DOM objects after their parent document has been destroyed to improve in memory usage and to prevent memory leaks.">TypeError: can't access dead object</a></li>
<li><a href="Reference/Errors/Cant_access_property.html" title="The JavaScript exception &quot;can&#39;t access property&quot; occurs when property access was operated on undefined or null values.">TypeError: can't access property "x" of "y"</a></li>
<li><a href="Reference/Errors/Cant_assign_to_property.html" title="The JavaScript strict mode exception &quot;can&#39;t assign to property&quot; occurs when attempting to create a property on primitive value such as a symbol, a string, a number or a boolean. Primitive values cannot hold any property.">TypeError: can't assign to property "x" on "y": not an object</a></li>
<li><a href="Reference/Errors/Cant_define_property_object_not_extensible.html" title="The JavaScript exception &quot;can&#39;t define property &quot;x&quot;: &quot;obj&quot; is not extensible&quot; occurs when Object.preventExtensions() marked an object as no longer extensible, so that it will never have properties beyond the ones it had at the time it was marked as non-extensible.">TypeError: can't define property "x": "obj" is not extensible</a></li>
<li><a href="Reference/Errors/Non_configurable_array_element.html" title="The JavaScript exception &quot;can&#39;t delete non-configurable array element&quot; occurs when it was attempted to shorten the length of an array, but one of the array&#39;s elements is non-configurable.">TypeError: can't delete non-configurable array element</a></li>
<li><a href="Reference/Errors/Cant_redefine_property.html" title="The JavaScript exception &quot;can&#39;t redefine non-configurable property&quot; occurs when it was attempted to redefine a property, but that property is non-configurable.">TypeError: can't redefine non-configurable property "x"</a></li>
<li><a href="Reference/Errors/in_operator_no_object.html" title="The JavaScript exception &quot;right-hand side of &#39;in&#39; should be an object&quot; occurs when the in operator was used to search in strings, or in numbers, or other primitive types. It can only be used to check if a property is in an object.">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li>
<li><a href="Reference/Errors/Cyclic_object_value.html" title="The JavaScript exception &quot;cyclic object value&quot; occurs when object references were found in JSON. JSON.stringify() doesn&#39;t try to solve them and fails accordingly.">TypeError: cyclic object value</a></li>
<li><a href="Reference/Errors/invalid_right_hand_side_instanceof_operand.html" title="The JavaScript exception &quot;invalid &#39;instanceof&#39; operand&quot; occurs when the right hand side operands of the instanceof operator isn&#39;t used with a constructor object, i.e. an object which has a prototype property and is callable.">TypeError: invalid 'instanceof' operand 'x'</a></li>
<li><a href="Reference/Errors/Array_sort_argument.html" title="The JavaScript exception &quot;invalid Array.prototype.sort argument&quot; occurs when the argument of Array.prototype.sort() isn&#39;t either undefined or a function which compares its operands.">TypeError: invalid Array.prototype.sort argument</a></li>
<li><a href="Reference/Errors/Typed_array_invalid_arguments.html" title="The JavaScript exception &quot;invalid arguments&quot; occurs when typed array constructors are provided with a wrong argument.">TypeError: invalid arguments</a></li>
<li><a href="Reference/Errors/Invalid_const_assignment.html" title="The JavaScript exception &quot;invalid assignment to const&quot; occurs when it was attempted to alter a constant value. JavaScript const declarations can&#39;t be re-assigned or redeclared.">TypeError: invalid assignment to const "x"</a></li>
<li><a href="Reference/Errors/Cant_delete.html" title="The JavaScript exception &quot;property is non-configurable and can&#39;t be deleted&quot; occurs when it was attempted to delete a property, but that property is non-configurable.">TypeError: property "x" is non-configurable and can't be deleted</a></li>
<li><a href="Reference/Errors/Getter_only.html" title="The JavaScript strict mode-only exception &quot;setting getter-only property&quot; occurs when there is an attempt to set a new value to a property for which only a getter is specified.">TypeError: setting getter-only property "x"</a></li>
<li><a href="Reference/Errors/Var_hides_argument.html" title="The JavaScript strict mode-only exception &quot;variable redeclares argument&quot; occurs when the same variable name occurs as a function parameter and is then redeclared using a var assignment in a function body again.">TypeError: variable "x" redeclares argument</a></li>
<li><a href="Reference/Errors/Malformed_URI.html" title="The JavaScript exception &quot;malformed URI sequence&quot; occurs when URI encoding or decoding wasn&#39;t successful.">URIError: malformed URI sequence</a></li>
<li><a href="Reference/Errors/Already_has_pragma.html" title="The JavaScript warning &quot;-file- is being assigned a //# sourceMappingURL, but already has one.&quot; occurs when a source map has been specified more than once for a given JavaScript source.">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li>
<li><a href="Reference/Errors/Bad_octal.html" title="The JavaScript warning &quot;08 (or 09) is not a legal ECMA-262 octal constant&quot; occurs when 08 or 09 number literals are used. They can&#39;t be interpreted as an octal number.">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li>
<li><a href="Reference/Errors/Deprecated_toLocaleFormat.html" title="The JavaScript warning &quot;Date.prototype.toLocaleFormat is deprecated; consider using Intl.DateTimeFormat instead&quot; occurs when the non-standard Date.prototype.toLocaleFormat method is used.">Warning: Date.prototype.toLocaleFormat is deprecated</a></li>
<li><a href="Reference/Errors/For-each-in_loops_are_deprecated.html" title="The JavaScript warning &quot;JavaScript 1.6&#39;s for-each-in loops are deprecated; consider using ES6 for-of instead&quot; occurs when a for each (variable in obj) statement is used.">Warning: JavaScript 1.6's for-each-in loops are deprecated</a></li>
<li><a href="Reference/Errors/Deprecated_String_generics.html" title="The JavaScript warning about string generics occurs in Firefox versions prior to 68. String generics have been removed starting with Firefox 68.">Warning: String.x is deprecated; use String.prototype.x instead</a></li>
<li><a href="Reference/Errors/Deprecated_expression_closures.html" title="The JavaScript warning &quot;expression closures are deprecated&quot; occurs when the non-standard expression closure syntax (shorthand function syntax) is used.">Warning: expression closures are deprecated</a></li>
<li><a href="Reference/Errors/Stmt_after_return.html" title="The JavaScript warning &quot;unreachable code after return statement&quot; occurs when using an expression after a return statement, or when using a semicolon-less return statement but including an expression directly after.">Warning: unreachable code after return statement</a></li>
</ol></li>
<li>Misc
<ol>
<li><a href="JavaScript_technologies_overview.html">JavaScript technologies overview</a></li>
<li><a href="Reference/Lexical_grammar.html">Lexical grammar</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Enumerability_and_ownership_of_properties.html">Enumerability and ownership of properties</a></li>
<li><a href="Reference/Iteration_protocols.html">Iteration protocols</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Reference/Strict_mode/Transitioning_to_strict_mode.html">Transitioning to strict mode</a></li>
<li><a href="Reference/Template_literals.html">Template literals</a></li>
<li><a href="Reference/Deprecated_and_obsolete_features.html">Deprecated features</a></li>
</ol></li>
</ol>
</div>
</div>
</div>
</div>
</div>
<section class="newsletter-container">
<div id="newsletter-form-container" class="newsletter">
<section class="newsletter-head">
<h2 id="learn-the-best-of-web-development-11" class="newsletter-teaser">Learn the best of web development</h2>
<p>Get the latest and greatest from MDN delivered straight to your inbox.</p>
<p>The newsletter is offered in English only at the moment.</p>
</section>
<div class="form-group newsletter-group-email">
E-mail
</div>
<div id="newsletter-privacy" class="form-group form-group-agree newsletter-group-privacy" data-aria-hidden="false">
I’m okay with Mozilla handling my info as explained in this <a href="../../../../../external.html?link=https://www.mozilla.org/privacy/">Privacy Policy</a>.
</div>
<div class="newsletter-group-submit">
Sign up now
</div>
<span>Hide Newsletter Sign-up</span>
</div>
</section>
<div class="content-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/" class="nav-footer-logo">MDN Web Docs</a>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Web Technologies</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn Web Development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/About">About MDN</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Feedback</a></li>
</ul>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/">About</a></li>
<li><a href="../../../../../external.html?link=https://shop.spreadshirt.com/mdn-store/">MDN Web Docs Store</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/contact/">Contact Us</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/firefox/?utm_source=developer.mozilla.org&amp;utm_campaign=footer&amp;utm_medium=referral">Firefox</a></li>
</ul>
<div class="social social-mdn">
<h4 id="mdn-11">MDN</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<div class="social social-moz">
<h4 id="mozilla-11">Mozilla</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<p>© 2005-2020 Mozilla and individual contributors. Content is available under <a href="../../../../../external.html?link=https://developer.mozilla.org/docs/MDN/About#Copyrights_and_licenses">these licenses</a>.</p>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/legal/terms/mozilla">Terms</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/">Privacy</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/#cookies">Cookies</a></li>
</ul>
</div>
</div>
<div id="auth-modal" class="modal hidden">
<section class="auth-providers" tabindex="-1" data-role="dialog" data-aria-modal="true" data-aria-labelledby="modal-main-heading">
<h2 id="modal-main-heading">Sign In</h2>
<p>Sign in to enjoy the benefits of an MDN account. If you haven’t already created an account, you will be prompted to do so after signing in.</p>
<div class="auth-button-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/users/github/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference" class="github-auth">Sign in with Github</a> <a href="../../../../../external.html?link=https://developer.mozilla.org/users/google/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference" class="google-auth">Sign in with Google</a>
</div>
<span>Close modal</span>
</section>
</div>
<div id="react-container" data-component-name="SPA">
<div class="loading-bar">

</div>
<ul>
<li><a href="#content" id="skip-main">Skip to main content</a></li>
<li><a href="#language" id="skip-language">Select language</a></li>
<li><a href="#main-q" id="skip-search">Skip to search</a></li>
</ul>
<ul>
<li>Technologies
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Technologies Overview</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide/Graphics">Graphics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API">APIs / DOM</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions">Browser Extensions</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/MathML">MathML</a></li>
</ul></li>
<li>References &amp; Guides
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn web development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Tutorials">Tutorials</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Reference">References</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Guide">Developer Guides</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/Accessibility">Accessibility</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Games">Game development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">...more docs</a></li>
</ul></li>
<li>Feedback
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Send Feedback</a></li>
<li><a href="../../../../../external.html?link=https://support.mozilla.org/">Get Firefox help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://stackoverflow.com/">Get web development help 🌐</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Community">Join the MDN community</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/sprints/issues/new?template=issue-template.md&amp;projects=mdn/sprints/2&amp;labels=user-report&amp;title=/en-US/docs/Web/JavaScript/Typed_arrays">Report a content problem 🌐</a></li>
<li><a href="../../../../../external.html?link=https://github.com/mdn/kuma/issues/new/choose">Report an issue 🌐</a></li>
</ul></li>
</ul>
<div class="header-search">
Search MDN
<span>Open search</span>
</div>
<div data-role="main">
<div class="titlebar-container">
<div class="titlebar">

</div>
</div>
<div class="full-width-row-container">
<div class="max-content-width-container">
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web" class="breadcrumb-chevron"><span class="pre-text">See </span><span data-property="name">Web technology for developers</span></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript" class="breadcrumb-previous"><span class="pre-text">See </span><span data-property="name">JavaScript</span></a></li>
<li><a href="Typed_arrays.html" class="crumb-current-page"><span data-property="name" data-aria-current="page">JavaScript typed arrays</span></a></li>
</ol>
<div class="dropdown-container language-menu">
English<span class="dropdown-arrow-down" data-aria-hidden="true">▼</span>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/de/docs/Web/JavaScript/Typed_arrays" title="German">Deutsch</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/es/docs/Web/JavaScript/Vectores_tipados" title="Spanish">Español</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/fr/docs/Web/JavaScript/Tableaux_typés" title="French">Français</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/hi-IN/docs/Web/JavaScript/टाईप्ड_सरणियाँ" title="Hindi (India)">हिन्दी (भारत)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ja/docs/Web/JavaScript/Typed_arrays" title="Japanese">日本語</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ko/docs/Web/JavaScript/Typed_arrays" title="Korean">한국어</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pl/docs/Web/JavaScript/Typed_arrays" title="Polish">Polski</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Typed_arrays" title="Portuguese (Brazilian)">Português (do Brasil)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/ru/docs/Web/JavaScript/Typed_arrays" title="Russian">Русский</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Typed_arrays" title="Chinese (Simplified)">中文 (简体)</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Typed_arrays" title="Chinese (Traditional)">正體中文 (繁體)</a></li>
<li><a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays$locales" id="translations-add">Add a translation</a></li>
</ul>
</div>
</div>
</div>
<div class="wiki-left-present content-layout">
<section class="document-toc">
<h2 id="on-this-page-3">On this Page</h2>
Jump to section
<ul>
<li><a href="#Buffers_and_views_typed_array_architecture">Buffers and views: typed array architecture</a></li>
<li><a href="#Web_APIs_using_typed_arrays">Web APIs using typed arrays</a></li>
<li><a href="#Examples">Examples</a></li>
<li><a href="#Specifications">Specifications</a></li>
<li><a href="#Browser_compatibility">Browser compatibility</a></li>
<li><a href="#See_also">See also</a></li>
<li><a href="#sidebar-quicklinks">Related topics</a></li>
</ul>
</section>
<div id="content" class="article text-content">
<div>

</div>
<p><span class="seoSummary"><strong>JavaScript typed arrays</strong> are array-like objects that provide a mechanism for reading and writing raw binary data in memory buffers.</span> As you may already know, <a href="Reference/Global_Objects/Array.html"><code>Array</code></a> objects grow and shrink dynamically and can have any JavaScript value. JavaScript engines perform optimizations so that these arrays are fast.</p>
<p>However, as web applications become more and more powerful, adding features such as audio and video manipulation, access to raw data using WebSockets, and so forth, it has become clear that there are times when it would be helpful for JavaScript code to be able to quickly and easily manipulate raw binary data. This is where typed arrays come in. Each entry in a JavaScript typed array is a raw binary value in one of a number of supported formats, from 8-bit integers to 64-bit floating-point numbers.</p>
<p>However, typed arrays are <em>not</em> to be confused with normal arrays, as calling <a href="Reference/Global_Objects/Array/isArray.html"><code>Array.isArray()</code></a> on a typed array returns <code>false</code>. Moreover, not all methods available for normal arrays are supported by typed arrays (e.g. push and pop).</p>
<h2 id="Buffers_and_views_typed_array_architecture">Buffers and views: typed array architecture</h2>
<p>To achieve maximum flexibility and efficiency, JavaScript typed arrays split the implementation into <strong>buffers</strong> and <strong>views</strong>. A buffer (implemented by the <a href="Reference/Global_Objects/ArrayBuffer.html"><code>ArrayBuffer</code></a> object) is an object representing a chunk of data; it has no format to speak of and offers no mechanism for accessing its contents. In order to access the memory contained in a buffer, you need to use a view. A view provides a context — that is, a data type, starting offset, and the number of elements — that turns the data into a typed array.</p>
<p><img src="../../../../../media.prod.mdn.mozit.cloud/attachments/2014/09/16/8629/80522bcbdb9d77c4a4c72a289365ea63/typed_arrays.png" alt="Typed arrays in an ArrayBuffer" /></p>
<h3 id="ArrayBuffer">ArrayBuffer</h3>
<p>The <a href="Reference/Global_Objects/ArrayBuffer.html"><code>ArrayBuffer</code></a> is a data type that is used to represent a generic, fixed-length binary data buffer. You can't directly manipulate the contents of an <code>ArrayBuffer</code>; instead, you create a typed array view or a <a href="Reference/Global_Objects/DataView.html"><code>DataView</code></a> which represents the buffer in a specific format, and use that to read and write the contents of the buffer.</p>
<h3 id="Typed_array_views">Typed array views</h3>
<p>Typed array views have self-descriptive names and provide views for all the usual numeric types like <code>Int8</code>, <code>Uint32</code>, <code>Float64</code> and so forth. There is one special typed array view, the <code>Uint8ClampedArray</code>. It clamps the values between 0 and 255. This is useful for <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/ImageData">Canvas data processing</a>, for example.</p>
<table>
<thead>
<tr class="header">
<th>Type</th>
<th>Value Range</th>
<th>Size in bytes</th>
<th>Description</th>
<th>Web IDL type</th>
<th>Equivalent C type</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="Reference/Global_Objects/Int8Array.html"><code>Int8Array</code></a></td>
<td><code>-128</code> to <code>127</code></td>
<td>1</td>
<td>8-bit two's complement signed integer</td>
<td><code>byte</code></td>
<td><code>int8_t</code></td>
</tr>
<tr class="even">
<td><a href="Reference/Global_Objects/Uint8Array.html"><code>Uint8Array</code></a></td>
<td><code>0</code> to <code>255</code></td>
<td>1</td>
<td>8-bit unsigned integer</td>
<td><code>octet</code></td>
<td><code>uint8_t</code></td>
</tr>
<tr class="odd">
<td><a href="Reference/Global_Objects/Uint8ClampedArray.html"><code>Uint8ClampedArray</code></a></td>
<td><code>0</code> to <code>255</code></td>
<td>1</td>
<td>8-bit unsigned integer (clamped)</td>
<td><code>octet</code></td>
<td><code>uint8_t</code></td>
</tr>
<tr class="even">
<td><a href="Reference/Global_Objects/Int16Array.html"><code>Int16Array</code></a></td>
<td><code>-32768</code> to <code>32767</code></td>
<td>2</td>
<td>16-bit two's complement signed integer</td>
<td><code>short</code></td>
<td><code>int16_t</code></td>
</tr>
<tr class="odd">
<td><a href="Reference/Global_Objects/Uint16Array.html"><code>Uint16Array</code></a></td>
<td><code>0</code> to <code>65535</code></td>
<td>2</td>
<td>16-bit unsigned integer</td>
<td><code>unsigned short</code></td>
<td><code>uint16_t</code></td>
</tr>
<tr class="even">
<td><a href="Reference/Global_Objects/Int32Array.html"><code>Int32Array</code></a></td>
<td><code>-2147483648</code> to <code>2147483647</code></td>
<td>4</td>
<td>32-bit two's complement signed integer</td>
<td><code>long</code></td>
<td><code>int32_t</code></td>
</tr>
<tr class="odd">
<td><a href="Reference/Global_Objects/Uint32Array.html"><code>Uint32Array</code></a></td>
<td><code>0</code> to <code>4294967295</code></td>
<td>4</td>
<td>32-bit unsigned integer</td>
<td><code>unsigned long</code></td>
<td><code>uint32_t</code></td>
</tr>
<tr class="even">
<td><a href="Reference/Global_Objects/Float32Array.html"><code>Float32Array</code></a></td>
<td><code>1.2</code><span style="">×</span><code>10-38</code> to <code>3.4</code><span style="">×</span><code>1038</code></td>
<td>4</td>
<td>32-bit IEEE floating point number (7 significant digits e.g., <code>1.123456</code>)</td>
<td><code>unrestricted float</code></td>
<td><code>float</code></td>
</tr>
<tr class="odd">
<td><a href="Reference/Global_Objects/Float64Array.html"><code>Float64Array</code></a></td>
<td><code>5.0</code><span style="">×</span><code>10-324</code> to <code>1.8</code><span style="">×</span><code>10308</code></td>
<td>8</td>
<td>64-bit IEEE floating point number (16 significant digits e.g., <code>1.123...15</code>)</td>
<td><code>unrestricted double</code></td>
<td><code>double</code></td>
</tr>
<tr class="even">
<td><a href="Reference/Global_Objects/BigInt64Array.html"><code>BigInt64Array</code></a></td>
<td><code>-263</code> to <code>263-1</code></td>
<td>8</td>
<td>64-bit two's complement signed integer</td>
<td><code>bigint</code></td>
<td><code>int64_t (signed long long)</code></td>
</tr>
<tr class="odd">
<td><a href="Reference/Global_Objects/BigUint64Array.html"><code>BigUint64Array</code></a></td>
<td><code>0</code> to <code>264-1</code></td>
<td>8</td>
<td>64-bit unsigned integer</td>
<td><code>bigint</code></td>
<td><code>uint64_t (unsigned long long)</code></td>
</tr>
</tbody>
</table>
<h3 id="DataView">DataView</h3>
<p>The <a href="Reference/Global_Objects/DataView.html"><code>DataView</code></a> is a low-level interface that provides a getter/setter API to read and write arbitrary data to the buffer. This is useful when dealing with different types of data, for example. Typed array views are in the native byte-order (see <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/Endianness">Endianness</a>) of your platform. With a <code>DataView</code> you are able to control the byte-order. It is big-endian by default and can be set to little-endian in the getter/setter methods.</p>
<h2 id="Web_APIs_using_typed_arrays">Web APIs using typed arrays</h2>
<p>These are some examples of APIs that make use of typed arrays; there are others, and more are being added all the time.</p>
<dl>
<dt><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/FileReader#readAsArrayBuffer()" title="/en-US/docs/Web/API/FileReader#readAsArrayBuffer()"><code>FileReader.prototype.readAsArrayBuffer()</code></a></dt>
<dd>The <code>FileReader.prototype.readAsArrayBuffer()</code> method starts reading the contents of the specified <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/Blob" title="/en-US/docs/DOM/Blob"><code>Blob</code></a> or <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/File" title="/en-US/docs/DOM/File"><code>File</code></a>.
</dd>
<dt><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#send()" title="/en-US/docs/Web/API/XMLHttpRequest#send()"><code>XMLHttpRequest.prototype.send()</code></a></dt>
<dd><code>XMLHttpRequest</code> instances' <code>send()</code> method now supports typed arrays and <a href="Reference/Global_Objects/ArrayBuffer.html"><code>ArrayBuffer</code></a> objects as argument.
</dd>
<dt><code>ImageData.data</code></dt>
<dd>Is a <a href="Reference/Global_Objects/Uint8ClampedArray.html"><code>Uint8ClampedArray</code></a> representing a one-dimensional array containing the data in the RGBA order, with integer values between <code>0</code> and <code>255</code> inclusive.
</dd>
</dl>
<h2 id="Examples">Examples</h2>
<h3 id="Using_views_with_buffers">Using views with buffers</h3>
<p>First of all, we will need to create a buffer, here with a fixed length of 16-bytes:</p>
<pre class="brush:js notranslate"><code>let buffer = new ArrayBuffer(16);</code></pre>
<p>At this point, we have a chunk of memory whose bytes are all pre-initialized to 0. There's not a lot we can do with it, though. We can confirm that it is indeed 16 bytes long, and that's about it:</p>
<pre class="brush:js notranslate"><code>if (buffer.byteLength === 16) {
  console.log(&quot;Yes, it&#39;s 16 bytes.&quot;);
} else {
  console.log(&quot;Oh no, it&#39;s the wrong size!&quot;);
} </code></pre>
<p>Before we can really work with this buffer, we need to create a view. Let's create a view that treats the data in the buffer as an array of 32-bit signed integers:</p>
<pre class="brush:js notranslate"><code>let int32View = new Int32Array(buffer);</code></pre>
<p>Now we can access the fields in the array just like a normal array:</p>
<pre class="brush:js notranslate"><code>for (let i = 0; i &lt; int32View.length; i++) {
  int32View[i] = i * 2;
}</code></pre>
<p>This fills out the 4 entries in the array (4 entries at 4 bytes each makes 16 total bytes) with the values <code>0</code>, <code>2</code>, <code>4</code>, and <code>6</code>.</p>
<h3 id="Multiple_views_on_the_same_data">Multiple views on the same data</h3>
<p>Things start to get really interesting when you consider that you can create multiple views onto the same data. For example, given the code above, we can continue like this:</p>
<pre class="brush:js notranslate"><code>let int16View = new Int16Array(buffer);

for (let i = 0; i &lt; int16View.length; i++) {
  console.log(&#39;Entry &#39; + i + &#39;: &#39; + int16View[i]);
}</code></pre>
<p>Here we create a 16-bit integer view that shares the same buffer as the existing 32-bit view and we output all the values in the buffer as 16-bit integers. Now we get the output <code>0</code>, <code>0</code>, <code>2</code>, <code>0</code>, <code>4</code>, <code>0</code>, <code>6</code>, <code>0</code>.</p>
<p>You can go a step farther, though. Consider this:</p>
<pre class="brush:js notranslate"><code>int16View[0] = 32;
console.log(&#39;Entry 0 in the 32-bit array is now &#39; + int32View[0]);</code></pre>
<p>The output from this is <code>"Entry 0 in the 32-bit array is now 32"</code>.</p>
<p>In other words, the two arrays are indeed simply viewed on the same data buffer, treating it as different formats. You can do this with any <a href="Reference/Global_Objects/TypedArray.html#TypedArray_objects" title="JavaScript typed arrays/ArrayBufferView#Typed array subclasses">view types</a>.</p>
<h3 id="Working_with_complex_data_structures">Working with complex data structures</h3>
<p>By combining a single buffer with multiple views of different types, starting at different offsets into the buffer, you can interact with data objects containing multiple data types. This lets you, for example, interact with complex data structures from <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/WebGL" title="WebGL">WebGL</a>, data files, or C structures you need to use while using <a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Mozilla/js-ctypes" title="js-ctypes">js-ctypes</a>.</p>
<p>Consider this C structure:</p>
<pre class="brush:cpp notranslate"><code>struct someStruct {
  unsigned long id;
  char username[16];
  float amountDue;
};</code></pre>
<p>You can access a buffer containing data in this format like this:</p>
<pre class="brush:js notranslate"><code>let buffer = new ArrayBuffer(24);

// ... read the data into the buffer ...

let idView = new Uint32Array(buffer, 0, 1);
let usernameView = new Uint8Array(buffer, 4, 16);
let amountDueView = new Float32Array(buffer, 20, 1);</code></pre>
<p>Then you can access, for example, the amount due with <code>amountDueView[0]</code>.</p>
<div class="note">
<strong>Note:</strong> The <a href="../../../../../external.html?link=http://en.wikipedia.org/wiki/Data_structure_alignment" class="external" title="http://en.wikipedia.org/wiki/Data_structure_alignment">data structure alignment</a> in a C structure is platform-dependent. Take precautions and considerations for these padding differences.
</div>
<h3 id="Conversion_to_normal_arrays">Conversion to normal arrays</h3>
<p>After processing a typed array, it is sometimes useful to convert it back to a normal array in order to benefit from the <a href="Reference/Global_Objects/Array.html"><code>Array</code></a> prototype. This can be done using <a href="Reference/Global_Objects/Array/from.html"><code>Array.from()</code></a>, or using the following code where <code>Array.from()</code> is unsupported.</p>
<pre class="brush:js notranslate"><code>let typedArray = new Uint8Array([1, 2, 3, 4]),
    normalArray = Array.prototype.slice.call(typedArray);
normalArray.length === 4;
normalArray.constructor === Array;</code></pre>
<h2 id="Specifications">Specifications</h2>
<table>
<thead>
<tr class="header">
<th>Specification</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="../../../../../external.html?link=https://tc39.es/ecma262/#sec-typedarray-objects" class="external">ECMAScript (ECMA-262)<br />
<span class="small">The definition of 'TypedArray Objects' in that specification.</span></a></td>
</tr>
</tbody>
</table>
<h2 id="Browser_compatibility">Browser compatibility</h2>
<div class="hidden">
The compatibility table on this page is generated from structured data. If you'd like to contribute to the data, please check out <a href="../../../../../external.html?link=https://github.com/mdn/browser-compat-data" class="external">https://github.com/mdn/browser-compat-data</a> and send us a pull request.
</div>
<div id="bcd:javascript.builtins.Int8Array" class="bc-data">
<a href="../../../../../external.html?link=https://github.com/mdn/browser-compat-data" class="bc-github-link external">Update compatibility data on GitHub</a>
</div>
</div>
</div>
</div>
</div>
<p><span>Desktop</span></p>
<p><span>Mobile</span></p>
<p><span>Server</span></p>
<p><span class="bc-head-txt-label bc-head-icon-chrome">Chrome</span></p>
<p><span class="bc-head-txt-label bc-head-icon-edge">Edge</span></p>
<p><span class="bc-head-txt-label bc-head-icon-firefox">Firefox</span></p>
<p><span class="bc-head-txt-label bc-head-icon-ie">Internet Explorer</span></p>
<p><span class="bc-head-txt-label bc-head-icon-opera">Opera</span></p>
<p><span class="bc-head-txt-label bc-head-icon-safari">Safari</span></p>
<p><span class="bc-head-txt-label bc-head-icon-webview_android">Android webview</span></p>
<p><span class="bc-head-txt-label bc-head-icon-chrome_android">Chrome for Android</span></p>
<p><span class="bc-head-txt-label bc-head-icon-firefox_android">Firefox for Android</span></p>
<p><span class="bc-head-txt-label bc-head-icon-opera_android">Opera for Android</span></p>
<p><span class="bc-head-txt-label bc-head-icon-safari_ios">Safari on iOS</span></p>
<p><span class="bc-head-txt-label bc-head-icon-samsunginternet_android">Samsung Internet</span></p>
<p><span class="bc-head-txt-label bc-head-icon-nodejs">Node.js</span></p>
<p><a href="Reference/Global_Objects/Int8Array.html"><code>Int8Array</code></a></p>
<p><span class="bc-browser-name">Chrome</span> <span>Full support</span> 7</p>
<p><span class="bc-browser-name">Edge</span> <span>Full support</span> 12</p>
<p><span class="bc-browser-name">Firefox</span> <span>Full support</span> 4</p>
<p><span class="bc-browser-name">IE</span> <span>Full support</span> 10</p>
<p><span class="bc-browser-name">Opera</span> <span>Full support</span> 11.6</p>
<p><span class="bc-browser-name">Safari</span> <span>Full support</span> 5.1</p>
<p><span class="bc-browser-name">WebView Android</span> <span>Full support</span> 4</p>
<p><span class="bc-browser-name">Chrome Android</span> <span>Full support</span> 18</p>
<p><span class="bc-browser-name">Firefox Android</span> <span>Full support</span> 4</p>
<p><span class="bc-browser-name">Opera Android</span> <span>Full support</span> 12</p>
<p><span class="bc-browser-name">Safari iOS</span> <span>Full support</span> 4.2</p>
<p><span class="bc-browser-name">Samsung Internet Android</span> <span>Full support</span> 1.0</p>
<p><span class="bc-browser-name">nodejs</span> <span>Full support</span> 0.10</p>
<p><a href="Reference/Global_Objects/Int8Array/Int8Array.html"><code>Int8Array()</code> constructor</a></p>
<p><span class="bc-browser-name">Chrome</span> <span>Full support</span> 7</p>
<p><span class="bc-browser-name">Edge</span> <span>Full support</span> 12</p>
<p><span class="bc-browser-name">Firefox</span> <span>Full support</span> 4</p>
<p><span class="bc-browser-name">IE</span> <span>Full support</span> 10</p>
<p><span class="bc-browser-name">Opera</span> <span>Full support</span> 11.6</p>
<p><span class="bc-browser-name">Safari</span> <span>Full support</span> 5.1</p>
<p><span class="bc-browser-name">WebView Android</span> <span>Full support</span> 4</p>
<p><span class="bc-browser-name">Chrome Android</span> <span>Full support</span> 18</p>
<p><span class="bc-browser-name">Firefox Android</span> <span>Full support</span> 4</p>
<p><span class="bc-browser-name">Opera Android</span> <span>Full support</span> 12</p>
<p><span class="bc-browser-name">Safari iOS</span> <span>Full support</span> 4.2</p>
<p><span class="bc-browser-name">Samsung Internet Android</span> <span>Full support</span> 1.0</p>
<p><span class="bc-browser-name">nodejs</span> <span>Full support</span> 0.10</p>
<section id="sect1" class="bc-legend">
<h3 id="Legend" class="offscreen">Legend</h3>
<dl>
<dt><span class="bc-supports-yes bc-supports"> <span>Full support</span>   </span></dt>
<dd>Full support
</dd>
</dl>
</section>
<h2 id="See_also">See also</h2>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Base64_encoding_and_decoding#Appendix.3A_Decode_a_Base64_string_to_Uint8Array_or_ArrayBuffer" title="/en-US/docs/Web/JavaScript/Base64_encoding_and_decoding#Appendix.3A_Decode_a_Base64_string_to_Uint8Array_or_ArrayBuffer">Getting <code>ArrayBuffer</code>s or typed arrays from <em>Base64</em>-encoded strings</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Code_snippets/StringView" title="/en-US/docs/Web/JavaScript/Typed_arrays/StringView"><code>StringView</code> – a C-like representation of strings based on typed arrays</a></li>
<li><a href="../../../../../external.html?link=https://hacks.mozilla.org/2011/12/faster-canvas-pixel-manipulation-with-typed-arrays" class="external">Faster Canvas Pixel Manipulation with Typed Arrays</a></li>
<li><a href="../../../../../external.html?link=http://www.html5rocks.com/en/tutorials/webgl/typed_arrays" class="external">Typed Arrays: Binary Data in the Browser</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Glossary/Endianness">Endianness</a></li>
</ul>
<div class="metadata">
<section class="document-meta">
<h4 id="metadata-12">Metadata</h4>
<ul>
<li><strong>Last modified:</strong> Mar 13, 2020, <a href="../../../../../external.html?link=https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays$history">by MDN contributors</a></li>
</ul>
</section>
</div>
<div id="sidebar-quicklinks" class="sidebar">
<div class="quick-links">
<div class="quick-links-head sidebar-heading">
Related Topics
</div>
<div>
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong><em>JavaScript</em></strong></a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong>Tutorials:</strong></a></li>
<li>Complete beginners
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics">JavaScript basics</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps">JavaScript first steps</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks">JavaScript building blocks</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Introducing JavaScript objects</a></li>
</ol></li>
<li>JavaScript Guide
<ol>
<li><a href="Guide/Introduction.html">Introduction</a></li>
<li><a href="Guide/Grammar_and_Types.html">Grammar and types</a></li>
<li><a href="Guide/Control_flow_and_error_handling.html">Control flow and error handling</a></li>
<li><a href="Guide/Loops_and_iteration.html">Loops and iteration</a></li>
<li><a href="Guide/Functions.html">Functions</a></li>
<li><a href="Guide/Expressions_and_Operators.html">Expressions and operators</a></li>
<li><a href="Guide/Numbers_and_dates.html">Numbers and dates</a></li>
<li><a href="Guide/Text_formatting.html">Text formatting</a></li>
<li><a href="Guide/Regular_Expressions.html">Regular expressions</a></li>
<li><a href="Guide/Indexed_collections.html">Indexed collections</a></li>
<li><a href="Guide/Keyed_collections.html">Keyed collections</a></li>
<li><a href="Guide/Working_with_Objects.html">Working with objects</a></li>
<li><a href="Guide/Details_of_the_Object_Model.html">Details of the object model</a></li>
<li><a href="Guide/Using_promises.html">Using promises</a></li>
<li><a href="Guide/Iterators_and_generators.html">Iterators and generators</a></li>
<li><a href="Guide/Meta_programming.html">Meta programming</a></li>
<li><a href="Guide/Modules.html">JavaScript modules</a></li>
</ol></li>
<li>Intermediate
<ol>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks">Client-side JavaScript frameworks</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs">Client-side web APIs</a></li>
<li><a href="A_re-introduction_to_JavaScript.html">A re-introduction to JavaScript</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Equality_comparisons_and_sameness.html">Equality comparisons and sameness</a></li>
<li><a href="Closures.html">Closures</a></li>
</ol></li>
<li>Advanced
<ol>
<li><a href="Inheritance_and_the_prototype_chain.html">Inheritance and the prototype chain</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Typed_arrays.html">JavaScript typed arrays</a></li>
<li><a href="Memory_Management.html">Memory Management</a></li>
<li><a href="EventLoop.html">Concurrency model and Event Loop</a></li>
</ol></li>
<li><strong><a href="Reference.html">References:</a></strong></li>
<li>Built-in objects
<ol>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Global_Objects/AggregateError.html" title="The AggregateError object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by Promise.any(), when all promises passed to it reject.">AggregateError</a></li>
<li><a href="Reference/Global_Objects/Array.html" title="The JavaScript Array class is a global object that is used in the construction of arrays; which are high-level, list-like objects.">Array</a></li>
<li><a href="Reference/Global_Objects/ArrayBuffer.html" title="The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer.">ArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/AsyncFunction.html" title="The AsyncFunction constructor creates a new async function object. In JavaScript, every asynchronous function is actually an AsyncFunction object.">AsyncFunction</a></li>
<li><a href="Reference/Global_Objects/Atomics.html" title="The Atomics object provides atomic operations as static methods. They are used with SharedArrayBuffer and ArrayBuffer objects.">Atomics</a></li>
<li><a href="Reference/Global_Objects/BigInt.html" title="BigInt is a built-in object that provides a way to represent whole numbers larger than 253 - 1, which is the largest number JavaScript can reliably represent with the Number primitive and represented by the Number.MAX_SAFE_INTEGER constant. BigInt can be used for arbitrarily large integers.">BigInt</a></li>
<li><a href="Reference/Global_Objects/BigInt64Array.html" title="The BigInt64Array typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigInt64Array</a></li>
<li><a href="Reference/Global_Objects/BigUint64Array.html" title="The BigUint64Array typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object&#39;s methods, or by using standard array index syntax (that is, using bracket notation).">BigUint64Array</a></li>
<li><a href="Reference/Global_Objects/Boolean.html" title="The Boolean object is an object wrapper for a boolean value.">Boolean</a></li>
<li><a href="Reference/Global_Objects/DataView.html" title="The DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform&#39;s endianness.">DataView</a></li>
<li><a href="Reference/Global_Objects/Date.html" title="JavaScript Date objects represent a single moment in time in a platform-independent format.">Date</a></li>
<li><a href="Reference/Global_Objects/Error.html" title="Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.">Error</a></li>
<li><a href="Reference/Global_Objects/EvalError.html" title="The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.">EvalError</a></li>
<li><a href="Reference/Global_Objects/FinalizationRegistry.html" title="A FinalizationRegistry object lets you request a callback when an object is garbage-collected.">FinalizationRegistry</a></li>
<li><a href="Reference/Global_Objects/Float32Array.html" title="The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float32Array</a></li>
<li><a href="Reference/Global_Objects/Float64Array.html" title="The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Float64Array</a></li>
<li><a href="Reference/Global_Objects/Function.html" title="Every JavaScript function is actually a Function object. This can be seen with the code (function(){}).constructor === Function, which returns true.">Function</a></li>
<li><a href="Reference/Global_Objects/Generator.html" title="The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.">Generator</a></li>
<li><a href="Reference/Global_Objects/GeneratorFunction.html" title="The GeneratorFunction constructor creates a new generator function object. In JavaScript, every generator function is actually a GeneratorFunction object.">GeneratorFunction</a></li>
<li><a href="Reference/Global_Objects/Infinity.html" title="The global property Infinity is a numeric value representing infinity.">Infinity</a></li>
<li><a href="Reference/Global_Objects/Int16Array.html" title="The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int16Array</a></li>
<li><a href="Reference/Global_Objects/Int32Array.html" title="The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int32Array</a></li>
<li><a href="Reference/Global_Objects/Int8Array.html" title="The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Int8Array</a></li>
<li><a href="Reference/Global_Objects/InternalError.html" title="The InternalError object indicates an error that occurred internally in the JavaScript engine.">InternalError</a></li>
<li><a href="Reference/Global_Objects/Intl.html" title="The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The Intl object provides access to several constructors as well as functionality common to the internationalization constructors and other language sensitive functions.">Intl</a></li>
<li><a href="Reference/Global_Objects/JSON.html" title="The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can&#39;t be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.">JSON</a></li>
<li><a href="Reference/Global_Objects/Map.html" title="The Map object holds key-value pairs and remembers the original insertion order of the keys.">Map</a></li>
<li><a href="Reference/Global_Objects/Math.html" title="Math is a built-in object that has properties and methods for mathematical constants and functions. It’s not a function object.">Math</a></li>
<li><a href="Reference/Global_Objects/NaN.html" title="The global NaN property is a value representing Not-A-Number.">NaN</a></li>
<li><a href="Reference/Global_Objects/Number.html" title="The Number constructor contains constants and methods for working with numbers. Values of other types can be converted to numbers using the Number() function.">Number</a></li>
<li><a href="Reference/Global_Objects/Object.html" title="The Object class represents one of JavaScript&#39;s data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.">Object</a></li>
<li><a href="Reference/Global_Objects/Promise.html" title="The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.">Promise</a></li>
<li><a href="Reference/Global_Objects/Proxy.html" title="The Proxy object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.">Proxy</a></li>
<li><a href="Reference/Global_Objects/RangeError.html" title="The RangeError object indicates an error when a value is not in the set or range of allowed values.">RangeError</a></li>
<li><a href="Reference/Global_Objects/ReferenceError.html" title="The ReferenceError object represents an error when a non-existent variable is referenced.">ReferenceError</a></li>
<li><a href="Reference/Global_Objects/Reflect.html" title="Reflect is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of proxy handlers. Reflect is not a function object, so it&#39;s not constructible.">Reflect</a></li>
<li><a href="Reference/Global_Objects/RegExp.html" title="The RegExp object is used for matching text with a pattern.">RegExp</a></li>
<li><a href="Reference/Global_Objects/Set.html" title="The Set object lets you store unique values of any type, whether primitive values or object references.">Set</a></li>
<li><a href="Reference/Global_Objects/SharedArrayBuffer.html" title="The SharedArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. Unlike an ArrayBuffer, a SharedArrayBuffer cannot become detached.">SharedArrayBuffer</a></li>
<li><a href="Reference/Global_Objects/String.html" title="The String object is used to represent and manipulate a sequence of characters.">String</a></li>
<li><a href="Reference/Global_Objects/Symbol.html" title="The data type symbol is a primitive data type. The Symbol() function returns a value of type symbol, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class, but is incomplete as a constructor because it does not support the syntax &quot;new Symbol()&quot;.">Symbol</a></li>
<li><a href="Reference/Global_Objects/SyntaxError.html" title="The SyntaxError object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.">SyntaxError</a></li>
<li><a href="Reference/Global_Objects/TypeError.html" title="The TypeError object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.">TypeError</a></li>
<li><a href="Reference/Global_Objects/TypedArray.html" title="A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.">TypedArray</a></li>
<li><a href="Reference/Global_Objects/URIError.html" title="The URIError object represents an error when a global URI handling function was used in a wrong way.">URIError</a></li>
<li><a href="Reference/Global_Objects/Uint16Array.html" title="The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint16Array</a></li>
<li><a href="Reference/Global_Objects/Uint32Array.html" title="The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint32Array</a></li>
<li><a href="Reference/Global_Objects/Uint8Array.html" title="The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8Array</a></li>
<li><a href="Reference/Global_Objects/Uint8ClampedArray.html" title="The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to 0. Once established, you can reference elements in the array using the object&#39;s methods, or using standard array index syntax (that is, using bracket notation).">Uint8ClampedArray</a></li>
<li><a href="Reference/Global_Objects/WeakMap.html" title="The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.">WeakMap</a></li>
<li><a href="Reference/Global_Objects/WeakRef.html" title="A WeakRef object lets you hold a weak reference to another object, without preventing that object from getting garbage-collected.">WeakRef</a></li>
<li><a href="Reference/Global_Objects/WeakSet.html" title="The WeakSet object lets you store weakly held objects in a collection.">WeakSet</a></li>
<li><a href="Reference/Global_Objects/WebAssembly.html" title="The WebAssembly JavaScript object acts as the namespace for all WebAssembly-related functionality.">WebAssembly</a></li>
<li><a href="Reference/Global_Objects/decodeURI.html" title="The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or by a similar routine.">decodeURI()</a></li>
<li><a href="Reference/Global_Objects/decodeURIComponent.html" title="The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.">decodeURIComponent()</a></li>
<li><a href="Reference/Global_Objects/encodeURI.html" title="The encodeURI() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURI()</a></li>
<li><a href="Reference/Global_Objects/encodeURIComponent.html" title="The encodeURIComponent() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).">encodeURIComponent()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/escape.html" title="The escape() function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.">escape()</a></li>
<li><a href="Reference/Global_Objects/eval.html" title="The eval() function evaluates JavaScript code represented as a string.">eval()</a></li>
<li><a href="Reference/Global_Objects/globalThis.html" title="The global globalThis property contains the global this value, which is akin to the global object.">globalThis</a></li>
<li><a href="Reference/Global_Objects/isFinite.html" title="The global isFinite() function determines whether the passed value is a finite number. If  needed, the parameter is first converted to a number.">isFinite()</a></li>
<li><a href="Reference/Global_Objects/isNaN.html" title="The isNaN() function determines whether a value is NaN or not. Note, coercion inside the isNaN function has interesting rules; you may alternatively want to use Number.isNaN(), as defined in ECMAScript 2015.">isNaN()</a></li>
<li><a href="Reference/Global_Objects/null.html" title="The value null represents the intentional absence of any object value. It is one of JavaScript&#39;s primitive values and is treated as falsy for boolean operations.">null</a></li>
<li><a href="Reference/Global_Objects/parseFloat.html" title="The parseFloat() function parses an argument (converting it to a string first if needed) and returns a floating point number.">parseFloat()</a></li>
<li><a href="Reference/Global_Objects/parseInt.html" title="The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).">parseInt()</a></li>
<li><a href="Reference/Global_Objects/undefined.html" title="The global undefined property represents the primitive value undefined. It is one of JavaScript&#39;s primitive types.">undefined</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Global_Objects/unescape.html" title="The unescape() function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Usually, decodeURI or decodeURIComponent are preferred over unescape.">unescape()</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."> <em></em> </span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."> <em></em> </span></span><a href="Reference/Global_Objects/uneval.html" title="The uneval() function creates a string representation of the source code of an Object.">uneval()</a></li>
</ol></li>
<li>Expressions &amp; operators
<ol>
<li><a href="Reference/Operators/Addition.html" title="The addition operator (+) produces the sum of numeric operands or string concatenation.">Addition (+)</a></li>
<li><a href="Reference/Operators/Addition_assignment.html" title="The addition assignment operator (+=) adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible.">Addition assignment (+=)</a></li>
<li><a href="Reference/Operators/Assignment.html" title="The simple assignment operator (=) is used to assign a value to a variable. The assignment operation evaluates to the assigned value. Chaining the assignment operator is possible in order to assign a single value to multiple variables">Assignment (=)</a></li>
<li><a href="Reference/Operators/Bitwise_AND.html" title="The bitwise AND operator (&amp;) returns a 1 in each bit position for which the corresponding bits of both operands are 1s.">Bitwise AND (&amp;)</a></li>
<li><a href="Reference/Operators/Bitwise_AND_assignment.html" title="The bitwise AND assignment operator (&amp;=) uses the binary representation of both operands, does a bitwise AND operation on them and assigns the result to the variable.">Bitwise AND assignment (&amp;=)</a></li>
<li><a href="Reference/Operators/Bitwise_NOT.html" title="The bitwise NOT operator (~) inverts the bits of its operand.">Bitwise NOT (~)</a></li>
<li><a href="Reference/Operators/Bitwise_OR.html" title="The bitwise OR operator (|) returns a 1 in each bit position for which the corresponding bits of either or both operands are 1s.">Bitwise OR (|)</a></li>
<li><a href="Reference/Operators/Bitwise_OR_assignment.html" title="The bitwise OR assignment operator (|=) uses the binary representation of both operands, does a bitwise OR operation on them and assigns the result to the variable.">Bitwise OR assignment (|=)</a></li>
<li><a href="Reference/Operators/Bitwise_XOR.html" title="The bitwise XOR operator (^) returns a 1 in each bit position for which the corresponding bits of either but not both operands are 1s.">Bitwise XOR (^)</a></li>
<li><a href="Reference/Operators/Bitwise_XOR_assignment.html" title="The bitwise XOR assignment operator (^=) uses the binary representation of both operands, does a bitwise XOR operation on them and assigns the result to the variable.">Bitwise XOR assignment (^=)</a></li>
<li><a href="Reference/Operators/Comma_Operator.html" title="The comma operator (,) evaluates each of its operands (from left to right) and returns the value of the last operand. This lets you create a compound expression in which multiple expressions are evaluated, with the compound expression&#39;s final value being the value of the rightmost of its member expressions. This is commonly used to provide multiple parameters to a for loop.">Comma operator (,)</a></li>
<li><a href="Reference/Operators/Conditional_Operator.html" title="The conditional (ternary) operator is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy.">Conditional (ternary) operator</a></li>
<li><a href="Reference/Operators/Decrement.html" title="The decrement operator (--) decrements (subtracts one from) its operand and returns a value.">Decrement (--)</a></li>
<li><a href="Reference/Operators/Destructuring_assignment.html" title="The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.">Destructuring assignment</a></li>
<li><a href="Reference/Operators/Division.html" title="The division operator (/) produces the quotient of its operands where the left operand is the dividend and the right operand is the divisor.">Division (/)</a></li>
<li><a href="Reference/Operators/Division_assignment.html" title="The division assignment operator (/=) divides a variable by the value of the right operand and assigns the result to the variable.">Division assignment (/=)</a></li>
<li><a href="Reference/Operators/Equality.html" title="The equality operator (==) checks whether its two operands are equal, returning a Boolean result. Unlike the strict equality operator, it attempts to convert and compare operands that are of different types.">Equality (==)</a></li>
<li><a href="Reference/Operators/Exponentiation.html" title="The exponentiation operator (**) returns the result of raising the first operand to the power of the second operand. It is equivalent to Math.pow, except it also accepts BigInts as operands.">Exponentiation (**)</a></li>
<li><a href="Reference/Operators/Exponentiation_assignment.html" title="The exponentiation assignment operator (**=) raises the value of a variable to the power of the right operand.">Exponentiation assignment (**=)</a></li>
<li><a href="Reference/Operators/function.html" title="The function keyword can be used to define a function inside an expression.">Function expression</a></li>
<li><a href="Reference/Operators/Greater_than.html" title="The greater than operator (&gt;) returns true if the left operand is greater than the right operand, and false otherwise.">Greater than (&gt;)</a></li>
<li><a href="Reference/Operators/Greater_than_or_equal.html" title="The greater than or equal operator (&gt;=) returns true if the left operand is greater than or equal to the right operand, and false otherwise.">Greater than or equal (&gt;=)</a></li>
<li><a href="Reference/Operators/Grouping.html" title="The grouping operator ( ) controls the precedence of evaluation in expressions.">Grouping operator ( )</a></li>
<li><a href="Reference/Operators/Increment.html" title="The increment operator (++) increments (adds one to) its operand and returns a value.">Increment (++)</a></li>
<li><a href="Reference/Operators/Inequality.html" title="The inequality operator (!=) checks whether its two operands are not equal, returning a Boolean result. Unlike the strict inequality operator, it attempts to convert and compare operands that are of different types.">Inequality (!=)</a></li>
<li><a href="Reference/Operators/Left_shift.html" title="The left shift operator (&lt;&lt;) shifts the first operand the specified number of bits to the left. Excess bits shifted off to the left are discarded. Zero bits are shifted in from the right.">Left shift (&lt;&lt;)</a></li>
<li><a href="Reference/Operators/Left_shift_assignment.html" title="The left shift assignment operator (&lt;&lt;=) moves the specified amount of bits to the left and assigns the result to the variable.">Left shift assignment (&lt;&lt;=)</a></li>
<li><a href="Reference/Operators/Less_than.html" title="The less than operator (&lt;) returns true if the left operand is less than the right operand, and false otherwise.">Less than (&lt;)</a></li>
<li><a href="Reference/Operators/Less_than_or_equal.html" title="The less than or equal operator (&lt;=) returns true if the left operand is less than or equal to the right operand, and false otherwise.">Less than or equal (&lt;=)</a></li>
<li><a href="Reference/Operators/Logical_AND.html" title="The logical AND (&amp;&amp;) operator (logical conjunction) for a set of operands is true if and only if all of its operands are true. It is typically used with Boolean (logical) values. When it is, it returns a Boolean value. However, the &amp;&amp; operator actually returns the value of one of the specified operands, so if this operator is used with non-Boolean values, it will return a non-Boolean value.">Logical AND (&amp;&amp;)</a></li>
<li><a href="Reference/Operators/Logical_AND_assignment.html" title="The logical AND assignment (x &amp;&amp;= y) operator only assigns if x is truthy.">Logical AND assignment (&amp;&amp;=)</a></li>
<li><a href="Reference/Operators/Logical_NOT.html" title="The logical NOT (!) operator (logical complement, negation) takes truth to falsity and vice versa. It is typically used with Boolean (logical) values. When used with non-Boolean values, it returns false if its single operand can be converted to true; otherwise, returns true.">Logical NOT (!)</a></li>
<li><a href="Reference/Operators/Logical_OR.html" title="The logical OR (||) operator (logical disjunction) for a set of operands is true if and only if one or more of its operands is true. It is typically used with Boolean (logical) values. When it is, it returns a Boolean value. However, the || operator actually returns the value of one of the specified operands, so if this operator is used with non-Boolean values, it will return a non-Boolean value.">Logical OR (||)</a></li>
<li><a href="Reference/Operators/Logical_OR_assignment.html" title="The logical OR assignment (x ||= y) operator only assigns if x is falsy.">Logical OR assignment (||=)</a></li>
<li><a href="Reference/Operators/Logical_nullish_assignment.html" title="The logical nullish assignment (x ??= y) operator only assigns if x is nullish (null or undefined).">Logical nullish assignment (??=)</a></li>
<li><a href="Reference/Operators/Multiplication.html" title="The multiplication operator (*) produces the product of the operands.">Multiplication (*)</a></li>
<li><a href="Reference/Operators/Multiplication_assignment.html" title="The multiplication assignment operator (*=) multiplies a variable by the value of the right operand and assigns the result to the variable.">Multiplication assignment (*=)</a></li>
<li><a href="Reference/Operators/Nullish_coalescing_operator.html" title="The nullish coalescing operator (??) is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.">Nullish coalescing operator (??)</a></li>
<li><a href="Reference/Operators/Object_initializer.html" title="Objects can be initialized using new Object(), Object.create(), or using the literal notation (initializer notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).">Object initializer</a></li>
<li><a href="Reference/Operators/Operator_Precedence.html" title="Operator precedence determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.">Operator precedence</a></li>
<li><a href="Reference/Operators/Optional_chaining.html" title="The ?. operator functions similarly to the . chaining operator, except that instead of causing an error if a reference is nullish (null or undefined), the expression short-circuits with a return value of undefined.">Optional chaining (?.)</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This is an experimental API that should not be used in production code."> <em></em> </span></span><a href="Reference/Operators/Pipeline_operator.html" title="The experimental pipeline operator |&gt; (currently at stage 1) pipes the value of an expression into a function. This allows the creation of chained function calls in a readable manner. The result is syntactic sugar in which a function call with a single argument can be written like this:">Pipeline operator (|&gt;)</a></li>
<li><a href="Reference/Operators/Property_Accessors-2.html" title="Property accessors provide access to an object&#39;s properties by using the dot notation or the bracket notation.">Property accessors</a></li>
<li><a href="Reference/Operators/Remainder.html" title="The remainder operator (%) returns the remainder left over when one operand is divided by a second operand. It always takes the sign of the dividend.">Remainder (%)</a></li>
<li><a href="Reference/Operators/Remainder_assignment.html" title="The remainder assignment operator (%=) divides a variable by the value of the right operand and assigns the remainder to the variable.">Remainder assignment (%=)</a></li>
<li><a href="Reference/Operators/Right_shift.html" title="The right shift operator (&gt;&gt;) shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Copies of the leftmost bit are shifted in from the left. Since the new leftmost bit has the same value as the previous leftmost bit, the sign bit (the leftmost bit) does not change. Hence the name &quot;sign-propagating&quot;.">Right shift (&gt;&gt;)</a></li>
<li><a href="Reference/Operators/Right_shift_assignment.html" title="The right shift assignment operator (&gt;&gt;=) moves the specified amount of bits to the right and assigns the result to the variable.">Right shift assignment (&gt;&gt;=)</a></li>
<li><a href="Reference/Operators/Spread_syntax.html" title="Spread syntax (...) allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.">Spread syntax (...)</a></li>
<li><a href="Reference/Operators/Strict_equality.html" title="The strict equality operator (===) checks whether its two operands are equal, returning a Boolean result. Unlike the equality operator, the strict equality operator always considers operands of different types to be different.">Strict equality (===)</a></li>
<li><a href="Reference/Operators/Strict_inequality.html" title="The strict inequality operator (!==) checks whether its two operands are not equal, returning a Boolean result. Unlike the inequality operator, the strict inequality operator always considers operands of different types to be different.">Strict inequality (!==)</a></li>
<li><a href="Reference/Operators/Subtraction.html" title="The subtraction operator (-) subtracts the two operands, producing their difference.">Subtraction (-)</a></li>
<li><a href="Reference/Operators/Subtraction_assignment.html" title="The subtraction assignment operator (-=) subtracts the value of the right operand from a variable and assigns the result to the variable.">Subtraction assignment (-=)</a></li>
<li><a href="Reference/Operators/Unary_negation.html" title="The unary negation operator (-) precedes its operand and negates it.">Unary negation (-)</a></li>
<li><a href="Reference/Operators/Unary_plus.html" title="The unary plus operator (+) precedes its operand and evaluates to its operand but attempts to convert it into a number, if it isn&#39;t already.">Unary plus (+)</a></li>
<li><a href="Reference/Operators/Unsigned_right_shift.html" title="The unsigned right shift operator (&gt;&gt;&gt;) (zero-fill right shift) shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Zero bits are shifted in from the left. The sign bit becomes 0, so the result is always non-negative. Unlike the other bitwise operators, zero-fill right shift returns an unsigned 32-bit integer.">Unsigned right shift (&gt;&gt;&gt;)</a></li>
<li><a href="Reference/Operators/Unsigned_right_shift_assignment.html" title="The unsigned right shift assignment operator (&gt;&gt;&gt;=) moves the specified amount of bits to the right and assigns the result to the variable.">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li>
<li><a href="Reference/Operators/async_function.html" title="The async function keyword can be used to define async functions inside expressions.">async function expression</a></li>
<li><a href="Reference/Operators/await.html" title="The await operator is used to wait for a Promise. It can only be used inside an async function.">await</a></li>
<li><a href="Reference/Operators/class.html" title="The class expression is one way to define a class in ECMAScript 2015. Similar to function expressions, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. ">class expression</a></li>
<li><a href="Reference/Operators/delete.html" title="The JavaScript delete operator removes a property from an object; if no more references to the same property are held, it is eventually released automatically.">delete operator</a></li>
<li><a href="Reference/Operators/function_.html" title="The function* keyword can be used to define a generator function inside an expression.">function* expression</a></li>
<li><a href="Reference/Operators/in.html" title="The in operator returns true if the specified property is in the specified object or its prototype chain.">in operator</a></li>
<li><a href="Reference/Operators/instanceof.html" title="The instanceof operator tests to see if the prototype property of a constructor appears anywhere in the prototype chain of an object. The return value is a boolean value.">instanceof</a></li>
<li><a href="Reference/Operators/new.html" title="The new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.">new operator</a></li>
<li><a href="Reference/Operators/new-2.html" title="The new.target pseudo-property lets you detect whether a function or constructor was called using the new operator. In constructors and functions invoked using the new operator, new.target returns a reference to the constructor or function. In normal function calls, new.target is undefined.">new.target</a></li>
<li><a href="Reference/Operators/super.html" title="The super keyword is used to access and call functions on an object&#39;s parent.">super</a></li>
<li><a href="Reference/Operators/this.html" title="A function&#39;s this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode.">this</a></li>
<li><a href="Reference/Operators/typeof.html" title="The typeof operator returns a string indicating the type of the unevaluated operand.">typeof</a></li>
<li><a href="Reference/Operators/void.html" title="The void operator evaluates the given expression and then returns undefined.">void operator</a></li>
<li><a href="Reference/Operators/yield.html" title="The yield keyword is used to pause and resume a generator function (function* or legacy generator function).">yield</a></li>
<li><a href="Reference/Operators/yield_.html" title="The yield* expression is used to delegate to another generator or iterable object.">yield*</a></li>
</ol></li>
<li>Statements &amp; declarations
<ol>
<li><a href="Reference/Statements/async_function.html" title="An async function is a function declared with the async keyword. Async functions are instances of the AsyncFunction constructor, and the await keyword is permitted within them. The async and await keywords enable asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.">async function</a></li>
<li><a href="Reference/Statements/block.html" title="A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of braces (&quot;curly brackets&quot;) and may optionally be labelled:">block</a></li>
<li><a href="Reference/Statements/break.html" title="The break statement terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.">break</a></li>
<li><a href="Reference/Statements/class.html" title="The class declaration creates a new class with a given name using prototype-based inheritance.">class</a></li>
<li><a href="Reference/Statements/const.html" title="Constants are block-scoped, much like variables declared using the let keyword. The value of a constant can&#39;t be changed through reassignment, and it can&#39;t be redeclared.">const</a></li>
<li><a href="Reference/Statements/continue.html" title="The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.">continue</a></li>
<li><a href="Reference/Statements/debugger.html" title="The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.">debugger</a></li>
<li><a href="Reference/Statements/do...html" title="The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.">do...while</a></li>
<li><a href="Reference/Statements/Empty.html" title="An empty statement is used to provide no statement, although the JavaScript syntax would expect one.">empty</a></li>
<li><a href="Reference/Statements/export.html" title="The export statement is used when creating JavaScript modules to export live bindings to functions, objects, or primitive values from the module so they can be used by other programs with the import statement. Bindings that are exported can still be modified locally; when imported, although they can only be read by the importing module the value updates whenever it is updated by the exporting module.">export</a></li>
<li><a href="Reference/Statements/for.html" title="The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.">for</a></li>
<li><a href="Reference/Statements/for-await...html" title="The for await...of statement creates a loop iterating over async iterable objects as well as on sync iterables, including: built-in String, Array, Array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined async/sync iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object. Like the await operator, the statement can only be used inside an async function.">for await...of</a></li>
<li><a href="Reference/Statements/for...html" title="The for...in statement iterates over all enumerable properties of an object that are keyed by strings (ignoring ones keyed by Symbols), including inherited enumerable properties.">for...in</a></li>
<li><a href="Reference/Statements/for..-2.html" title="The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.">for...of</a></li>
<li><a href="Reference/Statements/function.html" title="The function declaration (function statement) defines a function with the specified parameters.">function declaration</a></li>
<li><a href="Reference/Statements/function_.html" title="The function* declaration (function keyword followed by an asterisk) defines a generator function, which returns a Generator object.">function*</a></li>
<li><a href="Reference/Statements/if...html" title="The if statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement can be executed.">if...else</a></li>
<li><a href="Reference/Statements/import.html" title="The static import statement is used to import read only live bindings which are exported by another module. ">import</a></li>
<li><a href="Reference/Statements/import-2.html" title="The import.meta object exposes context-specific metadata to a JavaScript module. It contains information about the module, like the module&#39;s URL.">import.meta</a></li>
<li><a href="Reference/Statements/label.html" title="The labeled statement can be used with break or continue statements. It is prefixing a statement with an identifier which you can refer to.">label</a></li>
<li><a href="Reference/Statements/let.html" title="The let statement declares a block-scoped local variable, optionally initializing it to a value.">let</a></li>
<li><a href="Reference/Statements/return.html" title="The return statement ends function execution and specifies a value to be returned to the function caller.">return</a></li>
<li><a href="Reference/Statements/switch.html" title="The switch statement evaluates an expression, matching the expression&#39;s value to a case clause, and executes statements associated with that case, as well as statements in cases that follow the matching case.">switch</a></li>
<li><a href="Reference/Statements/throw.html" title="The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won&#39;t be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.">throw</a></li>
<li><a href="Reference/Statements/try...html" title="The try...catch statement marks a block of statements to try and specifies a response should an exception be thrown.">try...catch</a></li>
<li><a href="Reference/Statements/var.html" title="The var statement declares a function-scoped or globally-scoped variable, optionally initializing it to a value.">var</a></li>
<li><a href="Reference/Statements/while.html" title="The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.">while</a></li>
<li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."> <em></em> </span></span><a href="Reference/Statements/with.html" title="The with statement extends the scope chain for a statement.">with</a></li>
</ol></li>
<li>Functions
<ol>
<li><a href="Reference/Functions/Arrow_functions.html" title="An arrow function expression is a compact alternative to a traditional function expression, but is limited and can&#39;t be used in all situations.">Arrow function expressions</a></li>
<li><a href="Reference/Functions/Default_parameters.html" title="Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.">Default parameters</a></li>
<li><a href="Reference/Functions/Method_definitions.html" title="Starting with ECMAScript 2015, a shorter syntax for method definitions on objects initializers is introduced. It is a shorthand for a function assigned to the method&#39;s name.">Method definitions</a></li>
<li><a href="Reference/Functions/rest_parameters.html" title="The rest parameter syntax allows us to represent an indefinite number of arguments as an array.">Rest parameters</a></li>
<li><a href="Reference/Functions/arguments.html" title="arguments is an Array-like object accessible inside functions that contains the values of the arguments passed to that function.">The arguments object</a></li>
<li><a href="Reference/Functions/get.html" title="The get syntax binds an object property to a function that will be called when that property is looked up.">getter</a></li>
<li><a href="Reference/Functions/set.html" title="The set syntax binds an object property to a function to be called when there is an attempt to set that property.">setter</a></li>
</ol></li>
<li>Classes
<ol>
<li><a href="Reference/Classes/Private_class_fields.html" title="Class properties are public by default and can be examined or modified outside the class. There is however an experimental proposal to allow defining private class fields using a hash # prefix is added.">Private class fields</a></li>
<li><a href="Reference/Classes/Public_class_fields.html" title="Both static and instance public fields are writable, enumerable, and configurable properties. As such, unlike their private counterparts, they participate in prototype inheritance.">Public class fields</a></li>
<li><a href="Reference/Classes/constructor.html" title="The constructor method is a special method of a class for creating and initializing an object of that class.">constructor</a></li>
<li><a href="Reference/Classes/extends.html" title="The extends keyword is used in class declarations or class expressions to create a class that is a child of another class.">extends</a></li>
<li><a href="Reference/Classes/static.html" title="The static keyword defines a static method or property for a class. Neither static methods nor static properties can be called on instances of the class. Instead, they&#39;re called on the class itself.">static</a></li>
</ol></li>
<li>Errors
<ol>
<li><a href="Reference/Errors/Property_access_denied.html" title="The JavaScript exception &quot;Permission denied to access property&quot; occurs when there was an attempt to access an object for which you have no permission.">Error: Permission denied to access property "x"</a></li>
<li><a href="Reference/Errors/Too_much_recursion.html" title="The JavaScript exception &quot;too much recursion&quot; or &quot;Maximum call stack size exceeded&quot; occurs when there are too many function calls, or a function is missing a base case.">InternalError: too much recursion</a></li>
<li><a href="Reference/Errors/Not_a_codepoint.html" title="The JavaScript exception &quot;Invalid code point&quot; occurs when NaN values, negative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF (1114111) are used with String.fromCodePoint().">RangeError: argument is not a valid code point</a></li>
<li><a href="Reference/Errors/Invalid_array_length.html" title="The JavaScript exception &quot;Invalid array length&quot; occurs when creating an Array or an ArrayBuffer which has a length which is either negative or larger or equal to 232, or when setting the Array.length property to a value which is either negative or larger or equal to 232.">RangeError: invalid array length</a></li>
<li><a href="Reference/Errors/Invalid_date.html" title="The JavaScript exception &quot;invalid date&quot; occurs when a string leading to an invalid date has been provided to Date or Date.parse().">RangeError: invalid date</a></li>
<li><a href="Reference/Errors/Precision_range.html" title="The JavaScript exception &quot;precision is out of range&quot; occurs when a number that&#39;s outside of the range of 0 and 20 (or 21) was passed into toFixed or toPrecision.">RangeError: precision is out of range</a></li>
<li><a href="Reference/Errors/Bad_radix.html" title="The JavaScript exception &quot;radix must be an integer at least 2 and no greater than 36&quot; occurs when the optional radix parameter of the Number.prototype.toString() or the BigInt.prototype.toString() method was specified and is not between 2 and 36.">RangeError: radix must be an integer</a></li>
<li><a href="Reference/Errors/Resulting_string_too_large.html" title="The JavaScript exception &quot;repeat count must be less than infinity&quot; occurs when the String.prototype.repeat() method is used with a count argument that is infinity.">RangeError: repeat count must be less than infinity</a></li>
<li><a href="Reference/Errors/Negative_repetition_count.html" title="The JavaScript exception &quot;repeat count must be non-negative&quot; occurs when the String.prototype.repeat() method is used with a count argument that is a negative number.">RangeError: repeat count must be non-negative</a></li>
<li><a href="Reference/Errors/Not_defined.html" title="The JavaScript exception &quot;variable is not defined&quot; occurs when there is a non-existent variable referenced somewhere.">ReferenceError: "x" is not defined</a></li>
<li><a href="Reference/Errors/Undeclared_var.html" title="The JavaScript strict mode-only exception &quot;Assignment to undeclated variable&quot; occurs when the value has been assigned to an undeclared variable.">ReferenceError: assignment to undeclared variable "x"</a></li>
<li><a href="Reference/Errors/Cant_access_lexical_declaration_before_init.html" title="The JavaScript exception &quot;can&#39;t access lexical declaration `variable&#39; before initialization&quot; occurs when a lexical variable was accessed before it was initialized. This happens within any block statement, when let or const declarations are accessed before they are defined.">ReferenceError: can't access lexical declaration`X' before initialization</a></li>
<li><a href="Reference/Errors/Deprecated_caller_or_arguments_usage.html" title="The JavaScript strict mode-only exception &quot;deprecated caller or arguments usage&quot; occurs when the deprecated Function.caller or Function.arguments properties are used.">ReferenceError: deprecated caller or arguments usage</a></li>
<li><a href="Reference/Errors/Invalid_assignment_left-hand_side.html" title="The JavaScript exception &quot;invalid assignment left-hand side&quot; occurs when there was an unexpected assignment somewhere. For example, a single &quot;=&quot; sign was used instead of &quot;==&quot; or &quot;===&quot;.">ReferenceError: invalid assignment left-hand side</a></li>
<li><a href="Reference/Errors/Undefined_prop.html" title="The JavaScript warning &quot;reference to undefined property&quot; occurs when a script attempted to access an object property which doesn&#39;t exist.">ReferenceError: reference to undefined property "x"</a></li>
<li><a href="Reference/Errors/Deprecated_octal.html" title="The JavaScript strict mode-only exception &quot;0-prefixed octal literals and octal escape sequences are deprecated; for octal literals use the &quot;0o&quot; prefix instead&quot; occurs when deprecated octal literals and octal escape sequences are used.">SyntaxError: "0"-prefixed octal literals and octal escape seq. are deprecated</a></li>
<li><a href="Reference/Errors/Strict_Non_Simple_Params.html" title="The JavaScript exception &quot;&#39;use strict&#39; not allowed in function&quot; occurs when a &quot;use strict&quot; directive is used at the top of a function with default parameters, rest parameters, or destructuring parameters.">SyntaxError: "use strict" not allowed in function with non-simple parameters</a></li>
<li><a href="Reference/Errors/Reserved_identifier.html" title="The JavaScript exception &quot;variable is a reserved identifier&quot; occurs when reserved keywords are used as identifiers.">SyntaxError: "x" is a reserved identifier</a></li>
<li><a href="Reference/Errors/JSON_bad_parse.html" title="The JavaScript exceptions thrown by JSON.parse() occur when string failed to be parsed as JSON.">SyntaxError: JSON.parse: bad parsing</a></li>
<li><a href="Reference/Errors/Malformed_formal_parameter.html" title="The JavaScript exception &quot;malformed formal parameter&quot; occurs when the argument list of a Function() constructor call is invalid somehow.">SyntaxError: Malformed formal parameter</a></li>
<li><a href="Reference/Errors/Unexpected_token.html" title="The JavaScript exceptions &quot;unexpected token&quot; occur when a specific language construct was expected, but something else was provided. This might be a simple typo.">SyntaxError: Unexpected token</a></li>
<li><a href="Reference/Errors/Deprecated_source_map_pragma.html" title="The JavaScript warning &quot;Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead&quot; occurs when there is a deprecated source map syntax in a JavaScript source.">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li>
<li><a href="Reference/Errors/Invalid_for-of_initializer.html" title="The JavaScript exception &quot;a declaration in the head of a for-of loop can&#39;t have an initializer&quot; occurs when the head of a for...of loop contains an initializer expression such as |for (var i = 0 of iterable)|. This is not allowed in for-of loops.">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li>
<li><a href="Reference/Errors/Delete_in_strict_mode.html" title="The JavaScript strict mode-only exception &quot;applying the &#39;delete&#39; operator to an unqualified name is deprecated&quot; occurs when variables are attempted to be deleted using the delete operator.">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li>
<li><a href="Reference/Errors/Invalid_for-in_initializer.html" title="The JavaScript strict mode-only exception &quot;for-in loop head declarations may not have initializers&quot; occurs when the head of a for...in contains an initializer expression, such as |for (var i = 0 in obj)|. This is not allowed in for-of loops in strict mode.">SyntaxError: for-in loop head declarations may not have initializers</a></li>
<li><a href="Reference/Errors/Unnamed_function_statement.html" title="The JavaScript exception &quot;function statement requires a name&quot; occurs when there is a function statement in the code that requires a name.">SyntaxError: function statement requires a name</a></li>
<li><a href="Reference/Errors/Identifier_after_number.html" title="The JavaScript exception &quot;identifier starts immediately after numeric literal&quot; occurs when an identifier started with a digit. Identifiers can only start with a letter, underscore (_), or dollar sign ($).">SyntaxError: identifier starts immediately after numeric literal</a></li>
<li><a href="Reference/Errors/Illegal_character.html" title="The JavaScript exception &quot;illegal character&quot; occurs when there is an invalid or unexpected token that doesn&#39;t belong at this position in the code.">SyntaxError: illegal character</a></li>
<li><a href="Reference/Errors/Bad_regexp_flag.html" title="The JavaScript exception &quot;invalid regular expression flag&quot; occurs when the flags, defined after the second slash in regular expression literal, are not one of g, i, m, s, u, or y.">SyntaxError: invalid regular expression flag "x"</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_argument_list.html" title="The JavaScript exception &quot;missing ) after argument list&quot; occurs when there is an error with how a function is called. This might be a typo, a missing operator, or an unescaped string.">SyntaxError: missing ) after argument list</a></li>
<li><a href="Reference/Errors/Missing_parenthesis_after_condition.html" title="The JavaScript exception &quot;missing ) after condition&quot; occurs when there is an error with how an if condition is written. It must appear in parenthesis after the if keyword.">SyntaxError: missing ) after condition</a></li>
<li><a href="Reference/Errors/Missing_colon_after_property_id.html" title="The JavaScript exception &quot;missing : after property id&quot; occurs when objects are created using the object initializer syntax. A colon (:) separates keys and values for the object&#39;s properties. Somehow, this colon is missing or misplaced.">SyntaxError: missing : after property id</a></li>
<li><a href="Reference/Errors/Missing_semicolon_before_statement.html" title="The JavaScript exception &quot;missing ; before statement&quot; occurs when there is a semicolon (;) missing somewhere and can&#39;t be added by automatic semicolon insertion (ASI). You need to provide a semicolon, so that JavaScript can parse the source code correctly.">SyntaxError: missing ; before statement</a></li>
<li><a href="Reference/Errors/Missing_initializer_in_const.html" title="The JavaScript exception &quot;missing = in const declaration&quot; occurs when a const declaration was not given a value in the same statement (like const RED_FLAG;). You need to provide one (const RED_FLAG = &#39;#ff0&#39;).">SyntaxError: missing = in const declaration</a></li>
<li><a href="Reference/Errors/Missing_bracket_after_list.html" title="The JavaScript exception &quot;missing ] after element list&quot; occurs when there is an error with the array initializer syntax somewhere. Likely there is a closing bracket (&quot;]&quot;) or a comma (&quot;,&quot;) missing.">SyntaxError: missing ] after element list</a></li>
<li><a href="Reference/Errors/Missing_formal_parameter.html" title="The JavaScript exception &quot;missing formal parameter&quot; occurs when your function declaration is missing valid parameters.">SyntaxError: missing formal parameter</a></li>
<li><a href="Reference/Errors/Missing_name_after_dot_operator.html" title="The JavaScript exception &quot;missing name after . operator&quot; occurs when there is a problem with how the dot operator (.) is used for property access.">SyntaxError: missing name after . operator</a></li>
<li><a href="Reference/Errors/No_variable_name.html" title="The JavaScript exception &quot;missing variable name&quot; occurs way too often as naming things is so hard. Or maybe a comma is wrong. Check for typos!">SyntaxError: missing variable name</a></li>
<li><a href="Reference/Errors/Missing_curly_after_function_body.html" title="The JavaScript exception &quot;missing } after function body&quot; occurs when there is a syntax mistake when creating a function somewhere. Check if any closing curly brackets or parenthesis are in the correct order.">SyntaxError: missing } after function body</a></li>
<li><a href="Reference/Errors/Missing_curly_after_property_list.html" title="The JavaScript exception &quot;missing } after property list&quot; occurs when there is a mistake in the object initializer syntax somewhere. Might be in fact a missing curly bracket, but could also be a missing comma.">SyntaxError: missing } after property list</a></li>
<li><a href="Reference/Errors/Redeclared_parameter.html" title="The JavaScript exception &quot;redeclaration of formal parameter&quot; occurs when the same variable name occurs as a function parameter and is then redeclared using a let assignment in a function body again.">SyntaxError: redeclaration of formal parameter "x"</a></li>
<li><a href="Reference/Errors/Bad_return_or_yield.html" title="The JavaScript exception &quot;return (or yield) not in function&quot; occurs when a return or yield statement is called outside of a function.">SyntaxError: return not in function</a></li>
<li><a href="Reference/Errors/Equal_as_assign.html" title="The JavaScript warning &quot;test for equality (==) mistyped as assignment (=)?&quot; occurs when there was an assignment (=) when you would normally expect a test for equality (==).">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li>
<li><a href="Reference/Errors/Unterminated_string_literal.html" title="The JavaScript error &quot;unterminated string literal&quot; occurs when there is an unterminated String somewhere. String literals must be enclosed by single (&#39;) or double (&quot;) quotes.">SyntaxError: unterminated string literal</a></li>
<li><a href="Reference/Errors/No_properties.html" title="The JavaScript exception &quot;null (or undefined) has no properties&quot; occurs when you attempt to access properties of null and undefined. They don&#39;t have any.">TypeError: "x" has no properties</a></li>
<li><a href="Reference/Errors/Unexpected_type.html" title="The JavaScript exception &quot;x is (not) y&quot; occurs when there was an unexpected type. Oftentimes, unexpected undefined or null values.">TypeError: "x" is (not) "y"</a></li>
<li><a href="Reference/Errors/Not_a_constructor.html" title="The JavaScript exception &quot;is not a constructor&quot; occurs when there was an attempt to use an object or a variable as a constructor, but that object or variable is not a constructor.">TypeError: "x" is not a constructor</a></li>
<li><a href="Reference/Errors/Not_a_function.html" title="The JavaScript exception &quot;is not a function&quot; occurs when there was an attempt to call a value from a function, but the value is not actually a function.">TypeError: "x" is not a function</a></li>
<li><a href="Reference/Errors/No_non-null_object.html" title="The JavaScript exception &quot;is not a non-null object&quot; occurs when an object is expected somewhere and wasn&#39;t provided. null is not an object and won&#39;t work.">TypeError: "x" is not a non-null object</a></li>
<li><a href="Reference/Errors/Read-only.html" title="The JavaScript strict mode-only exception &quot;is read-only&quot; occurs when a global variable or object property that was assigned to is a read-only property.">TypeError: "x" is read-only</a></li>
<li><a href="Reference/Errors/is_not_iterable.html" title="The JavaScript exception &quot;is not iterable&quot; occurs when the value which is given as the right hand-side of for…of or as argument of a function such as Promise.all or TypedArray.from, is not an iterable object.">TypeError: 'x' is not iterable</a></li>
<li><a href="Reference/Errors/More_arguments_needed.html" title="The JavaScript exception &quot;more arguments needed&quot; occurs when there is an error with how a function is called. More arguments need to be provided.">TypeError: More arguments needed</a></li>
<li><a href="Reference/Errors/Reduce_of_empty_array_with_no_initial_value.html" title="The JavaScript exception &quot;reduce of empty array with no initial value&quot; occurs when a reduce function is used.">TypeError: Reduce of empty array with no initial value</a></li>
<li><a href="Reference/Errors/Called_on_incompatible_type.html" title="The JavaScript exception &quot;called on incompatible target (or object)&quot; occurs when a function (on a given object), is called with a this not corresponding to the type expected by the function.">TypeError: X.prototype.y called on incompatible type</a></li>
<li><a href="Reference/Errors/Dead_object.html" title="The JavaScript exception &quot;can&#39;t access dead object&quot; occurs when Firefox disallows add-ons to keep strong references to DOM objects after their parent document has been destroyed to improve in memory usage and to prevent memory leaks.">TypeError: can't access dead object</a></li>
<li><a href="Reference/Errors/Cant_access_property.html" title="The JavaScript exception &quot;can&#39;t access property&quot; occurs when property access was operated on undefined or null values.">TypeError: can't access property "x" of "y"</a></li>
<li><a href="Reference/Errors/Cant_assign_to_property.html" title="The JavaScript strict mode exception &quot;can&#39;t assign to property&quot; occurs when attempting to create a property on primitive value such as a symbol, a string, a number or a boolean. Primitive values cannot hold any property.">TypeError: can't assign to property "x" on "y": not an object</a></li>
<li><a href="Reference/Errors/Cant_define_property_object_not_extensible.html" title="The JavaScript exception &quot;can&#39;t define property &quot;x&quot;: &quot;obj&quot; is not extensible&quot; occurs when Object.preventExtensions() marked an object as no longer extensible, so that it will never have properties beyond the ones it had at the time it was marked as non-extensible.">TypeError: can't define property "x": "obj" is not extensible</a></li>
<li><a href="Reference/Errors/Non_configurable_array_element.html" title="The JavaScript exception &quot;can&#39;t delete non-configurable array element&quot; occurs when it was attempted to shorten the length of an array, but one of the array&#39;s elements is non-configurable.">TypeError: can't delete non-configurable array element</a></li>
<li><a href="Reference/Errors/Cant_redefine_property.html" title="The JavaScript exception &quot;can&#39;t redefine non-configurable property&quot; occurs when it was attempted to redefine a property, but that property is non-configurable.">TypeError: can't redefine non-configurable property "x"</a></li>
<li><a href="Reference/Errors/in_operator_no_object.html" title="The JavaScript exception &quot;right-hand side of &#39;in&#39; should be an object&quot; occurs when the in operator was used to search in strings, or in numbers, or other primitive types. It can only be used to check if a property is in an object.">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li>
<li><a href="Reference/Errors/Cyclic_object_value.html" title="The JavaScript exception &quot;cyclic object value&quot; occurs when object references were found in JSON. JSON.stringify() doesn&#39;t try to solve them and fails accordingly.">TypeError: cyclic object value</a></li>
<li><a href="Reference/Errors/invalid_right_hand_side_instanceof_operand.html" title="The JavaScript exception &quot;invalid &#39;instanceof&#39; operand&quot; occurs when the right hand side operands of the instanceof operator isn&#39;t used with a constructor object, i.e. an object which has a prototype property and is callable.">TypeError: invalid 'instanceof' operand 'x'</a></li>
<li><a href="Reference/Errors/Array_sort_argument.html" title="The JavaScript exception &quot;invalid Array.prototype.sort argument&quot; occurs when the argument of Array.prototype.sort() isn&#39;t either undefined or a function which compares its operands.">TypeError: invalid Array.prototype.sort argument</a></li>
<li><a href="Reference/Errors/Typed_array_invalid_arguments.html" title="The JavaScript exception &quot;invalid arguments&quot; occurs when typed array constructors are provided with a wrong argument.">TypeError: invalid arguments</a></li>
<li><a href="Reference/Errors/Invalid_const_assignment.html" title="The JavaScript exception &quot;invalid assignment to const&quot; occurs when it was attempted to alter a constant value. JavaScript const declarations can&#39;t be re-assigned or redeclared.">TypeError: invalid assignment to const "x"</a></li>
<li><a href="Reference/Errors/Cant_delete.html" title="The JavaScript exception &quot;property is non-configurable and can&#39;t be deleted&quot; occurs when it was attempted to delete a property, but that property is non-configurable.">TypeError: property "x" is non-configurable and can't be deleted</a></li>
<li><a href="Reference/Errors/Getter_only.html" title="The JavaScript strict mode-only exception &quot;setting getter-only property&quot; occurs when there is an attempt to set a new value to a property for which only a getter is specified.">TypeError: setting getter-only property "x"</a></li>
<li><a href="Reference/Errors/Var_hides_argument.html" title="The JavaScript strict mode-only exception &quot;variable redeclares argument&quot; occurs when the same variable name occurs as a function parameter and is then redeclared using a var assignment in a function body again.">TypeError: variable "x" redeclares argument</a></li>
<li><a href="Reference/Errors/Malformed_URI.html" title="The JavaScript exception &quot;malformed URI sequence&quot; occurs when URI encoding or decoding wasn&#39;t successful.">URIError: malformed URI sequence</a></li>
<li><a href="Reference/Errors/Already_has_pragma.html" title="The JavaScript warning &quot;-file- is being assigned a //# sourceMappingURL, but already has one.&quot; occurs when a source map has been specified more than once for a given JavaScript source.">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li>
<li><a href="Reference/Errors/Bad_octal.html" title="The JavaScript warning &quot;08 (or 09) is not a legal ECMA-262 octal constant&quot; occurs when 08 or 09 number literals are used. They can&#39;t be interpreted as an octal number.">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li>
<li><a href="Reference/Errors/Deprecated_toLocaleFormat.html" title="The JavaScript warning &quot;Date.prototype.toLocaleFormat is deprecated; consider using Intl.DateTimeFormat instead&quot; occurs when the non-standard Date.prototype.toLocaleFormat method is used.">Warning: Date.prototype.toLocaleFormat is deprecated</a></li>
<li><a href="Reference/Errors/For-each-in_loops_are_deprecated.html" title="The JavaScript warning &quot;JavaScript 1.6&#39;s for-each-in loops are deprecated; consider using ES6 for-of instead&quot; occurs when a for each (variable in obj) statement is used.">Warning: JavaScript 1.6's for-each-in loops are deprecated</a></li>
<li><a href="Reference/Errors/Deprecated_String_generics.html" title="The JavaScript warning about string generics occurs in Firefox versions prior to 68. String generics have been removed starting with Firefox 68.">Warning: String.x is deprecated; use String.prototype.x instead</a></li>
<li><a href="Reference/Errors/Deprecated_expression_closures.html" title="The JavaScript warning &quot;expression closures are deprecated&quot; occurs when the non-standard expression closure syntax (shorthand function syntax) is used.">Warning: expression closures are deprecated</a></li>
<li><a href="Reference/Errors/Stmt_after_return.html" title="The JavaScript warning &quot;unreachable code after return statement&quot; occurs when using an expression after a return statement, or when using a semicolon-less return statement but including an expression directly after.">Warning: unreachable code after return statement</a></li>
</ol></li>
<li>Misc
<ol>
<li><a href="JavaScript_technologies_overview.html">JavaScript technologies overview</a></li>
<li><a href="Reference/Lexical_grammar.html">Lexical grammar</a></li>
<li><a href="Data_structures.html">JavaScript data structures</a></li>
<li><a href="Enumerability_and_ownership_of_properties.html">Enumerability and ownership of properties</a></li>
<li><a href="Reference/Iteration_protocols.html">Iteration protocols</a></li>
<li><a href="Reference/Strict_mode.html">Strict mode</a></li>
<li><a href="Reference/Strict_mode/Transitioning_to_strict_mode.html">Transitioning to strict mode</a></li>
<li><a href="Reference/Template_literals.html">Template literals</a></li>
<li><a href="Reference/Deprecated_and_obsolete_features.html">Deprecated features</a></li>
</ol></li>
</ol>
</div>
</div>
</div>
<section class="newsletter-container">
<div id="newsletter-form-container" class="newsletter">
<section class="newsletter-head">
<h2 id="learn-the-best-of-web-development-12" class="newsletter-teaser">Learn the best of web development</h2>
<p>Get the latest and greatest from MDN delivered straight to your inbox.</p>
<p>The newsletter is offered in English only at the moment.</p>
</section>
<div class="form-group newsletter-group-email">
E-mail
</div>
<div id="newsletter-privacy" class="form-group form-group-agree newsletter-group-privacy" data-aria-hidden="false">
I’m okay with Mozilla handling my info as explained in this <a href="../../../../../external.html?link=https://www.mozilla.org/privacy/">Privacy Policy</a>.
</div>
<div class="newsletter-group-submit">
Sign up now
</div>
<span>Hide Newsletter Sign-up</span>
</div>
</section>
<div class="content-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/" class="nav-footer-logo">MDN Web Docs</a>
<ul>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Web">Web Technologies</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/Learn">Learn Web Development</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/About">About MDN</a></li>
<li><a href="../../../../../external.html?link=https://developer.mozilla.org/en-US/docs/MDN/Feedback">Feedback</a></li>
</ul>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/">About</a></li>
<li><a href="../../../../../external.html?link=https://shop.spreadshirt.com/mdn-store/">MDN Web Docs Store</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/contact/">Contact Us</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/firefox/?utm_source=developer.mozilla.org&amp;utm_campaign=footer&amp;utm_medium=referral">Firefox</a></li>
</ul>
<div class="social social-mdn">
<h4 id="mdn-12">MDN</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<div class="social social-moz">
<h4 id="mozilla-12">Mozilla</h4>
<ul>
<li></li>
<li></li>
</ul>
</div>
<p>© 2005-2020 Mozilla and individual contributors. Content is available under <a href="../../../../../external.html?link=https://developer.mozilla.org/docs/MDN/About#Copyrights_and_licenses">these licenses</a>.</p>
<ul>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/about/legal/terms/mozilla">Terms</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/">Privacy</a></li>
<li><a href="../../../../../external.html?link=https://www.mozilla.org/privacy/websites/#cookies">Cookies</a></li>
</ul>
</div>
<div id="auth-modal" class="modal hidden">
<section class="auth-providers" tabindex="-1" data-role="dialog" data-aria-modal="true" data-aria-labelledby="modal-main-heading">
<h2 id="modal-main-heading">Sign In</h2>
<p>Sign in to enjoy the benefits of an MDN account. If you haven’t already created an account, you will be prompted to do so after signing in.</p>
<div class="auth-button-container">
<a href="../../../../../external.html?link=https://developer.mozilla.org/users/github/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FTyped_arrays" class="github-auth">Sign in with Github</a> <a href="../../../../../external.html?link=https://developer.mozilla.org/users/google/login/?next=%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FTyped_arrays" class="google-auth">Sign in with Google</a>
</div>
<span>Close modal</span>
</section>
</div>
